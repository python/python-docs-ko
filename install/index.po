# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-30 09:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/install/index.rst:7
msgid "Installing Python Modules (Legacy version)"
msgstr ""

#: ../Doc/install/index.rst
msgid "Author"
msgstr ""

#: ../Doc/install/index.rst:9
msgid "Greg Ward"
msgstr ""

#: ../Doc/install/index.rst:15
msgid ":ref:`installing-index`"
msgstr ""

#: ../Doc/install/index.rst:16
msgid "The up to date module installation documentations"
msgstr ""

#: ../Doc/install/index.rst:28
msgid ""
"This document describes the Python Distribution Utilities (\"Distutils\")"
" from the end-user's point-of-view, describing how to extend the "
"capabilities of a standard Python installation by building and installing"
" third-party Python modules and extensions."
msgstr ""

#: ../Doc/install/index.rst:36
msgid ""
"This guide only covers the basic tools for building and distributing "
"extensions that are provided as part of this version of Python. Third "
"party tools offer easier to use and more secure alternatives. Refer to "
"the `quick recommendations section <https://packaging.python.org/guides"
"/tool-recommendations/>`__ in the Python Packaging User Guide for more "
"information."
msgstr ""

#: ../Doc/install/index.rst:47
msgid "Introduction"
msgstr ""

#: ../Doc/install/index.rst:49
msgid ""
"Although Python's extensive standard library covers many programming "
"needs, there often comes a time when you need to add some new "
"functionality to your Python installation in the form of third-party "
"modules.  This might be necessary to support your own programming, or to "
"support an application that you want to use and that happens to be "
"written in Python."
msgstr ""

#: ../Doc/install/index.rst:55
msgid ""
"In the past, there has been little support for adding third-party modules"
" to an existing Python installation.  With the introduction of the Python"
" Distribution Utilities (Distutils for short) in Python 2.0, this "
"changed."
msgstr ""

#: ../Doc/install/index.rst:59
msgid ""
"This document is aimed primarily at the people who need to install third-"
"party Python modules: end-users and system administrators who just need "
"to get some Python application running, and existing Python programmers "
"who want to add some new goodies to their toolbox.  You don't need to "
"know Python to read this document; there will be some brief forays into "
"using Python's interactive mode to explore your installation, but that's "
"it.  If you're looking for information on how to distribute your own "
"Python modules so that others may use them, see the :ref:`distutils-"
"index` manual.  :ref:`debug-setup-script` may also be of interest."
msgstr ""

#: ../Doc/install/index.rst:73
msgid "Best case: trivial installation"
msgstr ""

#: ../Doc/install/index.rst:75
msgid ""
"In the best case, someone will have prepared a special version of the "
"module distribution you want to install that is targeted specifically at "
"your platform and is installed just like any other software on your "
"platform.  For example, the module developer might make an executable "
"installer available for Windows users, an RPM package for users of RPM-"
"based Linux systems (Red Hat, SuSE, Mandrake, and many others), a Debian "
"package for users of Debian-based Linux systems, and so forth."
msgstr ""

#: ../Doc/install/index.rst:83
msgid ""
"In that case, you would download the installer appropriate to your "
"platform and do the obvious thing with it: run it if it's an executable "
"installer, ``rpm --install`` it if it's an RPM, etc.  You don't need to "
"run Python or a setup script, you don't need to compile anything---you "
"might not even need to read any instructions (although it's always a good"
" idea to do so anyway)."
msgstr ""

#: ../Doc/install/index.rst:89
msgid ""
"Of course, things will not always be that easy.  You might be interested "
"in a module distribution that doesn't have an easy-to-use installer for "
"your platform.  In that case, you'll have to start with the source "
"distribution released by the module's author/maintainer.  Installing from"
" a source distribution is not too hard, as long as the modules are "
"packaged in the standard way.  The bulk of this document is about "
"building and installing modules from standard source distributions."
msgstr ""

#: ../Doc/install/index.rst:101
msgid "The new standard: Distutils"
msgstr ""

#: ../Doc/install/index.rst:103
msgid ""
"If you download a module source distribution, you can tell pretty quickly"
" if it was packaged and distributed in the standard way, i.e. using the "
"Distutils. First, the distribution's name and version number will be "
"featured prominently in the name of the downloaded archive, e.g. "
":file:`foo-1.0.tar.gz` or :file:`widget-0.9.7.zip`.  Next, the archive "
"will unpack into a similarly-named directory: :file:`foo-1.0` or "
":file:`widget-0.9.7`.  Additionally, the distribution will contain a "
"setup script :file:`setup.py`, and a file named :file:`README.txt` or "
"possibly just :file:`README`, which should explain that building and "
"installing the module distribution is a simple matter of running one "
"command from a terminal::"
msgstr ""

#: ../Doc/install/index.rst:116
msgid ""
"For Windows, this command should be run from a command prompt window "
"(:menuselection:`Start --> Accessories`)::"
msgstr ""

#: ../Doc/install/index.rst:121
msgid ""
"If all these things are true, then you already know how to build and "
"install the modules you've just downloaded:  Run the command above. "
"Unless you need to install things in a non-standard way or customize the "
"build process, you don't really need this manual.  Or rather, the above "
"command is everything you need to get out of this manual."
msgstr ""

#: ../Doc/install/index.rst:131
msgid "Standard Build and Install"
msgstr ""

#: ../Doc/install/index.rst:133
msgid ""
"As described in section :ref:`inst-new-standard`, building and installing"
" a module distribution using the Distutils is usually one simple command "
"to run from a terminal::"
msgstr ""

#: ../Doc/install/index.rst:143
msgid "Platform variations"
msgstr ""

#: ../Doc/install/index.rst:145
msgid ""
"You should always run the setup command from the distribution root "
"directory, i.e. the top-level subdirectory that the module source "
"distribution unpacks into.  For example, if you've just downloaded a "
"module source distribution :file:`foo-1.0.tar.gz` onto a Unix system, the"
" normal thing to do is::"
msgstr ""

#: ../Doc/install/index.rst:154
msgid ""
"On Windows, you'd probably download :file:`foo-1.0.zip`.  If you "
"downloaded the archive file to :file:`C:\\\\Temp`, then it would unpack "
"into :file:`C:\\\\Temp\\\\foo-1.0`; you can use either an archive "
"manipulator with a graphical user interface (such as WinZip) or a "
"command-line tool (such as :program:`unzip` or :program:`pkunzip`) to "
"unpack the archive.  Then, open a command prompt window and run::"
msgstr ""

#: ../Doc/install/index.rst:168
msgid "Splitting the job up"
msgstr ""

#: ../Doc/install/index.rst:170
msgid ""
"Running ``setup.py install`` builds and installs all modules in one run."
"  If you prefer to work incrementally---especially useful if you want to "
"customize the build process, or if things are going wrong---you can use "
"the setup script to do one thing at a time.  This is particularly helpful"
" when the build and install will be done by different users---for "
"example, you might want to build a module distribution and hand it off to"
" a system administrator for installation (or do it yourself, with super-"
"user privileges)."
msgstr ""

#: ../Doc/install/index.rst:178
msgid ""
"For example, you can build everything in one step, and then install "
"everything in a second step, by invoking the setup script twice::"
msgstr ""

#: ../Doc/install/index.rst:184
msgid ""
"If you do this, you will notice that running the :command:`install` "
"command first runs the :command:`build` command, which---in this case---"
"quickly notices that it has nothing to do, since everything in the "
":file:`build` directory is up-to-date."
msgstr ""

#: ../Doc/install/index.rst:189
msgid ""
"You may not need this ability to break things down often if all you do is"
" install modules downloaded off the 'net, but it's very handy for more "
"advanced tasks.  If you get into distributing your own Python modules and"
" extensions, you'll run lots of individual Distutils commands on their "
"own."
msgstr ""

#: ../Doc/install/index.rst:198
msgid "How building works"
msgstr ""

#: ../Doc/install/index.rst:200
msgid ""
"As implied above, the :command:`build` command is responsible for putting"
" the files to install into a *build directory*.  By default, this is "
":file:`build` under the distribution root; if you're excessively "
"concerned with speed, or want to keep the source tree pristine, you can "
"change the build directory with the :option:`!--build-base` option. For "
"example::"
msgstr ""

#: ../Doc/install/index.rst:208
msgid ""
"(Or you could do this permanently with a directive in your system or "
"personal Distutils configuration file; see section :ref:`inst-config-"
"files`.)  Normally, this isn't necessary."
msgstr ""

#: ../Doc/install/index.rst:212
msgid "The default layout for the build tree is as follows::"
msgstr ""

#: ../Doc/install/index.rst:219
msgid ""
"where ``<plat>`` expands to a brief description of the current "
"OS/hardware platform and Python version.  The first form, with just a "
":file:`lib` directory, is used for \"pure module distributions\"---that "
"is, module distributions that include only pure Python modules.  If a "
"module distribution contains any extensions (modules written in C/C++), "
"then the second form, with two ``<plat>`` directories, is used.  In that "
"case, the :file:`temp.{plat}` directory holds temporary files generated "
"by the compile/link process that don't actually get installed.  In either"
" case, the :file:`lib` (or :file:`lib.{plat}`) directory contains all "
"Python modules (pure Python and extensions) that will be installed."
msgstr ""

#: ../Doc/install/index.rst:229
msgid ""
"In the future, more directories will be added to handle Python scripts, "
"documentation, binary executables, and whatever else is needed to handle "
"the job of installing Python modules and applications."
msgstr ""

#: ../Doc/install/index.rst:237
msgid "How installation works"
msgstr ""

#: ../Doc/install/index.rst:239
msgid ""
"After the :command:`build` command runs (whether you run it explicitly, "
"or the :command:`install` command does it for you), the work of the "
":command:`install` command is relatively simple: all it has to do is copy"
" everything under :file:`build/lib` (or :file:`build/lib.{plat}`) to your"
" chosen installation directory."
msgstr ""

#: ../Doc/install/index.rst:245
msgid ""
"If you don't choose an installation directory---i.e., if you just run "
"``setup.py install``\\ ---then the :command:`install` command installs to"
" the standard location for third-party Python modules.  This location "
"varies by platform and by how you built/installed Python itself.  On Unix"
" (and Mac OS X, which is also Unix-based), it also depends on whether the"
" module distribution being installed is pure Python or contains "
"extensions (\"non-pure\"):"
msgstr ""

#: ../Doc/install/index.rst:255
msgid "Platform"
msgstr ""

#: ../Doc/install/index.rst:255
msgid "Standard installation location"
msgstr ""

#: ../Doc/install/index.rst:255
msgid "Default value"
msgstr ""

#: ../Doc/install/index.rst:255 ../Doc/install/index.rst:781
#: ../Doc/install/index.rst:793
msgid "Notes"
msgstr ""

#: ../Doc/install/index.rst:257
msgid "Unix (pure)"
msgstr ""

#: ../Doc/install/index.rst:257 ../Doc/install/index.rst:470
msgid ":file:`{prefix}/lib/python{X.Y}/site-packages`"
msgstr ""

#: ../Doc/install/index.rst:257 ../Doc/install/index.rst:259
msgid ":file:`/usr/local/lib/python{X.Y}/site-packages`"
msgstr ""

#: ../Doc/install/index.rst:257 ../Doc/install/index.rst:259
#: ../Doc/install/index.rst:783
msgid "\\(1)"
msgstr ""

#: ../Doc/install/index.rst:259
msgid "Unix (non-pure)"
msgstr ""

#: ../Doc/install/index.rst:259 ../Doc/install/index.rst:471
msgid ":file:`{exec-prefix}/lib/python{X.Y}/site-packages`"
msgstr ""

#: ../Doc/install/index.rst:261
msgid "Windows"
msgstr ""

#: ../Doc/install/index.rst:261 ../Doc/install/index.rst:522
msgid ":file:`{prefix}\\\\Lib\\\\site-packages`"
msgstr ""

#: ../Doc/install/index.rst:261
msgid ":file:`C:\\\\Python{XY}\\\\Lib\\\\site-packages`"
msgstr ""

#: ../Doc/install/index.rst:261 ../Doc/install/index.rst:785
msgid "\\(2)"
msgstr ""

#: ../Doc/install/index.rst:264 ../Doc/install/index.rst:805
msgid "Notes:"
msgstr ""

#: ../Doc/install/index.rst:267
msgid ""
"Most Linux distributions include Python as a standard part of the system,"
" so :file:`{prefix}` and :file:`{exec-prefix}` are usually both "
":file:`/usr` on Linux.  If you build Python yourself on Linux (or any "
"Unix-like system), the default :file:`{prefix}` and :file:`{exec-prefix}`"
" are :file:`/usr/local`."
msgstr ""

#: ../Doc/install/index.rst:273
msgid ""
"The default installation directory on Windows was :file:`C:\\\\Program "
"Files\\\\Python` under Python 1.6a1, 1.5.2, and earlier."
msgstr ""

#: ../Doc/install/index.rst:276
msgid ""
":file:`{prefix}` and :file:`{exec-prefix}` stand for the directories that"
" Python is installed to, and where it finds its libraries at run-time.  "
"They are always the same under Windows, and very often the same under "
"Unix and Mac OS X.  You can find out what your Python installation uses "
"for :file:`{prefix}` and :file:`{exec-prefix}` by running Python in "
"interactive mode and typing a few simple commands. Under Unix, just type "
"``python`` at the shell prompt.  Under Windows, choose "
":menuselection:`Start --> Programs --> Python X.Y --> Python (command "
"line)`.   Once the interpreter is started, you type Python code at the "
"prompt.  For example, on my Linux system, I type the three Python "
"statements shown below, and get the output as shown, to find out my "
":file:`{prefix}` and :file:`{exec-prefix}`:"
msgstr ""

#: ../Doc/install/index.rst:298
msgid ""
"A few other placeholders are used in this document: :file:`{X.Y}` stands "
"for the version of Python, for example ``3.2``; :file:`{abiflags}` will "
"be replaced by the value of :data:`sys.abiflags` or the empty string for "
"platforms which don't define ABI flags; :file:`{distname}` will be "
"replaced by the name of the module distribution being installed.  Dots "
"and capitalization are important in the paths; for example, a value that "
"uses ``python3.2`` on UNIX will typically use ``Python32`` on Windows."
msgstr ""

#: ../Doc/install/index.rst:306
msgid ""
"If you don't want to install modules to the standard location, or if you "
"don't have permission to write there, then you need to read about "
"alternate installations in section :ref:`inst-alt-install`.  If you want "
"to customize your installation directories more heavily, see section :ref"
":`inst-custom-install` on custom installations."
msgstr ""

#: ../Doc/install/index.rst:316
msgid "Alternate Installation"
msgstr ""

#: ../Doc/install/index.rst:318
msgid ""
"Often, it is necessary or desirable to install modules to a location "
"other than the standard location for third-party Python modules.  For "
"example, on a Unix system you might not have permission to write to the "
"standard third-party module directory.  Or you might wish to try out a "
"module before making it a standard part of your local Python "
"installation.  This is especially true when upgrading a distribution "
"already present: you want to make sure your existing base of scripts "
"still works with the new version before actually upgrading."
msgstr ""

#: ../Doc/install/index.rst:326
msgid ""
"The Distutils :command:`install` command is designed to make installing "
"module distributions to an alternate location simple and painless.  The "
"basic idea is that you supply a base directory for the installation, and "
"the :command:`install` command picks a set of directories (called an "
"*installation scheme*) under this base directory in which to install "
"files.  The details differ across platforms, so read whichever of the "
"following sections applies to you."
msgstr ""

#: ../Doc/install/index.rst:334
msgid ""
"Note that the various alternate installation schemes are mutually "
"exclusive: you can pass ``--user``, or ``--home``, or ``--prefix`` and "
"``--exec-prefix``, or ``--install-base`` and ``--install-platbase``, but "
"you can't mix from these groups."
msgstr ""

#: ../Doc/install/index.rst:343
msgid "Alternate installation: the user scheme"
msgstr ""

#: ../Doc/install/index.rst:345
msgid ""
"This scheme is designed to be the most convenient solution for users that"
" don't have write permission to the global site-packages directory or "
"don't want to install into it.  It is enabled with a simple option::"
msgstr ""

#: ../Doc/install/index.rst:351
msgid ""
"Files will be installed into subdirectories of :data:`site.USER_BASE` "
"(written as :file:`{userbase}` hereafter).  This scheme installs pure "
"Python modules and extension modules in the same location (also known as "
":data:`site.USER_SITE`). Here are the values for UNIX, including Mac OS "
"X:"
msgstr ""

#: ../Doc/install/index.rst:357 ../Doc/install/index.rst:368
#: ../Doc/install/index.rst:419 ../Doc/install/index.rst:468
#: ../Doc/install/index.rst:520 ../Doc/install/index.rst:545
#: ../Doc/install/index.rst:781 ../Doc/install/index.rst:793
msgid "Type of file"
msgstr ""

#: ../Doc/install/index.rst:357 ../Doc/install/index.rst:368
#: ../Doc/install/index.rst:419 ../Doc/install/index.rst:468
#: ../Doc/install/index.rst:520
msgid "Installation directory"
msgstr ""

#: ../Doc/install/index.rst:359 ../Doc/install/index.rst:370
#: ../Doc/install/index.rst:421 ../Doc/install/index.rst:522
msgid "modules"
msgstr ""

#: ../Doc/install/index.rst:359
msgid ":file:`{userbase}/lib/python{X.Y}/site-packages`"
msgstr ""

#: ../Doc/install/index.rst:360 ../Doc/install/index.rst:371
#: ../Doc/install/index.rst:422 ../Doc/install/index.rst:472
#: ../Doc/install/index.rst:523 ../Doc/install/index.rst:550
msgid "scripts"
msgstr ""

#: ../Doc/install/index.rst:360
msgid ":file:`{userbase}/bin`"
msgstr ""

#: ../Doc/install/index.rst:361 ../Doc/install/index.rst:372
#: ../Doc/install/index.rst:423 ../Doc/install/index.rst:473
#: ../Doc/install/index.rst:524 ../Doc/install/index.rst:551
msgid "data"
msgstr ""

#: ../Doc/install/index.rst:361 ../Doc/install/index.rst:372
msgid ":file:`{userbase}`"
msgstr ""

#: ../Doc/install/index.rst:362 ../Doc/install/index.rst:373
#: ../Doc/install/index.rst:424 ../Doc/install/index.rst:474
#: ../Doc/install/index.rst:525 ../Doc/install/index.rst:552
msgid "C headers"
msgstr ""

#: ../Doc/install/index.rst:362
msgid ":file:`{userbase}/include/python{X.Y}{abiflags}/{distname}`"
msgstr ""

#: ../Doc/install/index.rst:365
msgid "And here are the values used on Windows:"
msgstr ""

#: ../Doc/install/index.rst:370
msgid ":file:`{userbase}\\\\Python{XY}\\\\site-packages`"
msgstr ""

#: ../Doc/install/index.rst:371
msgid ":file:`{userbase}\\\\Python{XY}\\\\Scripts`"
msgstr ""

#: ../Doc/install/index.rst:373
msgid ":file:`{userbase}\\\\Python{XY}\\\\Include\\\\{distname}`"
msgstr ""

#: ../Doc/install/index.rst:376
msgid ""
"The advantage of using this scheme compared to the other ones described "
"below is that the user site-packages directory is under normal conditions"
" always included in :data:`sys.path` (see :mod:`site` for more "
"information), which means that there is no additional step to perform "
"after running the :file:`setup.py` script to finalize the installation."
msgstr ""

#: ../Doc/install/index.rst:382
msgid ""
"The :command:`build_ext` command also has a ``--user`` option to add "
":file:`{userbase}/include` to the compiler search path for header files "
"and :file:`{userbase}/lib` to the compiler search path for libraries as "
"well as to the runtime search path for shared C libraries (rpath)."
msgstr ""

#: ../Doc/install/index.rst:391
msgid "Alternate installation: the home scheme"
msgstr ""

#: ../Doc/install/index.rst:393
msgid ""
"The idea behind the \"home scheme\" is that you build and maintain a "
"personal stash of Python modules.  This scheme's name is derived from the"
" idea of a \"home\" directory on Unix, since it's not unusual for a Unix "
"user to make their home directory have a layout similar to :file:`/usr/` "
"or :file:`/usr/local/`. This scheme can be used by anyone, regardless of "
"the operating system they are installing for."
msgstr ""

#: ../Doc/install/index.rst:400
msgid "Installing a new module distribution is as simple as ::"
msgstr ""

#: ../Doc/install/index.rst:404
msgid ""
"where you can supply any directory you like for the :option:`!--home` "
"option.  On Unix, lazy typists can just type a tilde (``~``); the "
":command:`install` command will expand this to your home directory::"
msgstr ""

#: ../Doc/install/index.rst:410
msgid ""
"To make Python find the distributions installed with this scheme, you may"
" have to :ref:`modify Python's search path <inst-search-path>` or edit "
":mod:`sitecustomize` (see :mod:`site`) to call :func:`site.addsitedir` or"
" edit :data:`sys.path`."
msgstr ""

#: ../Doc/install/index.rst:415
msgid ""
"The :option:`!--home` option defines the installation base directory.  "
"Files are installed to the following directories under the installation "
"base as follows:"
msgstr ""

#: ../Doc/install/index.rst:421
msgid ":file:`{home}/lib/python`"
msgstr ""

#: ../Doc/install/index.rst:422
msgid ":file:`{home}/bin`"
msgstr ""

#: ../Doc/install/index.rst:423
msgid ":file:`{home}`"
msgstr ""

#: ../Doc/install/index.rst:424
msgid ":file:`{home}/include/python/{distname}`"
msgstr ""

#: ../Doc/install/index.rst:427
msgid "(Mentally replace slashes with backslashes if you're on Windows.)"
msgstr ""

#: ../Doc/install/index.rst:433
msgid "Alternate installation: Unix (the prefix scheme)"
msgstr ""

#: ../Doc/install/index.rst:435
msgid ""
"The \"prefix scheme\" is useful when you wish to use one Python "
"installation to perform the build/install (i.e., to run the setup "
"script), but install modules into the third-party module directory of a "
"different Python installation (or something that looks like a different "
"Python installation).  If this sounds a trifle unusual, it is---that's "
"why the user and home schemes come before.  However, there are at least "
"two known cases where the prefix scheme will be useful."
msgstr ""

#: ../Doc/install/index.rst:442
msgid ""
"First, consider that many Linux distributions put Python in :file:`/usr`,"
" rather than the more traditional :file:`/usr/local`.  This is entirely "
"appropriate, since in those cases Python is part of \"the system\" rather"
" than a local add-on. However, if you are installing Python modules from "
"source, you probably want them to go in "
":file:`/usr/local/lib/python2.{X}` rather than "
":file:`/usr/lib/python2.{X}`.  This can be done with ::"
msgstr ""

#: ../Doc/install/index.rst:451
msgid ""
"Another possibility is a network filesystem where the name used to write "
"to a remote directory is different from the name used to read it: for "
"example, the Python interpreter accessed as :file:`/usr/local/bin/python`"
" might search for modules in :file:`/usr/local/lib/python2.{X}`, but "
"those modules would have to be installed to, say, "
":file:`/mnt/{@server}/export/lib/python2.{X}`.  This could be done with "
"::"
msgstr ""

#: ../Doc/install/index.rst:460
msgid ""
"In either case, the :option:`!--prefix` option defines the installation "
"base, and the :option:`!--exec-prefix` option defines the platform-"
"specific installation base, which is used for platform-specific files.  "
"(Currently, this just means non-pure module distributions, but could be "
"expanded to C libraries, binary executables, etc.)  If :option:`!--exec-"
"prefix` is not supplied, it defaults to :option:`!--prefix`.  Files are "
"installed as follows:"
msgstr ""

#: ../Doc/install/index.rst:470 ../Doc/install/index.rst:547
msgid "Python modules"
msgstr ""

#: ../Doc/install/index.rst:471 ../Doc/install/index.rst:548
msgid "extension modules"
msgstr ""

#: ../Doc/install/index.rst:472
msgid ":file:`{prefix}/bin`"
msgstr ""

#: ../Doc/install/index.rst:473 ../Doc/install/index.rst:524
msgid ":file:`{prefix}`"
msgstr ""

#: ../Doc/install/index.rst:474
msgid ":file:`{prefix}/include/python{X.Y}{abiflags}/{distname}`"
msgstr ""

#: ../Doc/install/index.rst:477
msgid ""
"There is no requirement that :option:`!--prefix` or :option:`!--exec-"
"prefix` actually point to an alternate Python installation; if the "
"directories listed above do not already exist, they are created at "
"installation time."
msgstr ""

#: ../Doc/install/index.rst:481
msgid ""
"Incidentally, the real reason the prefix scheme is important is simply "
"that a standard Unix installation uses the prefix scheme, but with "
":option:`!--prefix` and :option:`!--exec-prefix` supplied by Python "
"itself as ``sys.prefix`` and ``sys.exec_prefix``.  Thus, you might think "
"you'll never use the prefix scheme, but every time you run ``python "
"setup.py install`` without any other options, you're using it."
msgstr ""

#: ../Doc/install/index.rst:488
msgid ""
"Note that installing extensions to an alternate Python installation has "
"no effect on how those extensions are built: in particular, the Python "
"header files (:file:`Python.h` and friends) installed with the Python "
"interpreter used to run the setup script will be used in compiling "
"extensions.  It is your responsibility to ensure that the interpreter "
"used to run extensions installed in this way is compatible with the "
"interpreter used to build them.  The best way to do this is to ensure "
"that the two interpreters are the same version of Python (possibly "
"different builds, or possibly copies of the same build).  (Of course, if "
"your :option:`!--prefix` and :option:`!--exec-prefix` don't even point to"
" an alternate Python installation, this is immaterial.)"
msgstr ""

#: ../Doc/install/index.rst:503
msgid "Alternate installation: Windows (the prefix scheme)"
msgstr ""

#: ../Doc/install/index.rst:505
msgid ""
"Windows has no concept of a user's home directory, and since the standard"
" Python installation under Windows is simpler than under Unix, the "
":option:`!--prefix` option has traditionally been used to install "
"additional packages in separate locations on Windows. ::"
msgstr ""

#: ../Doc/install/index.rst:512
msgid ""
"to install modules to the :file:`\\\\Temp\\\\Python` directory on the "
"current drive."
msgstr ""

#: ../Doc/install/index.rst:514
msgid ""
"The installation base is defined by the :option:`!--prefix` option; the "
":option:`!--exec-prefix` option is not supported under Windows, which "
"means that pure Python modules and extension modules are installed into "
"the same location. Files are installed as follows:"
msgstr ""

#: ../Doc/install/index.rst:523
msgid ":file:`{prefix}\\\\Scripts`"
msgstr ""

#: ../Doc/install/index.rst:525
msgid ":file:`{prefix}\\\\Include\\\\{distname}`"
msgstr ""

#: ../Doc/install/index.rst:532
msgid "Custom Installation"
msgstr ""

#: ../Doc/install/index.rst:534
msgid ""
"Sometimes, the alternate installation schemes described in section :ref"
":`inst-alt-install` just don't do what you want.  You might want to tweak"
" just one or two directories while keeping everything under the same base"
" directory, or you might want to completely redefine the installation "
"scheme.  In either case, you're creating a *custom installation scheme*."
msgstr ""

#: ../Doc/install/index.rst:540
msgid ""
"To create a custom installation scheme, you start with one of the "
"alternate schemes and override some of the installation directories used "
"for the various types of files, using these options:"
msgstr ""

#: ../Doc/install/index.rst:545
msgid "Override option"
msgstr ""

#: ../Doc/install/index.rst:547
msgid "``--install-purelib``"
msgstr ""

#: ../Doc/install/index.rst:548
msgid "``--install-platlib``"
msgstr ""

#: ../Doc/install/index.rst:549
msgid "all modules"
msgstr ""

#: ../Doc/install/index.rst:549
msgid "``--install-lib``"
msgstr ""

#: ../Doc/install/index.rst:550
msgid "``--install-scripts``"
msgstr ""

#: ../Doc/install/index.rst:551
msgid "``--install-data``"
msgstr ""

#: ../Doc/install/index.rst:552
msgid "``--install-headers``"
msgstr ""

#: ../Doc/install/index.rst:555
msgid ""
"These override options can be relative, absolute, or explicitly defined "
"in terms of one of the installation base directories. (There are two "
"installation base directories, and they are normally the same--- they "
"only differ when you use the Unix \"prefix scheme\" and supply different "
"``--prefix`` and ``--exec-prefix`` options; using ``--install-lib`` will "
"override values computed or given for ``--install-purelib`` and "
"``--install-platlib``, and is recommended for schemes that don't make a "
"difference between Python and extension modules.)"
msgstr ""

#: ../Doc/install/index.rst:564
msgid ""
"For example, say you're installing a module distribution to your home "
"directory under Unix---but you want scripts to go in :file:`~/scripts` "
"rather than :file:`~/bin`. As you might expect, you can override this "
"directory with the :option:`!--install-scripts` option; in this case, it "
"makes most sense to supply a relative path, which will be interpreted "
"relative to the installation base directory (your home directory, in this"
" case)::"
msgstr ""

#: ../Doc/install/index.rst:573
msgid ""
"Another Unix example: suppose your Python installation was built and "
"installed with a prefix of :file:`/usr/local/python`, so under a standard"
"  installation scripts will wind up in :file:`/usr/local/python/bin`.  If"
" you want them in :file:`/usr/local/bin` instead, you would supply this "
"absolute directory for the :option:`!--install-scripts` option::"
msgstr ""

#: ../Doc/install/index.rst:581
msgid ""
"(This performs an installation using the \"prefix scheme,\" where the "
"prefix is whatever your Python interpreter was installed with--- "
":file:`/usr/local/python` in this case.)"
msgstr ""

#: ../Doc/install/index.rst:585
msgid ""
"If you maintain Python on Windows, you might want third-party modules to "
"live in a subdirectory of :file:`{prefix}`, rather than right in "
":file:`{prefix}` itself.  This is almost as easy as customizing the "
"script installation directory ---you just have to remember that there are"
" two types of modules to worry about, Python and extension modules, which"
" can conveniently be both controlled by one option::"
msgstr ""

#: ../Doc/install/index.rst:594
msgid ""
"The specified installation directory is relative to :file:`{prefix}`.  Of"
" course, you also have to ensure that this directory is in Python's "
"module search path, such as by putting a :file:`.pth` file in a site "
"directory (see :mod:`site`).  See section :ref:`inst-search-path` to find"
" out how to modify Python's search path."
msgstr ""

#: ../Doc/install/index.rst:600
msgid ""
"If you want to define an entire installation scheme, you just have to "
"supply all of the installation directory options.  The recommended way to"
" do this is to supply relative paths; for example, if you want to "
"maintain all Python module-related files under :file:`python` in your "
"home directory, and you want a separate directory for each platform that "
"you use your home directory from, you might define the following "
"installation scheme::"
msgstr ""

#: ../Doc/install/index.rst:613
msgid "or, equivalently, ::"
msgstr ""

#: ../Doc/install/index.rst:621
msgid ""
"``$PLAT`` is not (necessarily) an environment variable---it will be "
"expanded by the Distutils as it parses your command line options, just as"
" it does when parsing your configuration file(s)."
msgstr ""

#: ../Doc/install/index.rst:625
msgid ""
"Obviously, specifying the entire installation scheme every time you "
"install a new module distribution would be very tedious.  Thus, you can "
"put these options into your Distutils config file (see section :ref"
":`inst-config-files`):"
msgstr ""

#: ../Doc/install/index.rst:638
msgid "or, equivalently,"
msgstr ""

#: ../Doc/install/index.rst:649
msgid ""
"Note that these two are *not* equivalent if you supply a different "
"installation base directory when you run the setup script.  For example, "
"::"
msgstr ""

#: ../Doc/install/index.rst:654
msgid ""
"would install pure modules to :file:`/tmp/python/lib` in the first case, "
"and to :file:`/tmp/lib` in the second case.  (For the second case, you "
"probably want to supply an installation base of :file:`/tmp/python`.)"
msgstr ""

#: ../Doc/install/index.rst:658
msgid ""
"You probably noticed the use of ``$HOME`` and ``$PLAT`` in the sample "
"configuration file input.  These are Distutils configuration variables, "
"which bear a strong resemblance to environment variables. In fact, you "
"can use environment variables in config files on platforms that have such"
" a notion but the Distutils additionally define a few extra variables "
"that may not be in your environment, such as ``$PLAT``.  (And of course, "
"on systems that don't have environment variables, such as Mac OS 9, the "
"configuration variables supplied by the Distutils are the only ones you "
"can use.) See section :ref:`inst-config-files` for details."
msgstr ""

#: ../Doc/install/index.rst:668
msgid ""
"When a :ref:`virtual environment <venv-def>` is activated, any options "
"that change the installation path will be ignored from all distutils "
"configuration files to prevent inadvertently installing projects outside "
"of the virtual environment."
msgstr ""

#: ../Doc/install/index.rst:682
msgid "Modifying Python's Search Path"
msgstr ""

#: ../Doc/install/index.rst:684
msgid ""
"When the Python interpreter executes an :keyword:`import` statement, it "
"searches for both Python code and extension modules along a search path."
"  A default value for the path is configured into the Python binary when "
"the interpreter is built. You can determine the path by importing the "
":mod:`sys` module and printing the value of ``sys.path``.   ::"
msgstr ""

#: ../Doc/install/index.rst:701
msgid "The null string in ``sys.path`` represents the current working directory."
msgstr ""

#: ../Doc/install/index.rst:703
msgid ""
"The expected convention for locally installed packages is to put them in "
"the :file:`{...}/site-packages/` directory, but you may want to install "
"Python modules into some arbitrary directory.  For example, your site may"
" have a convention of keeping all software related to the web server "
"under :file:`/www`. Add-on Python modules might then belong in "
":file:`/www/python`, and in order to import them, this directory must be "
"added to ``sys.path``.  There are several different ways to add the "
"directory."
msgstr ""

#: ../Doc/install/index.rst:711
msgid ""
"The most convenient way is to add a path configuration file to a "
"directory that's already on Python's path, usually to the :file"
":`.../site-packages/` directory.  Path configuration files have an "
"extension of :file:`.pth`, and each line must contain a single path that "
"will be appended to ``sys.path``.  (Because the new paths are appended to"
" ``sys.path``, modules in the added directories will not override "
"standard modules.  This means you can't use this mechanism for installing"
" fixed versions of standard modules.)"
msgstr ""

#: ../Doc/install/index.rst:719
msgid ""
"Paths can be absolute or relative, in which case they're relative to the "
"directory containing the :file:`.pth` file.  See the documentation of the"
" :mod:`site` module for more information."
msgstr ""

#: ../Doc/install/index.rst:723
msgid ""
"A slightly less convenient way is to edit the :file:`site.py` file in "
"Python's standard library, and modify ``sys.path``.  :file:`site.py` is "
"automatically imported when the Python interpreter is executed, unless "
"the :option:`-S` switch is supplied to suppress this behaviour.  So you "
"could simply edit :file:`site.py` and add two lines to it:"
msgstr ""

#: ../Doc/install/index.rst:734
msgid ""
"However, if you reinstall the same major version of Python (perhaps when "
"upgrading from 2.2 to 2.2.2, for example) :file:`site.py` will be "
"overwritten by the stock version.  You'd have to remember that it was "
"modified and save a copy before doing the installation."
msgstr ""

#: ../Doc/install/index.rst:739
msgid ""
"There are two environment variables that can modify ``sys.path``. "
":envvar:`PYTHONHOME` sets an alternate value for the prefix of the Python"
" installation.  For example, if :envvar:`PYTHONHOME` is set to "
"``/www/python``, the search path will be set to ``['', "
"'/www/python/lib/pythonX.Y/', '/www/python/lib/pythonX.Y/plat-linux2', "
"...]``."
msgstr ""

#: ../Doc/install/index.rst:745
msgid ""
"The :envvar:`PYTHONPATH` variable can be set to a list of paths that will"
" be added to the beginning of ``sys.path``.  For example, if "
":envvar:`PYTHONPATH` is set to ``/www/python:/opt/py``, the search path "
"will begin with ``['/www/python', '/opt/py']``.  (Note that directories "
"must exist in order to be added to ``sys.path``; the :mod:`site` module "
"removes paths that don't exist.)"
msgstr ""

#: ../Doc/install/index.rst:752
msgid ""
"Finally, ``sys.path`` is just a regular Python list, so any Python "
"application can modify it by adding or removing entries."
msgstr ""

#: ../Doc/install/index.rst:759
msgid "Distutils Configuration Files"
msgstr ""

#: ../Doc/install/index.rst:761
msgid ""
"As mentioned above, you can use Distutils configuration files to record "
"personal or site preferences for any Distutils options.  That is, any "
"option to any command can be stored in one of two or three (depending on "
"your platform) configuration files, which will be consulted before the "
"command-line is parsed. This means that configuration files will override"
" default values, and the command-line will in turn override configuration"
" files.  Furthermore, if multiple configuration files apply, values from "
"\"earlier\" files are overridden by \"later\" files."
msgstr ""

#: ../Doc/install/index.rst:774
msgid "Location and names of config files"
msgstr ""

#: ../Doc/install/index.rst:776
msgid ""
"The names and locations of the configuration files vary slightly across "
"platforms.  On Unix and Mac OS X, the three configuration files (in the "
"order they are processed) are:"
msgstr ""

#: ../Doc/install/index.rst:781 ../Doc/install/index.rst:793
msgid "Location and filename"
msgstr ""

#: ../Doc/install/index.rst:783 ../Doc/install/index.rst:795
msgid "system"
msgstr ""

#: ../Doc/install/index.rst:783
msgid ":file:`{prefix}/lib/python{ver}/distutils/distutils.cfg`"
msgstr ""

#: ../Doc/install/index.rst:785 ../Doc/install/index.rst:797
msgid "personal"
msgstr ""

#: ../Doc/install/index.rst:785
msgid ":file:`$HOME/.pydistutils.cfg`"
msgstr ""

#: ../Doc/install/index.rst:787 ../Doc/install/index.rst:799
msgid "local"
msgstr ""

#: ../Doc/install/index.rst:787 ../Doc/install/index.rst:799
msgid ":file:`setup.cfg`"
msgstr ""

#: ../Doc/install/index.rst:787 ../Doc/install/index.rst:799
msgid "\\(3)"
msgstr ""

#: ../Doc/install/index.rst:790
msgid "And on Windows, the configuration files are:"
msgstr ""

#: ../Doc/install/index.rst:795
msgid ":file:`{prefix}\\\\Lib\\\\distutils\\\\distutils.cfg`"
msgstr ""

#: ../Doc/install/index.rst:795
msgid "\\(4)"
msgstr ""

#: ../Doc/install/index.rst:797
msgid ":file:`%HOME%\\\\pydistutils.cfg`"
msgstr ""

#: ../Doc/install/index.rst:797
msgid "\\(5)"
msgstr ""

#: ../Doc/install/index.rst:802
msgid ""
"On all platforms, the \"personal\" file can be temporarily disabled by "
"passing the `--no-user-cfg` option."
msgstr ""

#: ../Doc/install/index.rst:808
msgid ""
"Strictly speaking, the system-wide configuration file lives in the "
"directory where the Distutils are installed; under Python 1.6 and later "
"on Unix, this is as shown. For Python 1.5.2, the Distutils will normally "
"be installed to :file:`{prefix}/lib/python1.5/site-packages/distutils`, "
"so the system configuration file should be put there under Python 1.5.2."
msgstr ""

#: ../Doc/install/index.rst:815
msgid ""
"On Unix, if the :envvar:`HOME` environment variable is not defined, the "
"user's home directory will be determined with the :func:`getpwuid` "
"function from the standard :mod:`pwd` module. This is done by the "
":func:`os.path.expanduser` function used by Distutils."
msgstr ""

#: ../Doc/install/index.rst:821
msgid "I.e., in the current directory (usually the location of the setup script)."
msgstr ""

#: ../Doc/install/index.rst:824
msgid ""
"(See also note (1).)  Under Python 1.6 and later, Python's default "
"\"installation prefix\" is :file:`C:\\\\Python`, so the system "
"configuration file is normally "
":file:`C:\\\\Python\\\\Lib\\\\distutils\\\\distutils.cfg`. Under Python "
"1.5.2, the default prefix was :file:`C:\\\\Program Files\\\\Python`, and "
"the Distutils were not part of the standard library---so the system "
"configuration file would be :file:`C:\\\\Program "
"Files\\\\Python\\\\distutils\\\\distutils.cfg` in a standard Python 1.5.2"
" installation under Windows."
msgstr ""

#: ../Doc/install/index.rst:833
msgid ""
"On Windows, if the :envvar:`HOME` environment variable is not defined, "
":envvar:`USERPROFILE` then :envvar:`HOMEDRIVE` and :envvar:`HOMEPATH` "
"will be tried. This is done by the :func:`os.path.expanduser` function "
"used by Distutils."
msgstr ""

#: ../Doc/install/index.rst:842
msgid "Syntax of config files"
msgstr ""

#: ../Doc/install/index.rst:844
msgid ""
"The Distutils configuration files all have the same syntax.  The config "
"files are grouped into sections.  There is one section for each Distutils"
" command, plus a ``global`` section for global options that affect every "
"command.  Each section consists of one option per line, specified as "
"``option=value``."
msgstr ""

#: ../Doc/install/index.rst:849
msgid ""
"For example, the following is a complete config file that just forces all"
" commands to run quietly by default:"
msgstr ""

#: ../Doc/install/index.rst:857
msgid ""
"If this is installed as the system config file, it will affect all "
"processing of any Python module distribution by any user on the current "
"system.  If it is installed as your personal config file (on systems that"
" support them), it will affect only module distributions processed by "
"you.  And if it is used as the :file:`setup.cfg` for a particular module "
"distribution, it affects only that distribution."
msgstr ""

#: ../Doc/install/index.rst:864
msgid ""
"You could override the default \"build base\" directory and make the "
":command:`build\\*` commands always forcibly rebuild all files with the "
"following:"
msgstr ""

#: ../Doc/install/index.rst:874
msgid "which corresponds to the command-line arguments ::"
msgstr ""

#: ../Doc/install/index.rst:878
msgid ""
"except that including the :command:`build` command on the command-line "
"means that command will be run.  Including a particular command in config"
" files has no such implication; it only means that if the command is run,"
" the options in the config file will apply.  (Or if other commands that "
"derive values from it are run, they will use the values in the config "
"file.)"
msgstr ""

#: ../Doc/install/index.rst:884
msgid ""
"You can find out the complete list of options for any command using the "
":option:`!--help` option, e.g.::"
msgstr ""

#: ../Doc/install/index.rst:889
msgid ""
"and you can find out the complete list of global options by using "
":option:`!--help` without a command::"
msgstr ""

#: ../Doc/install/index.rst:894
msgid ""
"See also the \"Reference\" section of the \"Distributing Python Modules\""
" manual."
msgstr ""

#: ../Doc/install/index.rst:900
msgid "Building Extensions: Tips and Tricks"
msgstr ""

#: ../Doc/install/index.rst:902
msgid ""
"Whenever possible, the Distutils try to use the configuration information"
" made available by the Python interpreter used to run the "
":file:`setup.py` script. For example, the same compiler and linker flags "
"used to compile Python will also be used for compiling extensions.  "
"Usually this will work well, but in complicated situations this might be "
"inappropriate.  This section discusses how to override the usual "
"Distutils behaviour."
msgstr ""

#: ../Doc/install/index.rst:913
msgid "Tweaking compiler/linker flags"
msgstr ""

#: ../Doc/install/index.rst:915
msgid ""
"Compiling a Python extension written in C or C++ will sometimes require "
"specifying custom flags for the compiler and linker in order to use a "
"particular library or produce a special kind of object code. This is "
"especially true if the extension hasn't been tested on your platform, or "
"if you're trying to cross-compile Python."
msgstr ""

#: ../Doc/install/index.rst:921
msgid ""
"In the most general case, the extension author might have foreseen that "
"compiling the extensions would be complicated, and provided a "
":file:`Setup` file for you to edit.  This will likely only be done if the"
" module distribution contains many separate extension modules, or if they"
" often require elaborate sets of compiler flags in order to work."
msgstr ""

#: ../Doc/install/index.rst:927
msgid ""
"A :file:`Setup` file, if present, is parsed in order to get a list of "
"extensions to build.  Each line in a :file:`Setup` describes a single "
"module.  Lines have the following structure::"
msgstr ""

#: ../Doc/install/index.rst:934
msgid "Let's examine each of the fields in turn."
msgstr ""

#: ../Doc/install/index.rst:936
msgid ""
"*module* is the name of the extension module to be built, and should be a"
" valid Python identifier.  You can't just change this in order to rename "
"a module (edits to the source code would also be needed), so this should "
"be left alone."
msgstr ""

#: ../Doc/install/index.rst:940
msgid ""
"*sourcefile* is anything that's likely to be a source code file, at least"
" judging by the filename.  Filenames ending in :file:`.c` are assumed to "
"be written in C, filenames ending in :file:`.C`, :file:`.cc`, and "
":file:`.c++` are assumed to be C++, and filenames ending in :file:`.m` or"
" :file:`.mm` are assumed to be in Objective C."
msgstr ""

#: ../Doc/install/index.rst:946
msgid ""
"*cpparg* is an argument for the C preprocessor,  and is anything starting"
" with :option:`!-I`, :option:`!-D`, :option:`!-U` or :option:`!-C`."
msgstr ""

#: ../Doc/install/index.rst:949
msgid ""
"*library* is anything ending in :file:`.a` or beginning with "
":option:`!-l` or :option:`!-L`."
msgstr ""

#: ../Doc/install/index.rst:952
msgid ""
"If a particular platform requires a special library on your platform, you"
" can add it by editing the :file:`Setup` file and running ``python "
"setup.py build``. For example, if the module defined by the line ::"
msgstr ""

#: ../Doc/install/index.rst:958
msgid ""
"must be linked with the math library :file:`libm.a` on your platform, "
"simply add :option:`!-lm` to the line::"
msgstr ""

#: ../Doc/install/index.rst:963
msgid ""
"Arbitrary switches intended for the compiler or the linker can be "
"supplied with the :option:`!-Xcompiler` *arg* and :option:`!-Xlinker` "
"*arg* options::"
msgstr ""

#: ../Doc/install/index.rst:968
msgid ""
"The next option after :option:`!-Xcompiler` and :option:`!-Xlinker` will "
"be appended to the proper command line, so in the above example the "
"compiler will be passed the :option:`!-o32` option, and the linker will "
"be passed :option:`!-shared`.  If a compiler option requires an argument,"
" you'll have to supply multiple :option:`!-Xcompiler` options; for "
"example, to pass ``-x c++`` the :file:`Setup` file would have to contain "
"``-Xcompiler -x -Xcompiler c++``."
msgstr ""

#: ../Doc/install/index.rst:975
msgid ""
"Compiler flags can also be supplied through setting the :envvar:`CFLAGS` "
"environment variable.  If set, the contents of :envvar:`CFLAGS` will be "
"added to the compiler flags specified in the  :file:`Setup` file."
msgstr ""

#: ../Doc/install/index.rst:983
msgid "Using non-Microsoft compilers on Windows"
msgstr ""

#: ../Doc/install/index.rst:990
msgid "Borland/CodeGear C++"
msgstr ""

#: ../Doc/install/index.rst:992
msgid ""
"This subsection describes the necessary steps to use Distutils with the "
"Borland C++ compiler version 5.5.  First you have to know that Borland's "
"object file format (OMF) is different from the format used by the Python "
"version you can download from the Python or ActiveState Web site.  "
"(Python is built with Microsoft Visual C++, which uses COFF as the object"
" file format.) For this reason you have to convert Python's library "
":file:`python25.lib` into the Borland format.  You can do this as "
"follows:"
msgstr ""

#: ../Doc/install/index.rst:1007
msgid ""
"The :file:`coff2omf` program comes with the Borland compiler.  The file "
":file:`python25.lib` is in the :file:`Libs` directory of your Python "
"installation.  If your extension uses other libraries (zlib, ...) you "
"have to convert them too."
msgstr ""

#: ../Doc/install/index.rst:1012
msgid ""
"The converted files have to reside in the same directories as the normal "
"libraries."
msgstr ""

#: ../Doc/install/index.rst:1015
msgid ""
"How does Distutils manage to use these libraries with their changed "
"names?  If the extension needs a library (eg. :file:`foo`) Distutils "
"checks first if it finds a library with suffix :file:`_bcpp` (eg. "
":file:`foo_bcpp.lib`) and then uses this library.  In the case it doesn't"
" find such a special library it uses the default name (:file:`foo.lib`.) "
"[#]_"
msgstr ""

#: ../Doc/install/index.rst:1021
msgid ""
"To let Distutils compile your extension with Borland C++ you now have to "
"type::"
msgstr ""

#: ../Doc/install/index.rst:1025
msgid ""
"If you want to use the Borland C++ compiler as the default, you could "
"specify this in your personal or system-wide configuration file for "
"Distutils (see section :ref:`inst-config-files`.)"
msgstr ""

#: ../Doc/install/index.rst:1034
msgid "`C++Builder Compiler <https://www.embarcadero.com/products>`_"
msgstr ""

#: ../Doc/install/index.rst:1033
msgid ""
"Information about the free C++ compiler from Borland, including links to "
"the download pages."
msgstr ""

#: ../Doc/install/index.rst:1037
msgid ""
"`Creating Python Extensions Using Borland's Free Compiler "
"<http://www.cyberus.ca/~g_will/pyExtenDL.shtml>`_"
msgstr ""

#: ../Doc/install/index.rst:1037
msgid ""
"Document describing how to use Borland's free command-line C++ compiler "
"to build Python."
msgstr ""

#: ../Doc/install/index.rst:1042
msgid "GNU C / Cygwin / MinGW"
msgstr ""

#: ../Doc/install/index.rst:1044
msgid ""
"This section describes the necessary steps to use Distutils with the GNU "
"C/C++ compilers in their Cygwin and MinGW distributions. [#]_ For a "
"Python interpreter that was built with Cygwin, everything should work "
"without any of these following steps."
msgstr ""

#: ../Doc/install/index.rst:1049
msgid ""
"Not all extensions can be built with MinGW or Cygwin, but many can.  "
"Extensions most likely to not work are those that use C++ or depend on "
"Microsoft Visual C extensions."
msgstr ""

#: ../Doc/install/index.rst:1053
msgid "To let Distutils compile your extension with Cygwin you have to type::"
msgstr ""

#: ../Doc/install/index.rst:1057
msgid "and for Cygwin in no-cygwin mode [#]_ or for MinGW type::"
msgstr ""

#: ../Doc/install/index.rst:1061
msgid ""
"If you want to use any of these options/compilers as default, you should "
"consider writing it in your personal or system-wide configuration file "
"for Distutils (see section :ref:`inst-config-files`.)"
msgstr ""

#: ../Doc/install/index.rst:1066
msgid "Older Versions of Python and MinGW"
msgstr ""

#: ../Doc/install/index.rst:1067
msgid ""
"The following instructions only apply if you're using a version of Python"
" inferior to 2.4.1 with a MinGW inferior to 3.0.0 (with "
"binutils-2.13.90-20030111-1)."
msgstr ""

#: ../Doc/install/index.rst:1071
msgid ""
"These compilers require some special libraries.  This task is more "
"complex than for Borland's C++, because there is no program to convert "
"the library.  First you have to create a list of symbols which the Python"
" DLL exports. (You can find a good program for this task at "
"https://sourceforge.net/projects/mingw/files/MinGW/Extension/pexports/)."
msgstr ""

#: ../Doc/install/index.rst:1084
msgid ""
"The location of an installed :file:`python25.dll` will depend on the "
"installation options and the version and language of Windows.  In a "
"\"just for me\" installation, it will appear in the root of the "
"installation directory.  In a shared installation, it will be located in "
"the system directory."
msgstr ""

#: ../Doc/install/index.rst:1089
msgid "Then you can create from these information an import library for gcc. ::"
msgstr ""

#: ../Doc/install/index.rst:1093
msgid ""
"The resulting library has to be placed in the same directory as "
":file:`python25.lib`. (Should be the :file:`libs` directory under your "
"Python installation directory.)"
msgstr ""

#: ../Doc/install/index.rst:1097
msgid ""
"If your extension uses other libraries (zlib,...) you might  have to "
"convert them too. The converted files have to reside in the same "
"directories as the normal libraries do."
msgstr ""

#: ../Doc/install/index.rst:1104
msgid ""
"`Building Python modules on MS Windows platform with MinGW "
"<http://old.zope.org/Members/als/tips/win32_mingw_modules>`_"
msgstr ""

#: ../Doc/install/index.rst:1105
msgid ""
"Information about building the required libraries for the MinGW "
"environment."
msgstr ""

#: ../Doc/install/index.rst:1109
msgid "Footnotes"
msgstr ""

#: ../Doc/install/index.rst:1110
msgid ""
"This also means you could replace all existing COFF-libraries with OMF-"
"libraries of the same name."
msgstr ""

#: ../Doc/install/index.rst:1113
msgid ""
"Check https://www.sourceware.org/cygwin/ and http://www.mingw.org/ for "
"more information"
msgstr ""

#: ../Doc/install/index.rst:1116
msgid ""
"Then you have no POSIX emulation available, but you also don't need "
":file:`cygwin1.dll`."
msgstr ""

#~ msgid ""
#~ ":file:`{prefix}` and :file:`{exec-prefix}` "
#~ "stand for the directories that Python"
#~ " is installed to, and where it "
#~ "finds its libraries at run-time.  "
#~ "They are always the same under "
#~ "Windows, and very often the same "
#~ "under Unix and Mac OS X.  You "
#~ "can find out what your Python "
#~ "installation uses for :file:`{prefix}` and "
#~ ":file:`{exec-prefix}` by running Python "
#~ "in interactive mode and typing a "
#~ "few simple commands. Under Unix, just"
#~ " type ``python`` at the shell prompt."
#~ "  Under Windows, choose :menuselection:`Start "
#~ "--> Programs --> Python X.Y --> "
#~ "Python (command line)`.   Once the "
#~ "interpreter is started, you type Python"
#~ " code at the prompt.  For example,"
#~ " on my Linux system, I type the"
#~ " three Python statements shown below, "
#~ "and get the output as shown, to"
#~ " find out my :file:`{prefix}` and "
#~ ":file:`{exec-prefix}`::"
#~ msgstr ""

#~ msgid ""
#~ "Obviously, specifying the entire installation"
#~ " scheme every time you install a "
#~ "new module distribution would be very"
#~ " tedious.  Thus, you can put these"
#~ " options into your Distutils config "
#~ "file (see section :ref:`inst-config-"
#~ "files`)::"
#~ msgstr ""

#~ msgid ""
#~ "A slightly less convenient way is "
#~ "to edit the :file:`site.py` file in "
#~ "Python's standard library, and modify "
#~ "``sys.path``.  :file:`site.py` is automatically "
#~ "imported when the Python interpreter is"
#~ " executed, unless the :option:`-S` switch"
#~ " is supplied to suppress this "
#~ "behaviour.  So you could simply edit "
#~ ":file:`site.py` and add two lines to "
#~ "it::"
#~ msgstr ""

#~ msgid ""
#~ "For example, the following is a "
#~ "complete config file that just forces"
#~ " all commands to run quietly by "
#~ "default::"
#~ msgstr ""

#~ msgid ""
#~ "You could override the default \"build"
#~ " base\" directory and make the "
#~ ":command:`build\\*` commands always forcibly "
#~ "rebuild all files with the following::"
#~ msgstr ""

#~ msgid ""
#~ "This guide only covers the basic "
#~ "tools for building and distributing "
#~ "extensions that are provided as part "
#~ "of this version of Python. Third "
#~ "party tools offer easier to use "
#~ "and more secure alternatives. Refer to"
#~ " the `quick recommendations section "
#~ "<https://packaging.python.org/en/latest/current/>`__ in "
#~ "the Python Packaging User Guide for "
#~ "more information."
#~ msgstr ""

