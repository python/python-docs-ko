# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-26 11:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/tutorial/venv.rst:6
msgid "Virtual Environments and Packages"
msgstr "가상 환경 및 패키지"

#: ../Doc/tutorial/venv.rst:9
msgid "Introduction"
msgstr "소개"

#: ../Doc/tutorial/venv.rst:11
msgid ""
"Python applications will often use packages and modules that don't come "
"as part of the standard library.  Applications will sometimes need a "
"specific version of a library, because the application may require that a"
" particular bug has been fixed or the application may be written using an"
" obsolete version of the library's interface."
msgstr ""
"파이썬 응용 프로그램은 종종 표준 라이브러리의 일부로 제공되지 않는 패키지와 모듈을 사용합니다. 응용 프로그램에 특정 버전의 "
"라이브러리가 필요할 수 있는데, 응용 프로그램에 특정 버그가 수정된 버전이 필요하거나, 라이브러리 인터페이스의 구식 버전을 사용하여"
" 응용 프로그램을 작성할 수도 있기 때문입니다."

#: ../Doc/tutorial/venv.rst:17
msgid ""
"This means it may not be possible for one Python installation to meet the"
" requirements of every application.  If application A needs version 1.0 "
"of a particular module but application B needs version 2.0, then the "
"requirements are in conflict and installing either version 1.0 or 2.0 "
"will leave one application unable to run."
msgstr ""
"즉, 하나의 파이썬 설치가 모든 응용 프로그램의 요구 사항을 충족시키는 것이 불가능할 수도 있습니다. 응용 프로그램 A에 특정 "
"모듈의 버전 1.0이 필요하지만, 응용 프로그램 B에 버전 2.0이 필요한 경우, 요구 사항이 충돌하고, 버전 1.0 또는 2.0을"
" 설치하면 어느 한 응용 프로그램은 실행할 수 없게 됩니다."

#: ../Doc/tutorial/venv.rst:23
msgid ""
"The solution for this problem is to create a :term:`virtual environment`,"
" a self-contained directory tree that contains a Python installation for "
"a particular version of Python, plus a number of additional packages."
msgstr ""
"이 문제에 대한 해결책은 :term:`가상 환경 <virtual environment>` 을 만드는 것입니다. 이 가상 환경은 특정"
" 버전 파이썬 설치와 여러 추가 패키지를 포함하는 완비된 디렉터리 트리입니다."

#: ../Doc/tutorial/venv.rst:27
msgid ""
"Different applications can then use different virtual environments. To "
"resolve the earlier example of conflicting requirements, application A "
"can have its own virtual environment with version 1.0 installed while "
"application B has another virtual environment with version 2.0. If "
"application B requires a library be upgraded to version 3.0, this will "
"not affect application A's environment."
msgstr ""
"서로 다른 응용 프로그램은 서로 다른 가상 환경을 사용할 수 있습니다. 앞서 본 상충하는 요구 사항의 예를 해결하기 위해, 응용 "
"프로그램 A에는 버전 1.0이 설치된 자체 가상 환경이 있고, 응용 프로그램 B에는 버전 2.0이 있는 다른 가상 환경이 있을 수 "
"있습니다. 응용 프로그램 B에서 라이브러리를 버전 3.0으로 업그레이드해야 하는 경우, 응용 프로그램 A의 환경에 영향을 미치지 "
"않습니다."

#: ../Doc/tutorial/venv.rst:36
msgid "Creating Virtual Environments"
msgstr "가상 환경 만들기"

#: ../Doc/tutorial/venv.rst:38
msgid ""
"The module used to create and manage virtual environments is called "
":mod:`venv`.  :mod:`venv` will usually install the most recent version of"
" Python that you have available. If you have multiple versions of Python "
"on your system, you can select a specific Python version by running "
"``python3`` or whichever version you want."
msgstr ""
"가상 환경을 만들고 관리하는 데 사용되는 모듈은 :mod:`venv` 라고 합니다. :mod:`venv` 는 보통 여러분이 사용할 "
"수 있는 최신 버전의 파이썬을 설치합니다. 시스템에 여러 버전의 파이썬이 있는 경우, ``python3`` 또는 원하는 버전을 "
"실행하여 특정 파이썬 버전을 선택할 수 있습니다."

#: ../Doc/tutorial/venv.rst:44
msgid ""
"To create a virtual environment, decide upon a directory where you want "
"to place it, and run the :mod:`venv` module as a script with the "
"directory path::"
msgstr ""
"가상 환경을 만들려면, 원하는 디렉터리를 결정하고, :mod:`venv` 모듈을 스크립트로 실행하는데 디렉터리 경로를 명령행 인자로"
" 전달합니다::"

#: ../Doc/tutorial/venv.rst:49
msgid ""
"This will create the ``tutorial-env`` directory if it doesn't exist, and "
"also create directories inside it containing a copy of the Python "
"interpreter, the standard library, and various supporting files."
msgstr ""
"존재하지 않는다면 ``tutorial-env`` 디렉터리를 만들고, 그 안에 파이썬 인터프리터의 사본, 표준 라이브러리 및 다양한 "
"지원 파일이 들어있는 디렉터리들을 만듭니다."

#: ../Doc/tutorial/venv.rst:53
msgid "Once you've created a virtual environment, you may activate it."
msgstr "가상 환경을 만들었으면, 가상 환경을 활성화할 수 있습니다."

#: ../Doc/tutorial/venv.rst:55
msgid "On Windows, run::"
msgstr "윈도우에서 이렇게 실행합니다::"

#: ../Doc/tutorial/venv.rst:59
msgid "On Unix or MacOS, run::"
msgstr "Unix 또는 MacOS에서 이렇게 실행합니다::"

#: ../Doc/tutorial/venv.rst:63
msgid ""
"(This script is written for the bash shell.  If you use the "
":program:`csh` or :program:`fish` shells, there are alternate "
"``activate.csh`` and ``activate.fish`` scripts you should use instead.)"
msgstr ""
"(이 스크립트는 bash 셸을 위해 작성된 것으로, :program:`csh` 또는 :program:`fish` 셸을 사용하는 "
"경우에는, 대신 ``activate.csh`` 와 ``activate.fish`` 스크립트를 사용해야 합니다.)"

#: ../Doc/tutorial/venv.rst:68
msgid ""
"Activating the virtual environment will change your shell's prompt to "
"show what virtual environment you're using, and modify the environment so"
" that running ``python`` will get you that particular version and "
"installation of Python. For example:"
msgstr ""
"가상 환경을 활성화하면, 셸의 프롬프트가 변경되어 사용 중인 가상 환경을 보여주고, 환경을 수정하여 ``python`` 을 실행하면"
" 특정 버전의 파이썬이 실행되도록 합니다. 예를 들어:"

#: ../Doc/tutorial/venv.rst:87
msgid "Managing Packages with pip"
msgstr "pip로 패키지 관리하기"

#: ../Doc/tutorial/venv.rst:89
msgid ""
"You can install, upgrade, and remove packages using a program called "
":program:`pip`.  By default ``pip`` will install packages from the Python"
" Package Index, <https://pypi.org>.  You can browse the Python Package "
"Index by going to it in your web browser, or you can use ``pip``'s "
"limited search feature:"
msgstr ""
":program:`pip` 라는 프로그램을 사용하여 패키지를 설치, 업그레이드 및 제거할 수 있습니다. 기본적으로 ``pip`` 는"
" 파이썬 패키지 색인(Python Package Index), <https://pypi.org>, 에서 "
"패키지를 설치합니다. 웹 브라우저에서 파이썬 패키지 색인을 살펴보거나, ``pip`` 의 제한된 검색 기능을 사용할 수 있습니다:"

#: ../Doc/tutorial/venv.rst:105
msgid ""
"``pip`` has a number of subcommands: \"search\", \"install\", "
"\"uninstall\", \"freeze\", etc.  (Consult the :ref:`installing-index` "
"guide for complete documentation for ``pip``.)"
msgstr ""
"``pip`` 는 \"search\", \"install\", \"uninstall\", \"freeze\" 등 많은 부속 명령을 "
"갖고 있습니다. (``pip`` 에 대한 완전한 문서는 :ref:`installing-index` 지침을 보면 됩니다.)"

#: ../Doc/tutorial/venv.rst:109
msgid ""
"You can install the latest version of a package by specifying a package's"
" name:"
msgstr "패키지 이름을 지정하여 최신 버전의 패키지를 설치할 수 있습니다:"

#: ../Doc/tutorial/venv.rst:120
msgid ""
"You can also install a specific version of a package by giving the "
"package name  followed by ``==`` and the version number:"
msgstr "패키지 이름 뒤에 ``==`` 과 버전 번호를 붙여 특정 버전의 패키지를 설치할 수도 있습니다:"

#: ../Doc/tutorial/venv.rst:131
msgid ""
"If you re-run this command, ``pip`` will notice that the requested "
"version is already installed and do nothing.  You can supply a different "
"version number to get that version, or you can run ``pip install "
"--upgrade`` to upgrade the package to the latest version:"
msgstr ""
"이 명령을 다시 실행하면, ``pip`` 는 요청한 버전이 이미 설치되어 있음을 알리고, 아무것도 하지 않습니다. 다른 버전 번호를"
" 지정해서 그 버전을 얻거나 ``pip install --upgrade`` 를 실행하여 패키지를 최신 버전으로 업그레이드할 수 "
"있습니다:"

#: ../Doc/tutorial/venv.rst:146
msgid ""
"``pip uninstall`` followed by one or more package names will remove the "
"packages from the virtual environment."
msgstr "``pip uninstall`` 다음에 하나 이상의 패키지 이름이 오면 가상 환경에서 패키지가 제거됩니다."

#: ../Doc/tutorial/venv.rst:149
msgid "``pip show`` will display information about a particular package:"
msgstr "``pip show`` 는 특정 패키지에 대한 정보를 표시합니다:"

#: ../Doc/tutorial/venv.rst:166
msgid ""
"``pip list`` will display all of the packages installed in the virtual "
"environment:"
msgstr "``pip list`` 는 가상 환경에 설치된 모든 패키지를 표시합니다:"

#: ../Doc/tutorial/venv.rst:178
msgid ""
"``pip freeze`` will produce a similar list of the installed packages, but"
" the output uses the format that ``pip install`` expects. A common "
"convention is to put this list in a ``requirements.txt`` file:"
msgstr ""
"``pip freeze`` 는 설치된 패키지의 비슷한 목록을 만들지만, ``pip install`` 이 기대하는 형식을 사용합니다."
" 일반적인 규칙은 이 목록을 ``requirements.txt`` 파일에 넣는 것입니다:"

#: ../Doc/tutorial/venv.rst:190
msgid ""
"The ``requirements.txt`` can then be committed to version control and "
"shipped as part of an application.  Users can then install all the "
"necessary packages with ``install -r``:"
msgstr ""
"``requirements.txt`` 는 버전 제어에 커밋되어 응용 프로그램 일부로 제공될 수 있습니다. 사용자는 ``install"
" -r`` 로 모든 필요한 패키지를 설치할 수 있습니다:"

#: ../Doc/tutorial/venv.rst:207
msgid ""
"``pip`` has many more options.  Consult the :ref:`installing-index` guide"
" for complete documentation for ``pip``.  When you've written a package "
"and want to make it available on the Python Package Index, consult the "
":ref:`distributing-index` guide."
msgstr ""
"``pip`` 에는 더 많은 옵션이 있습니다. ``pip`` 에 대한 완전한 문서는 :ref:`installing-index` "
"지침을 참고하세요. 패키지를 작성했을 때 파이썬 패키지 색인에서 사용할 수 있게 하려면, :ref:`distributing-"
"index` 지침을 참고하세요."

