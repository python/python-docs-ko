# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-30 09:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/tutorial/interpreter.rst:5
msgid "Using the Python Interpreter"
msgstr "파이썬 인터프리터 사용하기"

#: ../Doc/tutorial/interpreter.rst:11
msgid "Invoking the Interpreter"
msgstr "인터프리터 실행하기"

#: ../Doc/tutorial/interpreter.rst:13
msgid ""
"The Python interpreter is usually installed as "
":file:`/usr/local/bin/python3.7` on those machines where it is available;"
" putting :file:`/usr/local/bin` in your Unix shell's search path makes it"
" possible to start it by typing the command:"
msgstr ""
"파이썬 인터프리터는 보통 :file:`/usr/local/bin/python3.7` 에 설치됩니다; 유닉스 셸의 검색 경로에 "
":file:`/usr/local/bin` 를 넣으면 명령:"

#: ../Doc/tutorial/interpreter.rst:21
msgid ""
"to the shell. [#]_ Since the choice of the directory where the "
"interpreter lives is an installation option, other places are possible; "
"check with your local Python guru or system administrator.  (E.g., "
":file:`/usr/local/python` is a popular alternative location.)"
msgstr ""
"을 셸에 입력해서 실행할 수 있습니다. [#]_  인터프리터가 위치하는 디렉터리의 선택은 설치 옵션이기 때문에, 다른 장소도 "
"가능합니다; 주변의 파이썬 전문가나 시스템 관리자에게 확인할 필요가 있습니다. (예를 들어, "
":file:`/usr/local/python` 도 널리 사용되는 위치입니다.)"

#: ../Doc/tutorial/interpreter.rst:26
msgid ""
"On Windows machines, the Python installation is usually placed in "
":file:`C:\\\\Python36`, though you can change this when you're running "
"the installer.  To add this directory to your path,  you can type the "
"following command into the command prompt in a DOS box::"
msgstr ""
"윈도우에서, 파이썬 설치는 보통 :file:`C:\\\\Python36` 에 이루어지지만, 설치기를 실행할 때 변경할 수 있습니다."
" 이 디렉터리를 경로에 넣으려면 다음과 같은 명령을 DOS 상자의 명령 프롬프트에 입력하면 됩니다::"

#: ../Doc/tutorial/interpreter.rst:33
msgid ""
"Typing an end-of-file character (:kbd:`Control-D` on Unix, "
":kbd:`Control-Z` on Windows) at the primary prompt causes the interpreter"
" to exit with a zero exit status.  If that doesn't work, you can exit the"
" interpreter by typing the following command: ``quit()``."
msgstr ""
"기본 프롬프트에서 EOF(end-of-file) 문자(유닉스에서는 :kbd:`Control-D`, 윈도우에서는 "
":kbd:`Control-Z`)를 입력하면 인터프리터가 종료하고, 종료 상태 코드는 0 이 됩니다. 이 방법이 통하지 않는다면 "
"``quit()`` 명령을 입력해서 인터프리터를 종료시킬 수 있습니다."

#: ../Doc/tutorial/interpreter.rst:38
msgid ""
"The interpreter's line-editing features include interactive editing, "
"history substitution and code completion on systems that support "
"readline.  Perhaps the quickest check to see whether command line editing"
" is supported is typing :kbd:`Control-P` to the first Python prompt you "
"get.  If it beeps, you have command line editing; see Appendix :ref:`tut-"
"interacting` for an introduction to the keys.  If nothing appears to "
"happen, or if ``^P`` is echoed, command line editing isn't available; "
"you'll only be able to use backspace to remove characters from the "
"current line."
msgstr ""
"인터프리터는 readline 을 지원하는 시스템에서 줄 편집 기능으로 대화형 편집, 히스토리 치환, 코드 완성 등을 제공합니다. "
"아마도 명령행 편집이 제공되는지 확인하는 가장 빠른 방법은 첫 프롬프트에서 :kbd:`Control-P` 를 입력하는 것입니다. 삑"
" 하는 소리가 난다면 명령행 편집이 지원되고 있습니다; 입력 키에 대한 소개는 부록 :ref:`tut-interacting` 을 "
"보세요. 아무런 반응도 없거나 ``^P`` 가 출력된다면 명령행 편집이 제공되지 않는 것입니다; 현재 줄에서 문자를 지우기 위해 "
"백스페이스를 사용할 수 있는 것이 전부입니다."

#: ../Doc/tutorial/interpreter.rst:47
msgid ""
"The interpreter operates somewhat like the Unix shell: when called with "
"standard input connected to a tty device, it reads and executes commands "
"interactively; when called with a file name argument or with a file as "
"standard input, it reads and executes a *script* from that file."
msgstr ""
"인터프리터는 어느 정도 유닉스 셸처럼 동작합니다: tty 장치에 표준 입력이 연결된 상태로 실행되면, 대화형으로 명령을 읽고 "
"실행합니다; 파일명을 인자로 주거나 파일을 표준입력으로 연결한 상태로 실행되면 스크립트를 읽고 실행합니다."

#: ../Doc/tutorial/interpreter.rst:52
msgid ""
"A second way of starting the interpreter is ``python -c command [arg] "
"...``, which executes the statement(s) in *command*, analogous to the "
"shell's :option:`-c` option.  Since Python statements often contain "
"spaces or other characters that are special to the shell, it is usually "
"advised to quote *command* in its entirety with single quotes."
msgstr ""
"인터프리터를 실행하는 두 번째 방법은 ``python -c command [arg] ...`` 인데, *command* 에 있는 "
"문장들을 실행합니다. 셸의 :option:`-c` 옵션에 해당합니다. 파이썬 문장은 종종 셸에서 특별한 의미가 있는 공백이나 다른 "
"문자들을 포함하기 때문에, *command* 전체를 작은따옴표로 감싸주는 것이 좋습니다."

#: ../Doc/tutorial/interpreter.rst:58
msgid ""
"Some Python modules are also useful as scripts.  These can be invoked "
"using ``python -m module [arg] ...``, which executes the source file for "
"*module* as if you had spelled out its full name on the command line."
msgstr ""
"몇몇 파이썬 모듈들은 스크립트로도 쓸모가 있습니다. ``python -m module [arg] ...`` 로 실행할 수 있는데, "
"마치 *module* 모듈 소스 파일의 경로명을 명령행에 입력한 것처럼 실행되게 됩니다."

#: ../Doc/tutorial/interpreter.rst:62
msgid ""
"When a script file is used, it is sometimes useful to be able to run the "
"script and enter interactive mode afterwards.  This can be done by "
"passing :option:`-i` before the script."
msgstr ""
"스크립트 파일이 사용될 때, 때로 스크립트를 실행한 후에 대화형 모드로 들어가는 것이 편리할 때가 있습니다. 스크립트 앞에 "
":option:`-i` 를 전달하면 됩니다."

#: ../Doc/tutorial/interpreter.rst:66
msgid "All command line options are described in :ref:`using-on-general`."
msgstr "모든 명령행 옵션은 :ref:`using-on-general` 에서 찾을 수 있습니다."

#: ../Doc/tutorial/interpreter.rst:72
msgid "Argument Passing"
msgstr "인자 전달"

#: ../Doc/tutorial/interpreter.rst:74
msgid ""
"When known to the interpreter, the script name and additional arguments "
"thereafter are turned into a list of strings and assigned to the ``argv``"
" variable in the ``sys`` module.  You can access this list by executing "
"``import sys``.  The length of the list is at least one; when no script "
"and no arguments are given, ``sys.argv[0]`` is an empty string.  When the"
" script name is given as ``'-'`` (meaning  standard input), "
"``sys.argv[0]`` is set to ``'-'``.  When :option:`-c` *command* is used, "
"``sys.argv[0]`` is set to ``'-c'``.  When :option:`-m` *module* is used, "
"``sys.argv[0]``  is set to the full name of the located module.  Options "
"found after  :option:`-c` *command* or :option:`-m` *module* are not "
"consumed  by the Python interpreter's option processing but left in "
"``sys.argv`` for  the command or module to handle."
msgstr ""
"스크립트 이름과 추가의 인자들이 인터프리터로 전달될 때, 문자열의 목록으로 변환된 후 ``sys`` 모듈의 ``argv`` 변수에 "
"저장됩니다. ``import sys`` 를 사용해서 이 목록에 접근할 수 있습니다. 목록의 길이는 최소한 1이고, 스크립트도 추가의"
" 인자도 없는 경우로, ``sys.argv[0]`` 은 빈 문자열입니다. 스크립트 이름을 ``'-'`` (표준 입력을 뜻한다) 로 "
"주면 ``sys.argv[0]`` 는 ``'-'`` 가 됩니다. :option:`-c` *command* 가 사용되면 "
"``sys.argv[0]`` 는 ``'-c'`` 로 설정됩니다. :option:`-m` *module* 이 사용되면 "
"``sys.argv[0]`` 는 모듈의 절대 경로명이 됩니다. :option:`-c` *command* 나 :option:`-m` "
"*module* 뒤에 오는 옵션들은 파이썬 인터프리터가 소모하지 않고 명령이나 모듈이 처리하도록 ``sys.argv`` 로 "
"전달됩니다."

#: ../Doc/tutorial/interpreter.rst:90
msgid "Interactive Mode"
msgstr "대화형 모드"

#: ../Doc/tutorial/interpreter.rst:92
msgid ""
"When commands are read from a tty, the interpreter is said to be in "
"*interactive mode*.  In this mode it prompts for the next command with "
"the *primary prompt*, usually three greater-than signs (``>>>``); for "
"continuation lines it prompts with the *secondary prompt*, by default "
"three dots (``...``). The interpreter prints a welcome message stating "
"its version number and a copyright notice before printing the first "
"prompt:"
msgstr ""
"명령을 tty 에서 읽을 때, 인터프리터가 *대화형 모드* 로 동작한다고 말합니다. 이 모드에서는 *기본 프롬프트* 를 표시해서 "
"다음 명령을 요청하는데, 보통 세 개의 ...보다 크다 기호입니다 (``>>>``); 한 줄로 끝나지 않고 이어지는 줄의 입력을 "
"요청할 때는 보조 프롬프트가 사용되는데, 기본적으로 세 개의 점입니다 (``...``). 인터프리터는 첫 번째 프롬프트를 인쇄하기 "
"전에 버전 번호와 저작권 공지를 포함하는 환영 메시지를 출력합니다."

#: ../Doc/tutorial/interpreter.rst:109
msgid ""
"Continuation lines are needed when entering a multi-line construct. As an"
" example, take a look at this :keyword:`if` statement::"
msgstr "이어지는 줄은 여러 줄로 구성된 구조물을 입력할 때 필요합니다. 예를 들자면, 이런 식의 :keyword:`if` 문이 가능합니다::"

#: ../Doc/tutorial/interpreter.rst:119
msgid "For more on interactive mode, see :ref:`tut-interac`."
msgstr "대화형 모드에 대해 더 알고 싶다면, :ref:`tut-interac` 를 보세요."

#: ../Doc/tutorial/interpreter.rst:125
msgid "The Interpreter and Its Environment"
msgstr "인터프리터와 환경"

#: ../Doc/tutorial/interpreter.rst:131
msgid "Source Code Encoding"
msgstr "소스 코드 인코딩"

#: ../Doc/tutorial/interpreter.rst:133
msgid ""
"By default, Python source files are treated as encoded in UTF-8.  In that"
" encoding, characters of most languages in the world can be used "
"simultaneously in string literals, identifiers and comments --- although "
"the standard library only uses ASCII characters for identifiers, a "
"convention that any portable code should follow.  To display all these "
"characters properly, your editor must recognize that the file is UTF-8, "
"and it must use a font that supports all the characters in the file."
msgstr ""
"기본적으로, 파이썬 소스 파일들은 UTF-8으로 인코드 된 것으로 취급됩니다. 이 인코딩에서는 대부분 언어에서 사용되는 문자들을 "
"문자열 상수, 식별자, 주석 등에서 함께 사용할 수 있습니다. (하지만 표준 라이브러리는 오직 ASCII 문자만 식별자로 사용하고 "
"있는데, 범용 코드에서는 이 관례를 따르는 것이 좋습니다.) 이 문자들을 모두 올바로 표시하기 위해서는 편집기가 파일이 "
"UTF-8임을 인식해야 하고, 이 파일에 포함된 모든 문자를 지원할 수 있는 폰트를 사용해야 합니다."

#: ../Doc/tutorial/interpreter.rst:141
msgid ""
"To declare an encoding other than the default one, a special comment line"
" should be added as the *first* line of the file.  The syntax is as "
"follows::"
msgstr "인코딩을 기본값 외의 것으로 선언하려면, 파일의 첫 줄에 특별한 형태의 주석 문을 추가해야 합니다. 문법은 이렇습니다::"

#: ../Doc/tutorial/interpreter.rst:146
msgid "where *encoding* is one of the valid :mod:`codecs` supported by Python."
msgstr "*encoding* 은 파이썬이 지원하는 코덱 (:mod:`codecs`) 중 하나여야 합니다."

#: ../Doc/tutorial/interpreter.rst:148
msgid ""
"For example, to declare that Windows-1252 encoding is to be used, the "
"first line of your source code file should be::"
msgstr "예를 들어, Windows-1252 인코딩을 사용하도록 선언하려면, 소스 코드 파일의 첫 줄은 이렇게 되어야 합니다::"

#: ../Doc/tutorial/interpreter.rst:153
msgid ""
"One exception to the *first line* rule is when the source code starts "
"with a :ref:`UNIX \"shebang\" line <tut-scripts>`.  In this case, the "
"encoding declaration should be added as the second line of the file.  For"
" example::"
msgstr ""
"첫 줄 규칙의 한가지 예외는 소스 코드가 :ref:`유닉스 \"셔뱅 (shebang)\" 줄 <tut-scripts>` 로 시작하는"
" 경우입니다. 이 경우에, 인코딩 선언은 두 번째 줄에 들어갑니다. 예를 들어::"

#: ../Doc/tutorial/interpreter.rst:161
msgid "Footnotes"
msgstr "각주"

#: ../Doc/tutorial/interpreter.rst:162
msgid ""
"On Unix, the Python 3.x interpreter is by default not installed with the "
"executable named ``python``, so that it does not conflict with a "
"simultaneously installed Python 2.x executable."
msgstr ""
"유닉스에서, 파이썬 3.x 인터프리터는 보통 ``python`` 이라는 이름의 실행 파일로 설치되지 않는데, 동시에 설치되는 파이썬"
" 2.x 실행 파일과 충돌하지 않도록 하기 위해섭니다."

