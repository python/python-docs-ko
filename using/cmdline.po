# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-08 11:36+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/using/cmdline.rst:9
msgid "Command line and environment"
msgstr ""

#: ../Doc/using/cmdline.rst:11
msgid ""
"The CPython interpreter scans the command line and the environment for "
"various settings."
msgstr ""

#: ../Doc/using/cmdline.rst:16
msgid ""
"Other implementations' command line schemes may differ.  See "
":ref:`implementations` for further resources."
msgstr ""

#: ../Doc/using/cmdline.rst:23
msgid "Command line"
msgstr ""

#: ../Doc/using/cmdline.rst:25
msgid "When invoking Python, you may specify any of these options::"
msgstr ""

#: ../Doc/using/cmdline.rst:29
msgid "The most common use case is, of course, a simple invocation of a script::"
msgstr ""

#: ../Doc/using/cmdline.rst:37
msgid "Interface options"
msgstr ""

#: ../Doc/using/cmdline.rst:39
msgid ""
"The interpreter interface resembles that of the UNIX shell, but provides "
"some additional methods of invocation:"
msgstr ""

#: ../Doc/using/cmdline.rst:42
msgid ""
"When called with standard input connected to a tty device, it prompts for"
" commands and executes them until an EOF (an end-of-file character, you "
"can produce that with :kbd:`Ctrl-D` on UNIX or :kbd:`Ctrl-Z, Enter` on "
"Windows) is read."
msgstr ""

#: ../Doc/using/cmdline.rst:45
msgid ""
"When called with a file name argument or with a file as standard input, "
"it reads and executes a script from that file."
msgstr ""

#: ../Doc/using/cmdline.rst:47
msgid ""
"When called with a directory name argument, it reads and executes an "
"appropriately named script from that directory."
msgstr ""

#: ../Doc/using/cmdline.rst:49
msgid ""
"When called with ``-c command``, it executes the Python statement(s) "
"given as *command*.  Here *command* may contain multiple statements "
"separated by newlines. Leading whitespace is significant in Python "
"statements!"
msgstr ""

#: ../Doc/using/cmdline.rst:52
msgid ""
"When called with ``-m module-name``, the given module is located on the "
"Python module path and executed as a script."
msgstr ""

#: ../Doc/using/cmdline.rst:55
msgid "In non-interactive mode, the entire input is parsed before it is executed."
msgstr ""

#: ../Doc/using/cmdline.rst:57
msgid ""
"An interface option terminates the list of options consumed by the "
"interpreter, all consecutive arguments will end up in :data:`sys.argv` --"
" note that the first element, subscript zero (``sys.argv[0]``), is a "
"string reflecting the program's source."
msgstr ""

#: ../Doc/using/cmdline.rst:64
msgid ""
"Execute the Python code in *command*.  *command* can be one or more "
"statements separated by newlines, with significant leading whitespace as "
"in normal module code."
msgstr ""

#: ../Doc/using/cmdline.rst:68
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be "
"``\"-c\"`` and the current directory will be added to the start of "
":data:`sys.path` (allowing modules in that directory to be imported as "
"top level modules)."
msgstr ""

#: ../Doc/using/cmdline.rst:76
msgid ""
"Search :data:`sys.path` for the named module and execute its contents as "
"the :mod:`__main__` module."
msgstr ""

#: ../Doc/using/cmdline.rst:79
msgid ""
"Since the argument is a *module* name, you must not give a file extension"
" (``.py``).  The module name should be a valid absolute Python module "
"name, but the implementation may not always enforce this (e.g. it may "
"allow you to use a name that includes a hyphen)."
msgstr ""

#: ../Doc/using/cmdline.rst:84
msgid ""
"Package names (including namespace packages) are also permitted. When a "
"package name is supplied instead of a normal module, the interpreter will"
" execute ``<pkg>.__main__`` as the main module. This behaviour is "
"deliberately similar to the handling of directories and zipfiles that are"
" passed to the interpreter as the script argument."
msgstr ""

#: ../Doc/using/cmdline.rst:93
msgid ""
"This option cannot be used with built-in modules and extension modules "
"written in C, since they do not have Python module files. However, it can"
" still be used for precompiled modules, even if the original source file "
"is not available."
msgstr ""

#: ../Doc/using/cmdline.rst:98
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be "
"the full path to the module file (while the module file is being located,"
" the first element will be set to ``\"-m\"``). As with the :option:`-c` "
"option, the current directory will be added to the start of "
":data:`sys.path`."
msgstr ""

#: ../Doc/using/cmdline.rst:103
msgid ""
"Many standard library modules contain code that is invoked on their "
"execution as a script.  An example is the :mod:`timeit` module::"
msgstr ""

#: ../Doc/using/cmdline.rst:111
msgid ":func:`runpy.run_module`"
msgstr ""

#: ../Doc/using/cmdline.rst:111 ../Doc/using/cmdline.rst:153
msgid "Equivalent functionality directly available to Python code"
msgstr ""

#: ../Doc/using/cmdline.rst:113
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ""

#: ../Doc/using/cmdline.rst:116
msgid "Supply the package name to run a ``__main__`` submodule."
msgstr ""

#: ../Doc/using/cmdline.rst:119
msgid "namespace packages are also supported"
msgstr ""

#: ../Doc/using/cmdline.rst:125
msgid ""
"Read commands from standard input (:data:`sys.stdin`).  If standard input"
" is a terminal, :option:`-i` is implied."
msgstr ""

#: ../Doc/using/cmdline.rst:128
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be "
"``\"-\"`` and the current directory will be added to the start of "
":data:`sys.path`."
msgstr ""

#: ../Doc/using/cmdline.rst:135
msgid ""
"Execute the Python code contained in *script*, which must be a filesystem"
" path (absolute or relative) referring to either a Python file, a "
"directory containing a ``__main__.py`` file, or a zipfile containing a "
"``__main__.py`` file."
msgstr ""

#: ../Doc/using/cmdline.rst:140
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be "
"the script name as given on the command line."
msgstr ""

#: ../Doc/using/cmdline.rst:143
msgid ""
"If the script name refers directly to a Python file, the directory "
"containing that file is added to the start of :data:`sys.path`, and the "
"file is executed as the :mod:`__main__` module."
msgstr ""

#: ../Doc/using/cmdline.rst:147
msgid ""
"If the script name refers to a directory or zipfile, the script name is "
"added to the start of :data:`sys.path` and the ``__main__.py`` file in "
"that location is executed as the :mod:`__main__` module."
msgstr ""

#: ../Doc/using/cmdline.rst:152
msgid ":func:`runpy.run_path`"
msgstr ""

#: ../Doc/using/cmdline.rst:156
msgid ""
"If no interface option is given, :option:`-i` is implied, ``sys.argv[0]``"
" is an empty string (``\"\"``) and the current directory will be added to"
" the start of :data:`sys.path`.  Also, tab-completion and history editing"
" is automatically enabled, if available on your platform (see :ref"
":`rlcompleter-config`)."
msgstr ""

#: ../Doc/using/cmdline.rst:162
msgid ":ref:`tut-invoking`"
msgstr ""

#: ../Doc/using/cmdline.rst:164
msgid "Automatic enabling of tab-completion and history editing."
msgstr ""

#: ../Doc/using/cmdline.rst:169
msgid "Generic options"
msgstr ""

#: ../Doc/using/cmdline.rst:175
msgid "Print a short description of all command line options."
msgstr ""

#: ../Doc/using/cmdline.rst:181
msgid "Print the Python version number and exit.  Example output could be:"
msgstr ""

#: ../Doc/using/cmdline.rst:187
msgid "When given twice, print more information about the build, like:"
msgstr ""

#: ../Doc/using/cmdline.rst:194
msgid "The ``-VV`` option."
msgstr ""

#: ../Doc/using/cmdline.rst:200
msgid "Miscellaneous options"
msgstr ""

#: ../Doc/using/cmdline.rst:204
msgid ""
"Issue a warning when comparing :class:`bytes` or :class:`bytearray` with "
":class:`str` or :class:`bytes` with :class:`int`.  Issue an error when "
"the option is given twice (:option:`!-bb`)."
msgstr ""

#: ../Doc/using/cmdline.rst:208
msgid "Affects comparisons of :class:`bytes` with :class:`int`."
msgstr ""

#: ../Doc/using/cmdline.rst:213
msgid ""
"If given, Python won't try to write ``.pyc`` files on the import of "
"source modules.  See also :envvar:`PYTHONDONTWRITEBYTECODE`."
msgstr ""

#: ../Doc/using/cmdline.rst:219
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files. See :ref"
":`pyc-invalidation`. When set to ``default``, checked and unchecked hash-"
"based bytecode cache files are validated according to their default "
"semantics. When set to ``always``, all hash-based ``.pyc`` files, whether"
" checked or unchecked, are validated against their corresponding source "
"file. When set to ``never``, hash-based ``.pyc`` files are not validated "
"against their corresponding source files."
msgstr ""

#: ../Doc/using/cmdline.rst:227
msgid ""
"The semantics of timestamp-based ``.pyc`` files are unaffected by this "
"option."
msgstr ""

#: ../Doc/using/cmdline.rst:233
msgid ""
"Turn on parser debugging output (for expert only, depending on "
"compilation options).  See also :envvar:`PYTHONDEBUG`."
msgstr ""

#: ../Doc/using/cmdline.rst:239
msgid ""
"Ignore all :envvar:`PYTHON*` environment variables, e.g. "
":envvar:`PYTHONPATH` and :envvar:`PYTHONHOME`, that might be set."
msgstr ""

#: ../Doc/using/cmdline.rst:245
msgid ""
"When a script is passed as first argument or the :option:`-c` option is "
"used, enter interactive mode after executing the script or the command, "
"even when :data:`sys.stdin` does not appear to be a terminal.  The "
":envvar:`PYTHONSTARTUP` file is not read."
msgstr ""

#: ../Doc/using/cmdline.rst:250
msgid ""
"This can be useful to inspect global variables or a stack trace when a "
"script raises an exception.  See also :envvar:`PYTHONINSPECT`."
msgstr ""

#: ../Doc/using/cmdline.rst:256
msgid ""
"Run Python in isolated mode. This also implies -E and -s. In isolated "
"mode :data:`sys.path` contains neither the script's directory nor the "
"user's site-packages directory. All :envvar:`PYTHON*` environment "
"variables are ignored, too. Further restrictions may be imposed to "
"prevent the user from injecting malicious code."
msgstr ""

#: ../Doc/using/cmdline.rst:267
msgid ""
"Remove assert statements and any code conditional on the value of "
":const:`__debug__`.  Augment the filename for compiled (:term:`bytecode`)"
" files by adding ``.opt-1`` before the ``.pyc`` extension (see "
":pep:`488`).  See also :envvar:`PYTHONOPTIMIZE`."
msgstr ""

#: ../Doc/using/cmdline.rst:272 ../Doc/using/cmdline.rst:282
msgid "Modify ``.pyc`` filenames according to :pep:`488`."
msgstr ""

#: ../Doc/using/cmdline.rst:278
msgid ""
"Do :option:`-O` and also discard docstrings.  Augment the filename for "
"compiled (:term:`bytecode`) files by adding ``.opt-2`` before the "
"``.pyc`` extension (see :pep:`488`)."
msgstr ""

#: ../Doc/using/cmdline.rst:288
msgid "Don't display the copyright and version messages even in interactive mode."
msgstr ""

#: ../Doc/using/cmdline.rst:295
msgid ""
"Turn on hash randomization. This option only has an effect if the "
":envvar:`PYTHONHASHSEED` environment variable is set to ``0``, since hash"
" randomization is enabled by default."
msgstr ""

#: ../Doc/using/cmdline.rst:299
msgid ""
"On previous versions of Python, this option turns on hash randomization, "
"so that the :meth:`__hash__` values of str, bytes and datetime are "
"\"salted\" with an unpredictable random value.  Although they remain "
"constant within an individual Python process, they are not predictable "
"between repeated invocations of Python."
msgstr ""

#: ../Doc/using/cmdline.rst:305
msgid ""
"Hash randomization is intended to provide protection against a denial-of-"
"service caused by carefully-chosen inputs that exploit the worst case "
"performance of a dict construction, O(n^2) complexity.  See "
"http://www.ocert.org/advisories/ocert-2011-003.html for details."
msgstr ""

#: ../Doc/using/cmdline.rst:310
msgid ""
":envvar:`PYTHONHASHSEED` allows you to set a fixed value for the hash "
"seed secret."
msgstr ""

#: ../Doc/using/cmdline.rst:313
msgid "The option is no longer ignored."
msgstr ""

#: ../Doc/using/cmdline.rst:321
msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to "
":data:`sys.path`."
msgstr ""

#: ../Doc/using/cmdline.rst:326 ../Doc/using/cmdline.rst:634
#: ../Doc/using/cmdline.rst:646
msgid ":pep:`370` -- Per user site-packages directory"
msgstr ""

#: ../Doc/using/cmdline.rst:331
msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails.  Also disable these "
"manipulations if :mod:`site` is explicitly imported later (call "
":func:`site.main` if you want them to be triggered)."
msgstr ""

#: ../Doc/using/cmdline.rst:339
msgid ""
"Force the stdout and stderr streams to be unbuffered.  This option has no"
" effect on the stdin stream."
msgstr ""

#: ../Doc/using/cmdline.rst:342
msgid "See also :envvar:`PYTHONUNBUFFERED`."
msgstr ""

#: ../Doc/using/cmdline.rst:344
msgid "The text layer of the stdout and stderr streams now is unbuffered."
msgstr ""

#: ../Doc/using/cmdline.rst:350
msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  When given twice "
"(:option:`!-vv`), print a message for each file that is checked for when "
"searching for a module.  Also provides information on module cleanup at "
"exit. See also :envvar:`PYTHONVERBOSE`."
msgstr ""

#: ../Doc/using/cmdline.rst:360
msgid ""
"Warning control.  Python's warning machinery by default prints warning "
"messages to :data:`sys.stderr`.  A typical warning message has the "
"following form:"
msgstr ""

#: ../Doc/using/cmdline.rst:368
msgid ""
"By default, each warning is printed once for each source line where it "
"occurs.  This option controls how often warnings are printed."
msgstr ""

#: ../Doc/using/cmdline.rst:371
msgid ""
"Multiple :option:`-W` options may be given; when a warning matches more "
"than one option, the action for the last matching option is performed.  "
"Invalid :option:`-W` options are ignored (though, a warning message is "
"printed about invalid options when the first warning is issued)."
msgstr ""

#: ../Doc/using/cmdline.rst:376
msgid ""
"Warnings can also be controlled using the :envvar:`PYTHONWARNINGS` "
"environment variable and from within a Python program using the "
":mod:`warnings` module."
msgstr ""

#: ../Doc/using/cmdline.rst:380 ../Doc/using/cmdline.rst:662
msgid ""
"The simplest settings apply a particular action unconditionally to all "
"warnings emitted by a process (even those that are otherwise ignored by "
"default)::"
msgstr ""

#: ../Doc/using/cmdline.rst:391
msgid ""
"The action names can be abbreviated as desired (e.g. ``-Wi``, ``-Wd``, "
"``-Wa``, ``-We``) and the interpreter will resolve them to the "
"appropriate action name."
msgstr ""

#: ../Doc/using/cmdline.rst:395 ../Doc/using/cmdline.rst:673
msgid ""
"See :ref:`warning-filter` and :ref:`describing-warning-filters` for more "
"details."
msgstr ""

#: ../Doc/using/cmdline.rst:401
msgid ""
"Skip the first line of the source, allowing use of non-Unix forms of "
"``#!cmd``.  This is intended for a DOS specific hack only."
msgstr ""

#: ../Doc/using/cmdline.rst:407
msgid ""
"Reserved for various implementation-specific options.  CPython currently "
"defines the following possible values:"
msgstr ""

#: ../Doc/using/cmdline.rst:410
msgid "``-X faulthandler`` to enable :mod:`faulthandler`;"
msgstr ""

#: ../Doc/using/cmdline.rst:411
msgid ""
"``-X showrefcount`` to output the total reference count and number of "
"used memory blocks when the program finishes or after each statement in "
"the interactive interpreter. This only works on debug builds."
msgstr ""

#: ../Doc/using/cmdline.rst:414
msgid ""
"``-X tracemalloc`` to start tracing Python memory allocations using the "
":mod:`tracemalloc` module. By default, only the most recent frame is "
"stored in a traceback of a trace. Use ``-X tracemalloc=NFRAME`` to start "
"tracing with a traceback limit of *NFRAME* frames. See the "
":func:`tracemalloc.start` for more information."
msgstr ""

#: ../Doc/using/cmdline.rst:419
msgid ""
"``-X showalloccount`` to output the total count of allocated objects for "
"each type when the program finishes. This only works when Python was "
"built with ``COUNT_ALLOCS`` defined."
msgstr ""

#: ../Doc/using/cmdline.rst:422
msgid ""
"``-X importtime`` to show how long each import takes. It shows module "
"name, cumulative time (including nested imports) and self time (excluding"
" nested imports).  Note that its output may be broken in multi-threaded "
"application.  Typical usage is ``python3 -X importtime -c 'import "
"asyncio'``.  See also :envvar:`PYTHONPROFILEIMPORTTIME`."
msgstr ""

#: ../Doc/using/cmdline.rst:427
msgid ""
"``-X dev``: enable CPython's \"development mode\", introducing additional"
" runtime checks which are too expensive to be enabled by default. It "
"should not be more verbose than the default if the code is correct: new "
"warnings are only emitted when an issue is detected. Effect of the "
"developer mode:"
msgstr ""

#: ../Doc/using/cmdline.rst:432
msgid "Add ``default`` warning filter, as :option:`-W` ``default``."
msgstr ""

#: ../Doc/using/cmdline.rst:433
msgid ""
"Install debug hooks on memory allocators: see the "
":c:func:`PyMem_SetupDebugHooks` C function."
msgstr ""

#: ../Doc/using/cmdline.rst:435
msgid ""
"Enable the :mod:`faulthandler` module to dump the Python traceback on a "
"crash."
msgstr ""

#: ../Doc/using/cmdline.rst:437
msgid "Enable :ref:`asyncio debug mode <asyncio-debug-mode>`."
msgstr ""

#: ../Doc/using/cmdline.rst:438
msgid ""
"Set the :attr:`~sys.flags.dev_mode` attribute of :attr:`sys.flags` to "
"``True``"
msgstr ""

#: ../Doc/using/cmdline.rst:441
msgid ""
"``-X utf8`` enables UTF-8 mode for operating system interfaces, "
"overriding the default locale-aware mode. ``-X utf8=0`` explicitly "
"disables UTF-8 mode (even when it would otherwise activate "
"automatically). See :envvar:`PYTHONUTF8` for more details."
msgstr ""

#: ../Doc/using/cmdline.rst:446
msgid ""
"It also allows passing arbitrary values and retrieving them through the "
":data:`sys._xoptions` dictionary."
msgstr ""

#: ../Doc/using/cmdline.rst:449
msgid "The :option:`-X` option was added."
msgstr ""

#: ../Doc/using/cmdline.rst:452
msgid "The ``-X faulthandler`` option."
msgstr ""

#: ../Doc/using/cmdline.rst:455
msgid "The ``-X showrefcount`` and ``-X tracemalloc`` options."
msgstr ""

#: ../Doc/using/cmdline.rst:458
msgid "The ``-X showalloccount`` option."
msgstr ""

#: ../Doc/using/cmdline.rst:461
msgid "The ``-X importtime``, ``-X dev`` and ``-X utf8`` options."
msgstr ""

#: ../Doc/using/cmdline.rst:466
msgid "Options you shouldn't use"
msgstr ""

#: ../Doc/using/cmdline.rst:470
msgid "Reserved for use by Jython_."
msgstr ""

#: ../Doc/using/cmdline.rst:478
msgid "Environment variables"
msgstr ""

#: ../Doc/using/cmdline.rst:480
msgid ""
"These environment variables influence Python's behavior, they are "
"processed before the command-line switches other than -E or -I.  It is "
"customary that command-line switches override environmental variables "
"where there is a conflict."
msgstr ""

#: ../Doc/using/cmdline.rst:487
msgid ""
"Change the location of the standard Python libraries.  By default, the "
"libraries are searched in :file:`{prefix}/lib/python{version}` and "
":file:`{exec_prefix}/lib/python{version}`, where :file:`{prefix}` and "
":file:`{exec_prefix}` are installation-dependent directories, both "
"defaulting to :file:`/usr/local`."
msgstr ""

#: ../Doc/using/cmdline.rst:493
msgid ""
"When :envvar:`PYTHONHOME` is set to a single directory, its value "
"replaces both :file:`{prefix}` and :file:`{exec_prefix}`.  To specify "
"different values for these, set :envvar:`PYTHONHOME` to "
":file:`{prefix}:{exec_prefix}`."
msgstr ""

#: ../Doc/using/cmdline.rst:500
msgid ""
"Augment the default search path for module files.  The format is the same"
" as the shell's :envvar:`PATH`: one or more directory pathnames separated"
" by :data:`os.pathsep` (e.g. colons on Unix or semicolons on Windows). "
"Non-existent directories are silently ignored."
msgstr ""

#: ../Doc/using/cmdline.rst:505
msgid ""
"In addition to normal directories, individual :envvar:`PYTHONPATH` "
"entries may refer to zipfiles containing pure Python modules (in either "
"source or compiled form). Extension modules cannot be imported from "
"zipfiles."
msgstr ""

#: ../Doc/using/cmdline.rst:509
msgid ""
"The default search path is installation dependent, but generally begins "
"with :file:`{prefix}/lib/python{version}` (see :envvar:`PYTHONHOME` "
"above).  It is *always* appended to :envvar:`PYTHONPATH`."
msgstr ""

#: ../Doc/using/cmdline.rst:513
msgid ""
"An additional directory will be inserted in the search path in front of "
":envvar:`PYTHONPATH` as described above under :ref:`using-on-interface-"
"options`. The search path can be manipulated from within a Python program"
" as the variable :data:`sys.path`."
msgstr ""

#: ../Doc/using/cmdline.rst:521
msgid ""
"If this is the name of a readable file, the Python commands in that file "
"are executed before the first prompt is displayed in interactive mode.  "
"The file is executed in the same namespace where interactive commands are"
" executed so that objects defined or imported in it can be used without "
"qualification in the interactive session.  You can also change the "
"prompts :data:`sys.ps1` and :data:`sys.ps2` and the hook "
":data:`sys.__interactivehook__` in this file."
msgstr ""

#: ../Doc/using/cmdline.rst:531
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-O` option.  If set to an integer, it is equivalent to "
"specifying :option:`-O` multiple times."
msgstr ""

#: ../Doc/using/cmdline.rst:538
msgid ""
"If this is set, it names a callable using dotted-path notation.  The "
"module containing the callable will be imported and then the callable "
"will be run by the default implementation of :func:`sys.breakpointhook` "
"which itself is called by built-in :func:`breakpoint`.  If not set, or "
"set to the empty string, it is equivalent to the value \"pdb.set_trace\"."
"  Setting this to the string \"0\" causes the default implementation of "
":func:`sys.breakpointhook` to do nothing but return immediately."
msgstr ""

#: ../Doc/using/cmdline.rst:550
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-d` option.  If set to an integer, it is equivalent to "
"specifying :option:`-d` multiple times."
msgstr ""

#: ../Doc/using/cmdline.rst:557
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-i` option."
msgstr ""

#: ../Doc/using/cmdline.rst:560
msgid ""
"This variable can also be modified by Python code using "
":data:`os.environ` to force inspect mode on program termination."
msgstr ""

#: ../Doc/using/cmdline.rst:566
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-u` option."
msgstr ""

#: ../Doc/using/cmdline.rst:572
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the "
":option:`-v` option.  If set to an integer, it is equivalent to "
"specifying :option:`-v` multiple times."
msgstr ""

#: ../Doc/using/cmdline.rst:579
msgid ""
"If this is set, Python ignores case in :keyword:`import` statements.  "
"This only works on Windows and OS X."
msgstr ""

#: ../Doc/using/cmdline.rst:585
msgid ""
"If this is set to a non-empty string, Python won't try to write ``.pyc`` "
"files on the import of source modules.  This is equivalent to specifying "
"the :option:`-B` option."
msgstr ""

#: ../Doc/using/cmdline.rst:592
msgid ""
"If this variable is not set or set to ``random``, a random value is used "
"to seed the hashes of str, bytes and datetime objects."
msgstr ""

#: ../Doc/using/cmdline.rst:595
msgid ""
"If :envvar:`PYTHONHASHSEED` is set to an integer value, it is used as a "
"fixed seed for generating the hash() of the types covered by the hash "
"randomization."
msgstr ""

#: ../Doc/using/cmdline.rst:599
msgid ""
"Its purpose is to allow repeatable hashing, such as for selftests for the"
" interpreter itself, or to allow a cluster of python processes to share "
"hash values."
msgstr ""

#: ../Doc/using/cmdline.rst:603
msgid ""
"The integer must be a decimal number in the range [0,4294967295].  "
"Specifying the value 0 will disable hash randomization."
msgstr ""

#: ../Doc/using/cmdline.rst:611
msgid ""
"If this is set before running the interpreter, it overrides the encoding "
"used for stdin/stdout/stderr, in the syntax "
"``encodingname:errorhandler``.  Both the ``encodingname`` and the "
"``:errorhandler`` parts are optional and have the same meaning as in "
":func:`str.encode`."
msgstr ""

#: ../Doc/using/cmdline.rst:616
msgid ""
"For stderr, the ``:errorhandler`` part is ignored; the handler will "
"always be ``'backslashreplace'``."
msgstr ""

#: ../Doc/using/cmdline.rst:619
msgid "The ``encodingname`` part is now optional."
msgstr ""

#: ../Doc/using/cmdline.rst:622
msgid ""
"On Windows, the encoding specified by this variable is ignored for "
"interactive console buffers unless :envvar:`PYTHONLEGACYWINDOWSSTDIO` is "
"also specified. Files and pipes redirected through the standard streams "
"are not affected."
msgstr ""

#: ../Doc/using/cmdline.rst:629
msgid ""
"If this is set, Python won't add the :data:`user site-packages directory "
"<site.USER_SITE>` to :data:`sys.path`."
msgstr ""

#: ../Doc/using/cmdline.rst:639
msgid ""
"Defines the :data:`user base directory <site.USER_BASE>`, which is used "
"to compute the path of the :data:`user site-packages directory "
"<site.USER_SITE>` and :ref:`Distutils installation paths <inst-alt-"
"install-user>` for ``python setup.py install --user``."
msgstr ""

#: ../Doc/using/cmdline.rst:651
msgid ""
"If this environment variable is set, ``sys.argv[0]`` will be set to its "
"value instead of the value got through the C runtime.  Only works on Mac "
"OS X."
msgstr ""

#: ../Doc/using/cmdline.rst:657
msgid ""
"This is equivalent to the :option:`-W` option. If set to a comma "
"separated string, it is equivalent to specifying :option:`-W` multiple "
"times, with filters later in the list taking precedence over those "
"earlier in the list."
msgstr ""

#: ../Doc/using/cmdline.rst:679
msgid ""
"If this environment variable is set to a non-empty string, "
":func:`faulthandler.enable` is called at startup: install a handler for "
":const:`SIGSEGV`, :const:`SIGFPE`, :const:`SIGABRT`, :const:`SIGBUS` and "
":const:`SIGILL` signals to dump the Python traceback.  This is equivalent"
" to :option:`-X` ``faulthandler`` option."
msgstr ""

#: ../Doc/using/cmdline.rst:690
msgid ""
"If this environment variable is set to a non-empty string, start tracing "
"Python memory allocations using the :mod:`tracemalloc` module. The value "
"of the variable is the maximum number of frames stored in a traceback of "
"a trace. For example, ``PYTHONTRACEMALLOC=1`` stores only the most recent"
" frame. See the :func:`tracemalloc.start` for more information."
msgstr ""

#: ../Doc/using/cmdline.rst:701
msgid ""
"If this environment variable is set to a non-empty string, Python will "
"show how long each import takes.  This is exactly equivalent to setting "
"``-X importtime`` on the command line."
msgstr ""

#: ../Doc/using/cmdline.rst:710
msgid ""
"If this environment variable is set to a non-empty string, enable the "
":ref:`debug mode <asyncio-debug-mode>` of the :mod:`asyncio` module."
msgstr ""

#: ../Doc/using/cmdline.rst:718
msgid "Set the Python memory allocators and/or install debug hooks."
msgstr ""

#: ../Doc/using/cmdline.rst:720
msgid "Set the family of memory allocators used by Python:"
msgstr ""

#: ../Doc/using/cmdline.rst:722
msgid ""
"``default``: use the :ref:`default memory allocators <default-memory-"
"allocators>`."
msgstr ""

#: ../Doc/using/cmdline.rst:724
msgid ""
"``malloc``: use the :c:func:`malloc` function of the C library for all "
"domains (:c:data:`PYMEM_DOMAIN_RAW`, :c:data:`PYMEM_DOMAIN_MEM`, "
":c:data:`PYMEM_DOMAIN_OBJ`)."
msgstr ""

#: ../Doc/using/cmdline.rst:727
msgid ""
"``pymalloc``: use the :ref:`pymalloc allocator <pymalloc>` for "
":c:data:`PYMEM_DOMAIN_MEM` and :c:data:`PYMEM_DOMAIN_OBJ` domains and use"
" the :c:func:`malloc` function for the :c:data:`PYMEM_DOMAIN_RAW` domain."
msgstr ""

#: ../Doc/using/cmdline.rst:731
msgid "Install debug hooks:"
msgstr ""

#: ../Doc/using/cmdline.rst:733
msgid ""
"``debug``: install debug hooks on top of the :ref:`default memory "
"allocators <default-memory-allocators>`."
msgstr ""

#: ../Doc/using/cmdline.rst:735
msgid "``malloc_debug``: same as ``malloc`` but also install debug hooks"
msgstr ""

#: ../Doc/using/cmdline.rst:736
msgid "``pymalloc_debug``: same as ``pymalloc`` but also install debug hooks"
msgstr ""

#: ../Doc/using/cmdline.rst:738
msgid ""
"See the :ref:`default memory allocators <default-memory-allocators>` and "
"the :c:func:`PyMem_SetupDebugHooks` function (install debug hooks on "
"Python memory allocators)."
msgstr ""

#: ../Doc/using/cmdline.rst:742
msgid "Added the ``\"default\"`` allocator."
msgstr ""

#: ../Doc/using/cmdline.rst:750
msgid ""
"If set to a non-empty string, Python will print statistics of the "
":ref:`pymalloc memory allocator <pymalloc>` every time a new pymalloc "
"object arena is created, and on shutdown."
msgstr ""

#: ../Doc/using/cmdline.rst:754
msgid ""
"This variable is ignored if the :envvar:`PYTHONMALLOC` environment "
"variable is used to force the :c:func:`malloc` allocator of the C "
"library, or if Python is configured without ``pymalloc`` support."
msgstr ""

#: ../Doc/using/cmdline.rst:758
msgid ""
"This variable can now also be used on Python compiled in release mode. It"
" now has no effect if set to an empty string."
msgstr ""

#: ../Doc/using/cmdline.rst:765
msgid ""
"If set to a non-empty string, the default filesystem encoding and errors "
"mode will revert to their pre-3.6 values of 'mbcs' and 'replace', "
"respectively. Otherwise, the new defaults 'utf-8' and 'surrogatepass' are"
" used."
msgstr ""

#: ../Doc/using/cmdline.rst:769
msgid ""
"This may also be enabled at runtime with "
":func:`sys._enablelegacywindowsfsencoding()`."
msgstr ""

#: ../Doc/using/cmdline.rst:772 ../Doc/using/cmdline.rst:786
msgid "Availability: Windows"
msgstr ""

#: ../Doc/using/cmdline.rst:774
msgid "See :pep:`529` for more details."
msgstr ""

#: ../Doc/using/cmdline.rst:779
msgid ""
"If set to a non-empty string, does not use the new console reader and "
"writer. This means that Unicode characters will be encoded according to "
"the active console code page, rather than using utf-8."
msgstr ""

#: ../Doc/using/cmdline.rst:783
msgid ""
"This variable is ignored if the standard streams are redirected (to files"
" or pipes) rather than referring to console buffers."
msgstr ""

#: ../Doc/using/cmdline.rst:793
msgid ""
"If set to the value ``0``, causes the main Python command line "
"application to skip coercing the legacy ASCII-based C and POSIX locales "
"to a more capable UTF-8 based alternative."
msgstr ""

#: ../Doc/using/cmdline.rst:797
msgid ""
"If this variable is *not* set (or is set to a value other than ``0``), "
"the ``LC_ALL`` locale override environment variable is also not set, and "
"the current locale reported for the ``LC_CTYPE`` category is either the "
"default ``C`` locale, or else the explicitly ASCII-based ``POSIX`` "
"locale, then the Python CLI will attempt to configure the following "
"locales for the ``LC_CTYPE`` category in the order listed before loading "
"the interpreter runtime:"
msgstr ""

#: ../Doc/using/cmdline.rst:805
msgid "``C.UTF-8``"
msgstr ""

#: ../Doc/using/cmdline.rst:806
msgid "``C.utf8``"
msgstr ""

#: ../Doc/using/cmdline.rst:807
msgid "``UTF-8``"
msgstr ""

#: ../Doc/using/cmdline.rst:809
msgid ""
"If setting one of these locale categories succeeds, then the ``LC_CTYPE``"
" environment variable will also be set accordingly in the current process"
" environment before the Python runtime is initialized. This ensures that "
"in addition to being seen by both the interpreter itself and other "
"locale-aware components running in the same process (such as the GNU "
"``readline`` library), the updated setting is also seen in subprocesses "
"(regardless of whether or not those processes are running a Python "
"interpreter), as well as in operations that query the environment rather "
"than the current C locale (such as Python's own "
":func:`locale.getdefaultlocale`)."
msgstr ""

#: ../Doc/using/cmdline.rst:819
msgid ""
"Configuring one of these locales (either explicitly or via the above "
"implicit locale coercion) automatically enables the ``surrogateescape`` "
":ref:`error handler <error-handlers>` for :data:`sys.stdin` and "
":data:`sys.stdout` (:data:`sys.stderr` continues to use "
"``backslashreplace`` as it does in any other locale). This stream "
"handling behavior can be overridden using :envvar:`PYTHONIOENCODING` as "
"usual."
msgstr ""

#: ../Doc/using/cmdline.rst:826
msgid ""
"For debugging purposes, setting ``PYTHONCOERCECLOCALE=warn`` will cause "
"Python to emit warning messages on ``stderr`` if either the locale "
"coercion activates, or else if a locale that *would* have triggered "
"coercion is still active when the Python runtime is initialized."
msgstr ""

#: ../Doc/using/cmdline.rst:831
msgid ""
"Also note that even when locale coercion is disabled, or when it fails to"
" find a suitable target locale, :envvar:`PYTHONUTF8` will still activate "
"by default in legacy ASCII-based locales. Both features must be disabled "
"in order to force the interpreter to use ``ASCII`` instead of ``UTF-8`` "
"for system interfaces."
msgstr ""

#: ../Doc/using/cmdline.rst:837 ../Doc/using/cmdline.rst:898
msgid "Availability: \\*nix"
msgstr ""

#: ../Doc/using/cmdline.rst:839
msgid "See :pep:`538` for more details."
msgstr ""

#: ../Doc/using/cmdline.rst:845
msgid ""
"If this environment variable is set to a non-empty string, enable the "
"CPython \"development mode\". See the :option:`-X` ``dev`` option."
msgstr ""

#: ../Doc/using/cmdline.rst:852
msgid ""
"If set to ``1``, enables the interpreter's UTF-8 mode, where ``UTF-8`` is"
" used as the text encoding for system interfaces, regardless of the "
"current locale setting."
msgstr ""

#: ../Doc/using/cmdline.rst:856
msgid "This means that:"
msgstr ""

#: ../Doc/using/cmdline.rst:858
msgid ""
":func:`sys.getfilesystemencoding()` returns ``'UTF-8'`` (the locale "
"encoding is ignored)."
msgstr ""

#: ../Doc/using/cmdline.rst:860
msgid ""
":func:`locale.getpreferredencoding()` returns ``'UTF-8'`` (the locale "
"encoding is ignored, and the function's ``do_setlocale`` parameter has no"
" effect)."
msgstr ""

#: ../Doc/using/cmdline.rst:863
msgid ""
":data:`sys.stdin`, :data:`sys.stdout`, and :data:`sys.stderr` all use "
"UTF-8 as their text encoding, with the ``surrogateescape`` :ref:`error "
"handler <error-handlers>` being enabled for :data:`sys.stdin` and "
":data:`sys.stdout` (:data:`sys.stderr` continues to use "
"``backslashreplace`` as it does in the default locale-aware mode)"
msgstr ""

#: ../Doc/using/cmdline.rst:869
msgid ""
"As a consequence of the changes in those lower level APIs, other higher "
"level APIs also exhibit different default behaviours:"
msgstr ""

#: ../Doc/using/cmdline.rst:872
msgid ""
"Command line arguments, environment variables and filenames are decoded "
"to text using the UTF-8 encoding."
msgstr ""

#: ../Doc/using/cmdline.rst:874
msgid ":func:`os.fsdecode()` and :func:`os.fsencode()` use the UTF-8 encoding."
msgstr ""

#: ../Doc/using/cmdline.rst:875
msgid ""
":func:`open()`, :func:`io.open()`, and :func:`codecs.open()` use the "
"UTF-8 encoding by default. However, they still use the strict error "
"handler by default so that attempting to open a binary file in text mode "
"is likely to raise an exception rather than producing nonsense data."
msgstr ""

#: ../Doc/using/cmdline.rst:880
msgid ""
"Note that the standard stream settings in UTF-8 mode can be overridden by"
" :envvar:`PYTHONIOENCODING` (just as they can be in the default locale-"
"aware mode)."
msgstr ""

#: ../Doc/using/cmdline.rst:884
msgid "If set to ``0``, the interpreter runs in its default locale-aware mode."
msgstr ""

#: ../Doc/using/cmdline.rst:886
msgid ""
"Setting any other non-empty string causes an error during interpreter "
"initialisation."
msgstr ""

#: ../Doc/using/cmdline.rst:889
msgid ""
"If this environment variable is not set at all, then the interpreter "
"defaults to using the current locale settings, *unless* the current "
"locale is identified as a legacy ASCII-based locale (as described for "
":envvar:`PYTHONCOERCECLOCALE`), and locale coercion is either disabled or"
" fails. In such legacy locales, the interpreter will default to enabling "
"UTF-8 mode unless explicitly instructed not to do so."
msgstr ""

#: ../Doc/using/cmdline.rst:896
msgid "Also available as the :option:`-X` ``utf8`` option."
msgstr ""

#: ../Doc/using/cmdline.rst:900
msgid "See :pep:`540` for more details."
msgstr ""

#: ../Doc/using/cmdline.rst:905
msgid "Debug-mode variables"
msgstr ""

#: ../Doc/using/cmdline.rst:907
msgid ""
"Setting these variables only has an effect in a debug build of Python, "
"that is, if Python was configured with the ``--with-pydebug`` build "
"option."
msgstr ""

#: ../Doc/using/cmdline.rst:912
msgid "If set, Python will print threading debug info."
msgstr ""

#: ../Doc/using/cmdline.rst:917
msgid ""
"If set, Python will dump objects and reference counts still alive after "
"shutting down the interpreter."
msgstr ""

#~ msgid "The line numbers in error messages will be off by one."
#~ msgstr ""

#~ msgid "Print the Python version number and exit.  Example output could be::"
#~ msgstr ""

#~ msgid "When given twice, print more information about the build, like::"
#~ msgstr ""

#~ msgid "Turn on basic optimizations.  See also :envvar:`PYTHONOPTIMIZE`."
#~ msgstr ""

#~ msgid "Discard docstrings in addition to the :option:`-O` optimizations."
#~ msgstr ""

#~ msgid ""
#~ "Warning control.  Python's warning machinery"
#~ " by default prints warning messages "
#~ "to :data:`sys.stderr`.  A typical warning "
#~ "message has the following form::"
#~ msgstr ""

#~ msgid ""
#~ "Turn on parser debugging output (for "
#~ "wizards only, depending on compilation "
#~ "options).  See also :envvar:`PYTHONDEBUG`."
#~ msgstr ""

#~ msgid ""
#~ "Kept for compatibility.  On Python 3.3"
#~ " and greater, hash randomization is "
#~ "turned on by default."
#~ msgstr ""

#~ msgid ""
#~ "Force the binary layer of the "
#~ "stdout and stderr streams (which is "
#~ "available as their ``buffer`` attribute) "
#~ "to be unbuffered. The text I/O "
#~ "layer will still be line-buffered "
#~ "if writing to the console, or "
#~ "block-buffered if redirected to a "
#~ "non-interactive file."
#~ msgstr ""

#~ msgid ""
#~ "Warnings can also be controlled from "
#~ "within a Python program using the "
#~ ":mod:`warnings` module."
#~ msgstr ""

#~ msgid ""
#~ "The simplest form of argument is "
#~ "one of the following action strings "
#~ "(or a unique abbreviation):"
#~ msgstr ""

#~ msgid "``ignore``"
#~ msgstr ""

#~ msgid "Ignore all warnings."
#~ msgstr ""

#~ msgid "``default``"
#~ msgstr ""

#~ msgid ""
#~ "Explicitly request the default behavior "
#~ "(printing each warning once per source"
#~ " line)."
#~ msgstr ""

#~ msgid "``all``"
#~ msgstr ""

#~ msgid ""
#~ "Print a warning each time it "
#~ "occurs (this may generate many messages"
#~ " if a warning is triggered repeatedly"
#~ " for the same source line, such "
#~ "as inside a loop)."
#~ msgstr ""

#~ msgid "``module``"
#~ msgstr ""

#~ msgid "Print each warning only the first time it occurs in each module."
#~ msgstr ""

#~ msgid "``once``"
#~ msgstr ""

#~ msgid "Print each warning only the first time it occurs in the program."
#~ msgstr ""

#~ msgid "``error``"
#~ msgstr ""

#~ msgid "Raise an exception instead of printing a warning message."
#~ msgstr ""

#~ msgid "The full form of argument is::"
#~ msgstr ""

#~ msgid ""
#~ "Here, *action* is as explained above "
#~ "but only applies to messages that "
#~ "match the remaining fields.  Empty "
#~ "fields match all values; trailing empty"
#~ " fields may be omitted.  The "
#~ "*message* field matches the start of "
#~ "the warning message printed; this match"
#~ " is case-insensitive.  The *category* "
#~ "field matches the warning category.  "
#~ "This must be a class name; the "
#~ "match tests whether the actual warning"
#~ " category of the message is a "
#~ "subclass of the specified warning "
#~ "category.  The full class name must "
#~ "be given.  The *module* field matches"
#~ " the (fully-qualified) module name; "
#~ "this match is case-sensitive.  The "
#~ "*line* field matches the line number,"
#~ " where zero matches all line numbers"
#~ " and is thus equivalent to an "
#~ "omitted line number."
#~ msgstr ""

#~ msgid ":mod:`warnings` -- the warnings module"
#~ msgstr ""

#~ msgid ":pep:`230` -- Warning framework"
#~ msgstr ""

#~ msgid ":envvar:`PYTHONWARNINGS`"
#~ msgstr ""

#~ msgid ""
#~ "This is equivalent to the :option:`-W`"
#~ " option. If set to a comma "
#~ "separated string, it is equivalent to"
#~ " specifying :option:`-W` multiple times."
#~ msgstr ""

#~ msgid "``debug``: install debug hooks on top of the default memory allocator"
#~ msgstr ""

#~ msgid ""
#~ "When Python is compiled in release "
#~ "mode, the default is ``pymalloc``. When"
#~ " compiled in debug mode, the default"
#~ " is ``pymalloc_debug`` and the debug "
#~ "hooks are used automatically."
#~ msgstr ""

#~ msgid ""
#~ "If Python is configured without "
#~ "``pymalloc`` support, ``pymalloc`` and "
#~ "``pymalloc_debug`` are not available, the "
#~ "default is ``malloc`` in release mode"
#~ " and ``malloc_debug`` in debug mode."
#~ msgstr ""

#~ msgid ""
#~ "See the :c:func:`PyMem_SetupDebugHooks` function "
#~ "for debug hooks on Python memory "
#~ "allocators."
#~ msgstr ""

#~ msgid ""
#~ "``-X utf8`` enables the UTF-8 mode, "
#~ "whereas ``-X utf8=0`` disables the UTF-8"
#~ " mode."
#~ msgstr ""

#~ msgid ""
#~ "If set to the value ``0``, causes"
#~ " the main Python command line "
#~ "application to skip coercing the legacy"
#~ " ASCII-based C locale to a more"
#~ " capable UTF-8 based alternative."
#~ msgstr ""

#~ msgid ""
#~ "If this variable is *not* set, or"
#~ " is set to a value other than"
#~ " ``0``, and the current locale "
#~ "reported for the ``LC_CTYPE`` category "
#~ "is the default ``C`` locale, then "
#~ "the Python CLI will attempt to "
#~ "configure the following locales for the"
#~ " ``LC_CTYPE`` category in the order "
#~ "listed before loading the interpreter "
#~ "runtime:"
#~ msgstr ""

#~ msgid ""
#~ "If setting one of these locale "
#~ "categories succeeds, then the ``LC_CTYPE`` "
#~ "environment variable will also be set"
#~ " accordingly in the current process "
#~ "environment before the Python runtime is"
#~ " initialized. This ensures the updated "
#~ "setting is seen in subprocesses, as "
#~ "well as in operations that query "
#~ "the environment rather than the current"
#~ " C locale (such as Python's own "
#~ ":func:`locale.getdefaultlocale`)."
#~ msgstr ""

#~ msgid ""
#~ "Configuring one of these locales (either"
#~ " explicitly or via the above implicit"
#~ " locale coercion) will automatically set"
#~ " the error handler for :data:`sys.stdin`"
#~ " and :data:`sys.stdout` to ``surrogateescape``."
#~ " This behavior can be overridden "
#~ "using :envvar:`PYTHONIOENCODING` as usual."
#~ msgstr ""

#~ msgid ""
#~ "If set to ``1``, enable the UTF-8"
#~ " mode. If set to ``0``, disable "
#~ "the UTF-8 mode. Any other non-"
#~ "empty string cause an error."
#~ msgstr ""

