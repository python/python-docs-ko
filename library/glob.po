# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-26 18:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/glob.rst:2
msgid ":mod:`glob` --- Unix style pathname pattern expansion"
msgstr ":mod:`glob` --- 유닉스 스타일 경로명 패턴 확장"

#: ../Doc/library/glob.rst:7
msgid "**Source code:** :source:`Lib/glob.py`"
msgstr "**소스 코드:** :source:`Lib/glob.py`"

#: ../Doc/library/glob.rst:13
msgid ""
"The :mod:`glob` module finds all the pathnames matching a specified "
"pattern according to the rules used by the Unix shell, although results "
"are returned in arbitrary order.  No tilde expansion is done, but ``*``, "
"``?``, and character ranges expressed with ``[]`` will be correctly "
"matched.  This is done by using the :func:`os.scandir` and "
":func:`fnmatch.fnmatch` functions in concert, and not by actually "
"invoking a subshell.  Note that unlike :func:`fnmatch.fnmatch`, "
":mod:`glob` treats filenames beginning with a dot (``.``) as special "
"cases. (For tilde and shell variable expansion, use "
":func:`os.path.expanduser` and :func:`os.path.expandvars`.)"
msgstr ""
":mod:`glob` 모듈은 유닉스 셸이 사용하는 규칙에 따라 지정된 패턴과 일치하는 모든 경로명을 찾습니다. 하지만 결과는 임의의 "
"순서로 반환됩니다. 물결표(tilde) 확장은 수행되지 않지만, ``*``, ``?`` 및 ``[]``\\로 표시되는 문자 범위는 "
"올바르게 일치합니다. 이는 서브 셸을 실제로 호출하지 않고 :func:`os.scandir` 과 "
":func:`fnmatch.fnmatch` 함수를 사용하여 수행됩니다. :func:`fnmatch.fnmatch`\\와 달리, "
":mod:`glob`\\은 점(``.``)으로 시작하는 파일 이름을 특수한 경우로 취급합니다. (물결표와 셸 변수 확장은 "
":func:`os.path.expanduser` 와 :func:`os.path.expandvars`\\를 사용하십시오.)"

#: ../Doc/library/glob.rst:23
msgid ""
"For a literal match, wrap the meta-characters in brackets. For example, "
"``'[?]'`` matches the character ``'?'``."
msgstr ""
"리터럴 일치를 위해서는, 대괄호 안에 메타 문자를 넣습니다. 예를 들어, ``'[?]'``\\는 ``'?'`` 문자와 일치합니다."

#: ../Doc/library/glob.rst:28
msgid "The :mod:`pathlib` module offers high-level path objects."
msgstr ":mod:`pathlib` 모듈은 고수준의 경로 객체를 제공합니다."

#: ../Doc/library/glob.rst:33
msgid ""
"Return a possibly-empty list of path names that match *pathname*, which "
"must be a string containing a path specification. *pathname* can be "
"either absolute (like :file:`/usr/src/Python-1.5/Makefile`) or relative "
"(like :file:`../../Tools/\\*/\\*.gif`), and can contain shell-style "
"wildcards. Broken symlinks are included in the results (as in the shell)."
msgstr ""
"경로 지정을 포함하는 문자열인 *pathname*\\에 일치하는 경로 이름의 비어있을 수 있는 리스트를 반환합니다. "
"*pathname*\\은 절대(:file:`/usr/src/Python-1.5/Makefile`\\처럼)나 "
"상대(:file:`../../Tools/\\*/\\*.gif`\\처럼)일 수 있으며, 셸 스타일 와일드카드를 포함할 수 있습니다. 깨진 "
"심볼릭 링크가 결과에 포함됩니다 (셸과 마찬가지로)."

#: ../Doc/library/glob.rst:39
msgid ""
"If *recursive* is true, the pattern \"``**``\" will match any files and "
"zero or more directories and subdirectories.  If the pattern is followed "
"by an ``os.sep``, only directories and subdirectories match."
msgstr ""
"*recursive*\\가 참이면, \"``**``\" 패턴은 모든 파일과 0개 이상의 디렉터리 및 서브 디렉터리와 일치합니다. 패턴 "
"다음에 ``os.sep``\\이 오면, 디렉터리와 서브 디렉터리만 일치합니다."

#: ../Doc/library/glob.rst:44
msgid ""
"Using the \"``**``\" pattern in large directory trees may consume an "
"inordinate amount of time."
msgstr "커다란 디렉터리 트리에서 \"``**``\" 패턴을 사용하면 과도한 시간이 걸릴 수 있습니다."

#: ../Doc/library/glob.rst:47
msgid "Support for recursive globs using \"``**``\"."
msgstr "\"``**``\" 를 사용하는 재귀적 glob 지원."

#: ../Doc/library/glob.rst:53
msgid ""
"Return an :term:`iterator` which yields the same values as :func:`glob` "
"without actually storing them all simultaneously."
msgstr ""
"실제로 동시에 저장하지 않고 :func:`glob`\\과 같은 값을 산출하는 :term:`이터레이터 <iterator>`\\를 "
"반환합니다."

#: ../Doc/library/glob.rst:59
msgid ""
"Escape all special characters (``'?'``, ``'*'`` and ``'['``). This is "
"useful if you want to match an arbitrary literal string that may have "
"special characters in it.  Special characters in drive/UNC sharepoints "
"are not escaped, e.g. on Windows ``escape('//?/c:/Quo vadis?.txt')`` "
"returns ``'//?/c:/Quo vadis[?].txt'``."
msgstr ""
"모든 특수 문자(``'?'``, ``'*'`` 및 ``'['``)를 이스케이프 처리합니다. 이것은 특수 문자가 들어있을 수 있는 임의의 "
"리터럴 문자열을 일치시키려는 경우에 유용합니다. 드라이브/UNC 셰어 포인트의 특수 문자는 이스케이프 되지 않습니다, 예를 들어, "
"윈도우에서 ``escape('//?/c:/Quo vadis?.txt')``\\는 ``'//?/c:/Quo "
"vadis[?].txt'``\\를 반환합니다."

#: ../Doc/library/glob.rst:68
msgid ""
"For example, consider a directory containing the following files: "
":file:`1.gif`, :file:`2.txt`, :file:`card.gif` and a subdirectory "
":file:`sub` which contains only the file :file:`3.txt`.  :func:`glob` "
"will produce the following results.  Notice how any leading components of"
" the path are preserved. ::"
msgstr ""
"예를 들어, 다음과 같은 파일을 포함하는 디렉터리를 고려하십시오: :file:`1.gif`, :file:`2.txt`, "
":file:`card.gif` 및 :file:`3.txt` 파일 만 포함하는 서브 디렉터리 :file:`sub`. "
":func:`glob`\\은 다음과 같은 결과를 산출합니다. 경로의 선행 구성 요소가 보존되는 방법에 유의하십시오. ::"

#: ../Doc/library/glob.rst:86
msgid ""
"If the directory contains files starting with ``.`` they won't be matched"
" by default. For example, consider a directory containing "
":file:`card.gif` and :file:`.card.gif`::"
msgstr ""
"디렉터리에 ``.``\\으로 시작하는 파일이 있으면, 기본적으로 일치하지 않습니다. 예를 들어, :file:`card.gif` 와 "
":file:`.card.gif`\\를 포함하는 디렉터리를 고려하십시오::"

#: ../Doc/library/glob.rst:98
msgid "Module :mod:`fnmatch`"
msgstr "모듈 :mod:`fnmatch`"

#: ../Doc/library/glob.rst:99
msgid "Shell-style filename (not path) expansion"
msgstr "셸 스타일 파일명 (경로가 아님) 확장"
