# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-26 18:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/glob.rst:2
msgid ":mod:`glob` --- Unix style pathname pattern expansion"
msgstr ""

#: ../Doc/library/glob.rst:7
msgid "**Source code:** :source:`Lib/glob.py`"
msgstr ""

#: ../Doc/library/glob.rst:13
msgid ""
"The :mod:`glob` module finds all the pathnames matching a specified "
"pattern according to the rules used by the Unix shell, although results "
"are returned in arbitrary order.  No tilde expansion is done, but ``*``, "
"``?``, and character ranges expressed with ``[]`` will be correctly "
"matched.  This is done by using the :func:`os.scandir` and "
":func:`fnmatch.fnmatch` functions in concert, and not by actually "
"invoking a subshell.  Note that unlike :func:`fnmatch.fnmatch`, "
":mod:`glob` treats filenames beginning with a dot (``.``) as special "
"cases. (For tilde and shell variable expansion, use "
":func:`os.path.expanduser` and :func:`os.path.expandvars`.)"
msgstr ""

#: ../Doc/library/glob.rst:23
msgid ""
"For a literal match, wrap the meta-characters in brackets. For example, "
"``'[?]'`` matches the character ``'?'``."
msgstr ""

#: ../Doc/library/glob.rst:28
msgid "The :mod:`pathlib` module offers high-level path objects."
msgstr ""

#: ../Doc/library/glob.rst:33
msgid ""
"Return a possibly-empty list of path names that match *pathname*, which "
"must be a string containing a path specification. *pathname* can be "
"either absolute (like :file:`/usr/src/Python-1.5/Makefile`) or relative "
"(like :file:`../../Tools/\\*/\\*.gif`), and can contain shell-style "
"wildcards. Broken symlinks are included in the results (as in the shell)."
msgstr ""

#: ../Doc/library/glob.rst:39
msgid ""
"If *recursive* is true, the pattern \"``**``\" will match any files and "
"zero or more directories and subdirectories.  If the pattern is followed "
"by an ``os.sep``, only directories and subdirectories match."
msgstr ""

#: ../Doc/library/glob.rst:44
msgid ""
"Using the \"``**``\" pattern in large directory trees may consume an "
"inordinate amount of time."
msgstr ""

#: ../Doc/library/glob.rst:47
msgid "Support for recursive globs using \"``**``\"."
msgstr ""

#: ../Doc/library/glob.rst:53
msgid ""
"Return an :term:`iterator` which yields the same values as :func:`glob` "
"without actually storing them all simultaneously."
msgstr ""

#: ../Doc/library/glob.rst:59
msgid ""
"Escape all special characters (``'?'``, ``'*'`` and ``'['``). This is "
"useful if you want to match an arbitrary literal string that may have "
"special characters in it.  Special characters in drive/UNC sharepoints "
"are not escaped, e.g. on Windows ``escape('//?/c:/Quo vadis?.txt')`` "
"returns ``'//?/c:/Quo vadis[?].txt'``."
msgstr ""

#: ../Doc/library/glob.rst:68
msgid ""
"For example, consider a directory containing the following files: "
":file:`1.gif`, :file:`2.txt`, :file:`card.gif` and a subdirectory "
":file:`sub` which contains only the file :file:`3.txt`.  :func:`glob` "
"will produce the following results.  Notice how any leading components of"
" the path are preserved. ::"
msgstr ""

#: ../Doc/library/glob.rst:86
msgid ""
"If the directory contains files starting with ``.`` they won't be matched"
" by default. For example, consider a directory containing "
":file:`card.gif` and :file:`.card.gif`::"
msgstr ""

#: ../Doc/library/glob.rst:98
msgid "Module :mod:`fnmatch`"
msgstr ""

#: ../Doc/library/glob.rst:99
msgid "Shell-style filename (not path) expansion"
msgstr ""

