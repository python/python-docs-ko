# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-08 11:36+0900\n"
"PO-Revision-Date: 2018-09-02 10:23+0900\n"
"Last-Translator: Spike H.Y. Lee <rurouni24@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"
"Language: ko_KR"

#: ../Doc/library/uuid.rst:2
msgid ":mod:`uuid` --- UUID objects according to :rfc:`4122`"
msgstr ":mod:`uuid` --- :rfc:`4122` 에 따른 UUID 객체"

#: ../Doc/library/uuid.rst:9
msgid "**Source code:** :source:`Lib/uuid.py`"
msgstr "**소스 코드:** :source:`Lib/uuid.py`"

#: ../Doc/library/uuid.rst:13
msgid ""
"This module provides immutable :class:`UUID` objects (the :class:`UUID` "
"class) and the functions :func:`uuid1`, :func:`uuid3`, :func:`uuid4`, "
":func:`uuid5` for generating version 1, 3, 4, and 5 UUIDs as specified in"
" :rfc:`4122`."
msgstr ""
"이 모듈은 :rfc:`4122`\\에서 명시한 버전 1, 3, 4 및 5의 UUID를 생성하기 "
"위해 불변 :class:`UUID` 객체(:class:`UUID` 클래스)와 "
":func:`uuid1`, :func:`uuid3`, :func:`uuid4`, :func:`uuid5`\\를 제공합니다."

#: ../Doc/library/uuid.rst:17
msgid ""
"If all you want is a unique ID, you should probably call :func:`uuid1` or"
" :func:`uuid4`.  Note that :func:`uuid1` may compromise privacy since it "
"creates a UUID containing the computer's network address.  :func:`uuid4` "
"creates a random UUID."
msgstr ""
"고유 ID만을 얻고자 한다면 :func:`uuid1` 또는 :func:`uuid4`\\를 "
"호출하는 것이 좋습니다. :func:`uuid1` 함수는 컴퓨터의 네트워크 주소를 "
"포함하여 UUID를 생성하므로 개인정보가 노출될 수 있음을 명심해야 합니다. "
":func:`uuid4`\\는 무작위 UUID를 생성합니다."

#: ../Doc/library/uuid.rst:22
msgid ""
"Depending on support from the underlying platform, :func:`uuid1` may or "
"may not return a \"safe\" UUID.  A safe UUID is one which is generated "
"using synchronization methods that ensure no two processes can obtain the"
" same UUID.  All instances of :class:`UUID` have an :attr:`is_safe` "
"attribute which relays any information about the UUID's safety, using "
"this enumeration:"
msgstr ""
"기본 플랫폼의 지원 여부에 따라, :func:`uuid1`\\은 \"안전한\" UUID를 "
"반환하거나 그렇지 않을 수도 있습니다. 안전한 UUID는 두 프로세스가 같은 "
"UUID를 얻지 못하게 하는 동기화 메서드에 의해 생성됩니다. :class:`UUID`\\의 "
"모든 인스턴스는 UUID의 안정성에 대한 정보를 중계하는 :attr:`is_safe` "
"어트리뷰트가 있고, 다음의 열거체를 사용합니다."

#: ../Doc/library/uuid.rst:34
msgid "The UUID was generated by the platform in a multiprocessing-safe way."
msgstr "플랫폼이 안전한 다중 프로세싱 방식으로 UUID를 생성합니다."

#: ../Doc/library/uuid.rst:38
msgid "The UUID was not generated in a multiprocessing-safe way."
msgstr "다중 프로세스에 안전한 방식으로 생성되지 않습니다."

#: ../Doc/library/uuid.rst:42
msgid ""
"The platform does not provide information on whether the UUID was "
"generated safely or not."
msgstr ""
"플랫폼이 UUID를 안전하게 생성하였는지에 대한 정보를 제공하지 않습니다."

#: ../Doc/library/uuid.rst:47
msgid ""
"Create a UUID from either a string of 32 hexadecimal digits, a string of "
"16 bytes in big-endian order as the *bytes* argument, a string of 16 "
"bytes in little-endian order as the *bytes_le* argument, a tuple of six "
"integers (32-bit *time_low*, 16-bit *time_mid*, 16-bit *time_hi_version*,"
" 8-bit *clock_seq_hi_variant*, 8-bit *clock_seq_low*, 48-bit *node*) as "
"the *fields* argument, or a single 128-bit integer as the *int* argument."
" When a string of hex digits is given, curly braces, hyphens, and a URN "
"prefix are all optional.  For example, these expressions all yield the "
"same UUID::"
msgstr ""
"32자리 16진수 문자열, *bytes* 인자에 빅 엔디안 순서 16바이트열, "
"*bytes_le* 인자에 리틀 엔디안 순서 16바이트열, *fields* 인자에 여섯 개의 "
"정수로 이루어진 튜플(32-bit *time_low*, 16-bit *time_mid*, 16-bit "
"*time_hi_version*, 8-bit *clock_seq_hi_variant*, 8-bit *clock_seq_low*, "
"48-bit *node*), *int* 인자에 단일 128bit 정수 중 하나를 이용하여 "
"UUID를 만듭니다. 16진수 문자열로 주어졌을 경우 중괄호, 붙임표(hyphen), URN "
"접두어는 모두 선택사항입니다. 예를 들어, 아래 표현들은 모두 같은 UUID를 "
"산출합니다:"

#: ../Doc/library/uuid.rst:66
msgid ""
"Exactly one of *hex*, *bytes*, *bytes_le*, *fields*, or *int* must be "
"given. The *version* argument is optional; if given, the resulting UUID "
"will have its variant and version number set according to :rfc:`4122`, "
"overriding bits in the given *hex*, *bytes*, *bytes_le*, *fields*, or "
"*int*."
msgstr ""
"*hex*, *bytes*, *bytes_le*, *fields*, *int* 중 하나는 반드시 주어져야 "
"합니다. *version* 인자는 선택사항입니다; 인자로 주어질 경우, 결과로 "
"생성된 UUID는 :rfc:`4122`\\에 따라 변종 및 버전 번호를 설정하고 주어진 "
"*hex*, *bytes*, *bytes_le*, *fields*, *int* 비트를 오버라이딩 합니다."

#: ../Doc/library/uuid.rst:71
msgid ""
"Comparison of UUID objects are made by way of comparing their "
":attr:`UUID.int` attributes.  Comparison with a non-UUID object raises a "
":exc:`TypeError`."
msgstr ""
"UUID 객체끼리 비교할 때 :attr:`UUID.int` 어트리뷰트를 비교하여 수행합니다. "
"UUID가 아닌 객체와 비교하면 :exc:`TypeError`\\가 발생합니다."

#: ../Doc/library/uuid.rst:75
msgid ""
"``str(uuid)`` returns a string in the form "
"``12345678-1234-5678-1234-567812345678`` where the 32 hexadecimal digits "
"represent the UUID."
msgstr ""
"``str(uuid)``\\는 ``12345678-1234-5678-1234-567812345678``\\과 같이 "
"32자리 16진수 UUID로 표현합니다."

#: ../Doc/library/uuid.rst:79
msgid ":class:`UUID` instances have these read-only attributes:"
msgstr ":class:`UUID` 객체는 다음과 같은 읽기 전용 어트리뷰트를 갖습니다."

#: ../Doc/library/uuid.rst:83
msgid ""
"The UUID as a 16-byte string (containing the six integer fields in big-"
"endian byte order)."
msgstr ""
"16바이트 문자열(여섯 개의 빅 엔디안 순서 정수 필드 포함)인 UUID"

#: ../Doc/library/uuid.rst:89
msgid ""
"The UUID as a 16-byte string (with *time_low*, *time_mid*, and "
"*time_hi_version* in little-endian byte order)."
msgstr ""
"16바이트 문자열(리틀 엔디안 순서 *time_low*, *time_mid*, "
"*time_hi_version*)인 UUID"

#: ../Doc/library/uuid.rst:95
msgid ""
"A tuple of the six integer fields of the UUID, which are also available "
"as six individual attributes and two derived attributes:"
msgstr ""
"UUID의 여섯 개의 정수 필드로 이루어진 튜플. 여섯 개의 개별 어트리뷰트와  "
"두 개의 파생된 어트리뷰트도 사용가능:"

#: ../Doc/library/uuid.rst:99
msgid "Field"
msgstr "필드"

#: ../Doc/library/uuid.rst:99
msgid "Meaning"
msgstr "의미"

#: ../Doc/library/uuid.rst:101
msgid ":attr:`time_low`"
msgstr ":attr:`time_low`"

#: ../Doc/library/uuid.rst:101
msgid "the first 32 bits of the UUID"
msgstr "UUID의 처음 32bit"

#: ../Doc/library/uuid.rst:103
msgid ":attr:`time_mid`"
msgstr ":attr:`time_mid`"

#: ../Doc/library/uuid.rst:103 ../Doc/library/uuid.rst:105
msgid "the next 16 bits of the UUID"
msgstr "UUID의 다음 16bit"

#: ../Doc/library/uuid.rst:105
msgid ":attr:`time_hi_version`"
msgstr ":attr:`time_hi_version`"

#: ../Doc/library/uuid.rst:107
msgid ":attr:`clock_seq_hi_variant`"
msgstr ":attr:`clock_seq_hi_variant`"

#: ../Doc/library/uuid.rst:107 ../Doc/library/uuid.rst:109
msgid "the next 8 bits of the UUID"
msgstr "UUID의 다음 8bit"

#: ../Doc/library/uuid.rst:109
msgid ":attr:`clock_seq_low`"
msgstr ":attr:`clock_seq_low`"

#: ../Doc/library/uuid.rst:111
msgid ":attr:`node`"
msgstr ":attr:`node`"

#: ../Doc/library/uuid.rst:111
msgid "the last 48 bits of the UUID"
msgstr "UUID의 마지막 48bit"

#: ../Doc/library/uuid.rst:113
msgid ":attr:`time`"
msgstr ":attr:`time`"

#: ../Doc/library/uuid.rst:113
msgid "the 60-bit timestamp"
msgstr "60bit 타임스탬프"

#: ../Doc/library/uuid.rst:115
msgid ":attr:`clock_seq`"
msgstr ":attr:`clock_seq`"

#: ../Doc/library/uuid.rst:115
msgid "the 14-bit sequence number"
msgstr "14bit 시퀀스 번호"

#: ../Doc/library/uuid.rst:121
msgid "The UUID as a 32-character hexadecimal string."
msgstr "16진수 32자리 문자열 UUID"
# 16진수가 32자리가 아닌 문자열이 32자리

#: ../Doc/library/uuid.rst:126
msgid "The UUID as a 128-bit integer."
msgstr "128bit 정수 UUID"

#: ../Doc/library/uuid.rst:131
msgid "The UUID as a URN as specified in :rfc:`4122`."
msgstr ":rfc:`4122`\\에서 명시한 URN의 UUID"

#: ../Doc/library/uuid.rst:136
msgid ""
"The UUID variant, which determines the internal layout of the UUID. This "
"will be one of the constants :const:`RESERVED_NCS`, :const:`RFC_4122`, "
":const:`RESERVED_MICROSOFT`, or :const:`RESERVED_FUTURE`."
msgstr ""
"UUID 변종은 UUID의 내부 레이아웃을 결정합니다. 이는 상수 "
":const:`RESERVED_NCS`, :const:`RFC_4122`, :const:`RESERVED_MICROSOFT`, "
"및 :const:`RESERVED_FUTURE` 중 하나입니다."

#: ../Doc/library/uuid.rst:143
msgid ""
"The UUID version number (1 through 5, meaningful only when the variant is"
" :const:`RFC_4122`)."
msgstr ""
"UUID 버전 번호 (1부터 5까지이며, 변종이 :const:`RFC_4122`\\일 때만 유효)"

#: ../Doc/library/uuid.rst:148
msgid ""
"An enumeration of :class:`SafeUUID` which indicates whether the platform "
"generated the UUID in a multiprocessing-safe way."
msgstr ""
"플랫폼이 UUID를 안전한 멀티프로세싱 방식으로 생성했는지 여부를 나타내는 "
":class:`SafeUUID`\\의 열거체입니다."

#: ../Doc/library/uuid.rst:153
msgid "The :mod:`uuid` module defines the following functions:"
msgstr ":mod:`uuid` 모듈은 다음의 함수들을 정의합니다."

#: ../Doc/library/uuid.rst:158
msgid ""
"Get the hardware address as a 48-bit positive integer.  The first time "
"this runs, it may launch a separate program, which could be quite slow.  "
"If all attempts to obtain the hardware address fail, we choose a random "
"48-bit number with the multicast bit (least significant bit of the first "
"octet) set to 1 as recommended in :rfc:`4122`.  \"Hardware address\" "
"means the MAC address of a network interface.  On a machine with multiple"
" network interfaces, universally administered MAC addresses (i.e. where "
"the second least significant bit of the first octet is *unset*) will be "
"preferred over locally administered MAC addresses, but with no other "
"ordering guarantees."
msgstr ""
"하드웨어 주소를 48bit 양의 정수로 가져옵니다. 최초 실행 시 별도의 "
"프로그램으로 실행될 수 있고, 매우 느려질 수 있습니다. 하드웨어 주소를 "
"얻기 위한 시도가 모두 실패하면, :rfc:`4122`\\가 권장하는 대로 멀티캐스트 "
"비트(첫 옥텟의 최하위 비트)가 1로 설정된 무작위 48bit 숫자를 선택합니다. "
"\"하드웨어 주소\"는 네트워크 인터페이스의 MAC 주소를 뜻합니다. 여러 "
"네트워크 인터페이스를 가진 머신에서 보편적으로 관리하는 MAC 주소(즉, "
"첫 번째 옥텟의 두 번째 최하위 비트가 *unset*\\인 경우)는 로컬에서 "
"관리하는 MAC 주소보다 우선하지만, 순서를 보장하지는 않습니다."

#: ../Doc/library/uuid.rst:168
msgid ""
"Universally administered MAC addresses are preferred over locally "
"administered MAC addresses, since the former are guaranteed to be "
"globally unique, while the latter are not."
msgstr ""
"보편적으로 관리하는 MAC 주소는 로컬로 관리하는 MAC 주소보다 우선합니다. "
"전자는 주소가 전 세계적으로 고유함을 보장하지만, 후자는 그렇지 않기 "
"때문입니다."

#: ../Doc/library/uuid.rst:178
msgid ""
"Generate a UUID from a host ID, sequence number, and the current time. If"
" *node* is not given, :func:`getnode` is used to obtain the hardware "
"address. If *clock_seq* is given, it is used as the sequence number; "
"otherwise a random 14-bit sequence number is chosen."
msgstr ""
"호스트 ID, 시퀀스 번호 및 현재 시각으로 UUID 생성. *node*\\가 주어지지 "
"않으면, :func:`getnode`\\를 사용하여 하드웨어 주소를 얻습니다. "
"*clock_seq*\\가 주어지면 시퀀스 번호로 사용합니다. 그렇지 않을 경우, "
"무작위 14bit 시퀀스 번호를 사용합니다."

#: ../Doc/library/uuid.rst:188
msgid ""
"Generate a UUID based on the MD5 hash of a namespace identifier (which is"
" a UUID) and a name (which is a string)."
msgstr ""
"이름공간 식별자(UUID) 및 이름(문자열)의 MD5 해시를 기반으로 "
"UUID 생성."

#: ../Doc/library/uuid.rst:196
msgid "Generate a random UUID."
msgstr "무작위 UUID 생성."

#: ../Doc/library/uuid.rst:203
msgid ""
"Generate a UUID based on the SHA-1 hash of a namespace identifier (which "
"is a UUID) and a name (which is a string)."
msgstr ""
"이름공간 식별자(UUID) 및 이름(문자열)의 SHA-1 해시를 기반으로 "
"UUID 생성."

#: ../Doc/library/uuid.rst:208
msgid ""
"The :mod:`uuid` module defines the following namespace identifiers for "
"use with :func:`uuid3` or :func:`uuid5`."
msgstr ""
":mod:`uuid` 모듈은 :func:`uuid3`\\과 :func:`uuid5`\\를 위한 아래의 "
"이름공간 식별자를 정의합니다."

#: ../Doc/library/uuid.rst:214
msgid ""
"When this namespace is specified, the *name* string is a fully-qualified "
"domain name."
msgstr "이 이름공간이 지정되면 *name* 문자열은 전체 도메인 "
"이름(FQDN)입니다."

#: ../Doc/library/uuid.rst:220
msgid "When this namespace is specified, the *name* string is a URL."
msgstr "이 이름공간이 지정되면 *name* 문자열은 URL입니다."

#: ../Doc/library/uuid.rst:225
msgid "When this namespace is specified, the *name* string is an ISO OID."
msgstr "이 이름공간이 지정되면 *name* 문자열은 ISO OID입니다."

#: ../Doc/library/uuid.rst:230
msgid ""
"When this namespace is specified, the *name* string is an X.500 DN in DER"
" or a text output format."
msgstr ""
"이 이름공간이 지정되면 *name* 문자열은 DER이나 텍스트 출력 형식의 "
"X.500 DN입니다."

#: ../Doc/library/uuid.rst:233
msgid ""
"The :mod:`uuid` module defines the following constants for the possible "
"values of the :attr:`variant` attribute:"
msgstr ""
":mod:`uuid` 모듈은 :attr:`variant` 어트리뷰트로 사용할 수 있는 값으로 "
"다음의 상수를 정의합니다:"

#: ../Doc/library/uuid.rst:239
msgid "Reserved for NCS compatibility."
msgstr "NCS 호환성을 위해 예약됨."

#: ../Doc/library/uuid.rst:244
msgid "Specifies the UUID layout given in :rfc:`4122`."
msgstr ":rfc:`4122` 의 UUID 레이아웃 명시."

#: ../Doc/library/uuid.rst:249
msgid "Reserved for Microsoft compatibility."
msgstr "마이크로소프트 호환성을 위해 예약됨."

#: ../Doc/library/uuid.rst:254
msgid "Reserved for future definition."
msgstr "추후 정의를 위해 예약됨."

#: ../Doc/library/uuid.rst:260
msgid ":rfc:`4122` - A Universally Unique IDentifier (UUID) URN Namespace"
msgstr ":rfc:`4122` - 범용 고유 식별자(UUID) URN 이름공간"

#: ../Doc/library/uuid.rst:260
msgid ""
"This specification defines a Uniform Resource Name namespace for UUIDs, "
"the internal format of UUIDs, and methods of generating UUIDs."
msgstr ""
"이 명세는 UUID를 위한 통합 자원 식별자 이름공간, UUID의 "
"내부 형식 및 UUID 생성 방법을 정의합니다."

#: ../Doc/library/uuid.rst:267
msgid "Example"
msgstr "예제"

#: ../Doc/library/uuid.rst:269
msgid "Here are some examples of typical usage of the :mod:`uuid` module::"
msgstr ":mod:`uuid` 모듈을 사용하는 전형적인 몇 가지 예제입니다::"

#~ msgid ""
#~ "Get the hardware address as a "
#~ "48-bit positive integer.  The first time"
#~ " this runs, it may launch a "
#~ "separate program, which could be quite"
#~ " slow.  If all attempts to obtain "
#~ "the hardware address fail, we choose "
#~ "a random 48-bit number with its "
#~ "eighth bit set to 1 as recommended"
#~ " in RFC 4122.  \"Hardware address\" "
#~ "means the MAC address of a network"
#~ " interface, and on a machine with "
#~ "multiple network interfaces the MAC "
#~ "address of any one of them may "
#~ "be returned."
#~ msgstr ""

#~ msgid ":mod:`uuid` --- UUID objects according to RFC 4122"
#~ msgstr ""

#~ msgid ""
#~ "Create a UUID from either a string"
#~ " of 32 hexadecimal digits, a string"
#~ " of 16 bytes as the *bytes* "
#~ "argument, a string of 16 bytes in"
#~ " little-endian order as the "
#~ "*bytes_le* argument, a tuple of six "
#~ "integers (32-bit *time_low*, 16-bit "
#~ "*time_mid*, 16-bit *time_hi_version*, 8-bit "
#~ "*clock_seq_hi_variant*, 8-bit *clock_seq_low*, "
#~ "48-bit *node*) as the *fields* argument,"
#~ " or a single 128-bit integer as "
#~ "the *int* argument.  When a string "
#~ "of hex digits is given, curly "
#~ "braces, hyphens, and a URN prefix "
#~ "are all optional.  For example, these"
#~ " expressions all yield the same "
#~ "UUID::"
#~ msgstr ""

#~ msgid ""
#~ "Exactly one of *hex*, *bytes*, "
#~ "*bytes_le*, *fields*, or *int* must be"
#~ " given. The *version* argument is "
#~ "optional; if given, the resulting UUID"
#~ " will have its variant and version"
#~ " number set according to RFC 4122,"
#~ " overriding bits in the given *hex*,"
#~ " *bytes*, *bytes_le*, *fields*, or *int*."
#~ msgstr ""

#~ msgid "The UUID as a URN as specified in RFC 4122."
#~ msgstr ""

#~ msgid ""
#~ "Get the hardware address as a "
#~ "48-bit positive integer.  The first time"
#~ " this runs, it may launch a "
#~ "separate program, which could be quite"
#~ " slow.  If all attempts to obtain "
#~ "the hardware address fail, we choose "
#~ "a random 48-bit number with the "
#~ "multicast bit (least significant bit of"
#~ " the first octet) set to 1 as"
#~ " recommended in RFC 4122.  \"Hardware "
#~ "address\" means the MAC address of "
#~ "a network interface.  On a machine "
#~ "with multiple network interfaces, universally"
#~ " administered MAC addresses (i.e. where "
#~ "the second least significant bit of "
#~ "the first octet is *unset*) will "
#~ "be preferred over locally administered "
#~ "MAC addresses, but with no other "
#~ "ordering guarantees."
#~ msgstr ""

