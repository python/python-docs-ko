# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-30 09:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/struct.rst:2
msgid ":mod:`struct` --- Interpret bytes as packed binary data"
msgstr ""

#: ../Doc/library/struct.rst:7
msgid "**Source code:** :source:`Lib/struct.py`"
msgstr ""

#: ../Doc/library/struct.rst:15
msgid ""
"This module performs conversions between Python values and C structs "
"represented as Python :class:`bytes` objects.  This can be used in "
"handling binary data stored in files or from network connections, among "
"other sources.  It uses :ref:`struct-format-strings` as compact "
"descriptions of the layout of the C structs and the intended conversion "
"to/from Python values."
msgstr ""

#: ../Doc/library/struct.rst:23
msgid ""
"By default, the result of packing a given C struct includes pad bytes in "
"order to maintain proper alignment for the C types involved; similarly, "
"alignment is taken into account when unpacking.  This behavior is chosen "
"so that the bytes of a packed struct correspond exactly to the layout in "
"memory of the corresponding C struct.  To handle platform-independent "
"data formats or omit implicit pad bytes, use ``standard`` size and "
"alignment instead of ``native`` size and alignment: see :ref:`struct-"
"alignment` for details."
msgstr ""

#: ../Doc/library/struct.rst:31
msgid ""
"Several :mod:`struct` functions (and methods of :class:`Struct`) take a "
"*buffer* argument.  This refers to objects that implement the "
":ref:`bufferobjects` and provide either a readable or read-writable "
"buffer.  The most common types used for that purpose are :class:`bytes` "
"and :class:`bytearray`, but many other types that can be viewed as an "
"array of bytes implement the buffer protocol, so that they can be "
"read/filled without additional copying from a :class:`bytes` object."
msgstr ""

#: ../Doc/library/struct.rst:40
msgid "Functions and Exceptions"
msgstr ""

#: ../Doc/library/struct.rst:42
msgid "The module defines the following exception and functions:"
msgstr ""

#: ../Doc/library/struct.rst:47
msgid ""
"Exception raised on various occasions; argument is a string describing "
"what is wrong."
msgstr ""

#: ../Doc/library/struct.rst:53
msgid ""
"Return a bytes object containing the values *v1*, *v2*, ... packed "
"according to the format string *format*.  The arguments must match the "
"values required by the format exactly."
msgstr ""

#: ../Doc/library/struct.rst:60
msgid ""
"Pack the values *v1*, *v2*, ... according to the format string *format* "
"and write the packed bytes into the writable buffer *buffer* starting at "
"position *offset*.  Note that *offset* is a required argument."
msgstr ""

#: ../Doc/library/struct.rst:67
msgid ""
"Unpack from the buffer *buffer* (presumably packed by ``pack(format, "
"...)``) according to the format string *format*.  The result is a tuple "
"even if it contains exactly one item.  The buffer's size in bytes must "
"match the size required by the format, as reflected by :func:`calcsize`."
msgstr ""

#: ../Doc/library/struct.rst:75
msgid ""
"Unpack from *buffer* starting at position *offset*, according to the "
"format string *format*.  The result is a tuple even if it contains "
"exactly one item.  The buffer's size in bytes, minus *offset*, must be at"
" least the size required by the format, as reflected by :func:`calcsize`."
msgstr ""

#: ../Doc/library/struct.rst:83
msgid ""
"Iteratively unpack from the buffer *buffer* according to the format "
"string *format*.  This function returns an iterator which will read "
"equally-sized chunks from the buffer until all its contents have been "
"consumed.  The buffer's size in bytes must be a multiple of the size "
"required by the format, as reflected by :func:`calcsize`."
msgstr ""

#: ../Doc/library/struct.rst:89
msgid "Each iteration yields a tuple as specified by the format string."
msgstr ""

#: ../Doc/library/struct.rst:96
msgid ""
"Return the size of the struct (and hence of the bytes object produced by "
"``pack(format, ...)``) corresponding to the format string *format*."
msgstr ""

#: ../Doc/library/struct.rst:103
msgid "Format Strings"
msgstr ""

#: ../Doc/library/struct.rst:105
msgid ""
"Format strings are the mechanism used to specify the expected layout when"
" packing and unpacking data.  They are built up from :ref:`format-"
"characters`, which specify the type of data being packed/unpacked.  In "
"addition, there are special characters for controlling the :ref:`struct-"
"alignment`."
msgstr ""

#: ../Doc/library/struct.rst:114
msgid "Byte Order, Size, and Alignment"
msgstr ""

#: ../Doc/library/struct.rst:116
msgid ""
"By default, C types are represented in the machine's native format and "
"byte order, and properly aligned by skipping pad bytes if necessary "
"(according to the rules used by the C compiler)."
msgstr ""

#: ../Doc/library/struct.rst:120
msgid ""
"Alternatively, the first character of the format string can be used to "
"indicate the byte order, size and alignment of the packed data, according"
" to the following table:"
msgstr ""

#: ../Doc/library/struct.rst:125
msgid "Character"
msgstr ""

#: ../Doc/library/struct.rst:125
msgid "Byte order"
msgstr ""

#: ../Doc/library/struct.rst:125
msgid "Size"
msgstr ""

#: ../Doc/library/struct.rst:125
msgid "Alignment"
msgstr ""

#: ../Doc/library/struct.rst:127
msgid "``@``"
msgstr ""

#: ../Doc/library/struct.rst:127 ../Doc/library/struct.rst:129
msgid "native"
msgstr ""

#: ../Doc/library/struct.rst:129
msgid "``=``"
msgstr ""

#: ../Doc/library/struct.rst:129 ../Doc/library/struct.rst:131
#: ../Doc/library/struct.rst:133 ../Doc/library/struct.rst:135
msgid "standard"
msgstr ""

#: ../Doc/library/struct.rst:129 ../Doc/library/struct.rst:131
#: ../Doc/library/struct.rst:133 ../Doc/library/struct.rst:135
msgid "none"
msgstr ""

#: ../Doc/library/struct.rst:131
msgid "``<``"
msgstr ""

#: ../Doc/library/struct.rst:131
msgid "little-endian"
msgstr ""

#: ../Doc/library/struct.rst:133
msgid "``>``"
msgstr ""

#: ../Doc/library/struct.rst:133
msgid "big-endian"
msgstr ""

#: ../Doc/library/struct.rst:135
msgid "``!``"
msgstr ""

#: ../Doc/library/struct.rst:135
msgid "network (= big-endian)"
msgstr ""

#: ../Doc/library/struct.rst:138
msgid "If the first character is not one of these, ``'@'`` is assumed."
msgstr ""

#: ../Doc/library/struct.rst:140
msgid ""
"Native byte order is big-endian or little-endian, depending on the host "
"system. For example, Intel x86 and AMD64 (x86-64) are little-endian; "
"Motorola 68000 and PowerPC G5 are big-endian; ARM and Intel Itanium "
"feature switchable endianness (bi-endian). Use ``sys.byteorder`` to check"
" the endianness of your system."
msgstr ""

#: ../Doc/library/struct.rst:146
msgid ""
"Native size and alignment are determined using the C compiler's "
"``sizeof`` expression.  This is always combined with native byte order."
msgstr ""

#: ../Doc/library/struct.rst:149
msgid ""
"Standard size depends only on the format character;  see the table in the"
" :ref:`format-characters` section."
msgstr ""

#: ../Doc/library/struct.rst:152
msgid ""
"Note the difference between ``'@'`` and ``'='``: both use native byte "
"order, but the size and alignment of the latter is standardized."
msgstr ""

#: ../Doc/library/struct.rst:155
msgid ""
"The form ``'!'`` is available for those poor souls who claim they can't "
"remember whether network byte order is big-endian or little-endian."
msgstr ""

#: ../Doc/library/struct.rst:158
msgid ""
"There is no way to indicate non-native byte order (force byte-swapping); "
"use the appropriate choice of ``'<'`` or ``'>'``."
msgstr ""

#: ../Doc/library/struct.rst:161 ../Doc/library/struct.rst:240
msgid "Notes:"
msgstr ""

#: ../Doc/library/struct.rst:163
msgid ""
"Padding is only automatically added between successive structure members."
" No padding is added at the beginning or the end of the encoded struct."
msgstr ""

#: ../Doc/library/struct.rst:166
msgid ""
"No padding is added when using non-native size and alignment, e.g. with "
"'<', '>', '=', and '!'."
msgstr ""

#: ../Doc/library/struct.rst:169
msgid ""
"To align the end of a structure to the alignment requirement of a "
"particular type, end the format with the code for that type with a repeat"
" count of zero.  See :ref:`struct-examples`."
msgstr ""

#: ../Doc/library/struct.rst:177
msgid "Format Characters"
msgstr ""

#: ../Doc/library/struct.rst:179
msgid ""
"Format characters have the following meaning; the conversion between C "
"and Python values should be obvious given their types.  The 'Standard "
"size' column refers to the size of the packed value in bytes when using "
"standard size; that is, when the format string starts with one of "
"``'<'``, ``'>'``, ``'!'`` or ``'='``.  When using native size, the size "
"of the packed value is platform-dependent."
msgstr ""

#: ../Doc/library/struct.rst:187
msgid "Format"
msgstr ""

#: ../Doc/library/struct.rst:187
msgid "C Type"
msgstr ""

#: ../Doc/library/struct.rst:187
msgid "Python type"
msgstr ""

#: ../Doc/library/struct.rst:187
msgid "Standard size"
msgstr ""

#: ../Doc/library/struct.rst:187
msgid "Notes"
msgstr ""

#: ../Doc/library/struct.rst:189
msgid "``x``"
msgstr ""

#: ../Doc/library/struct.rst:189
msgid "pad byte"
msgstr ""

#: ../Doc/library/struct.rst:189
msgid "no value"
msgstr ""

#: ../Doc/library/struct.rst:191
msgid "``c``"
msgstr ""

#: ../Doc/library/struct.rst:191
msgid ":c:type:`char`"
msgstr ""

#: ../Doc/library/struct.rst:191
msgid "bytes of length 1"
msgstr ""

#: ../Doc/library/struct.rst:191 ../Doc/library/struct.rst:193
#: ../Doc/library/struct.rst:195 ../Doc/library/struct.rst:197
msgid "1"
msgstr ""

#: ../Doc/library/struct.rst:193
msgid "``b``"
msgstr ""

#: ../Doc/library/struct.rst:193
msgid ":c:type:`signed char`"
msgstr ""

#: ../Doc/library/struct.rst:193 ../Doc/library/struct.rst:195
#: ../Doc/library/struct.rst:199 ../Doc/library/struct.rst:201
#: ../Doc/library/struct.rst:203 ../Doc/library/struct.rst:205
#: ../Doc/library/struct.rst:207 ../Doc/library/struct.rst:209
#: ../Doc/library/struct.rst:211 ../Doc/library/struct.rst:213
#: ../Doc/library/struct.rst:216 ../Doc/library/struct.rst:218
#: ../Doc/library/struct.rst:230
msgid "integer"
msgstr ""

#: ../Doc/library/struct.rst:193
msgid "\\(1),\\(3)"
msgstr ""

#: ../Doc/library/struct.rst:195
msgid "``B``"
msgstr ""

#: ../Doc/library/struct.rst:195
msgid ":c:type:`unsigned char`"
msgstr ""

#: ../Doc/library/struct.rst:195 ../Doc/library/struct.rst:199
#: ../Doc/library/struct.rst:201 ../Doc/library/struct.rst:203
#: ../Doc/library/struct.rst:205 ../Doc/library/struct.rst:207
#: ../Doc/library/struct.rst:209
msgid "\\(3)"
msgstr ""

#: ../Doc/library/struct.rst:197
msgid "``?``"
msgstr ""

#: ../Doc/library/struct.rst:197
msgid ":c:type:`_Bool`"
msgstr ""

#: ../Doc/library/struct.rst:197
msgid "bool"
msgstr ""

#: ../Doc/library/struct.rst:197
msgid "\\(1)"
msgstr ""

#: ../Doc/library/struct.rst:199
msgid "``h``"
msgstr ""

#: ../Doc/library/struct.rst:199
msgid ":c:type:`short`"
msgstr ""

#: ../Doc/library/struct.rst:199 ../Doc/library/struct.rst:201
#: ../Doc/library/struct.rst:220
msgid "2"
msgstr ""

#: ../Doc/library/struct.rst:201
msgid "``H``"
msgstr ""

#: ../Doc/library/struct.rst:201
msgid ":c:type:`unsigned short`"
msgstr ""

#: ../Doc/library/struct.rst:203
msgid "``i``"
msgstr ""

#: ../Doc/library/struct.rst:203
msgid ":c:type:`int`"
msgstr ""

#: ../Doc/library/struct.rst:203 ../Doc/library/struct.rst:205
#: ../Doc/library/struct.rst:207 ../Doc/library/struct.rst:209
#: ../Doc/library/struct.rst:222
msgid "4"
msgstr ""

#: ../Doc/library/struct.rst:205
msgid "``I``"
msgstr ""

#: ../Doc/library/struct.rst:205
msgid ":c:type:`unsigned int`"
msgstr ""

#: ../Doc/library/struct.rst:207
msgid "``l``"
msgstr ""

#: ../Doc/library/struct.rst:207
msgid ":c:type:`long`"
msgstr ""

#: ../Doc/library/struct.rst:209
msgid "``L``"
msgstr ""

#: ../Doc/library/struct.rst:209
msgid ":c:type:`unsigned long`"
msgstr ""

#: ../Doc/library/struct.rst:211
msgid "``q``"
msgstr ""

#: ../Doc/library/struct.rst:211
msgid ":c:type:`long long`"
msgstr ""

#: ../Doc/library/struct.rst:211 ../Doc/library/struct.rst:213
#: ../Doc/library/struct.rst:224
msgid "8"
msgstr ""

#: ../Doc/library/struct.rst:211 ../Doc/library/struct.rst:213
msgid "\\(2), \\(3)"
msgstr ""

#: ../Doc/library/struct.rst:213
msgid "``Q``"
msgstr ""

#: ../Doc/library/struct.rst:213
msgid ":c:type:`unsigned long long`"
msgstr ""

#: ../Doc/library/struct.rst:216
msgid "``n``"
msgstr ""

#: ../Doc/library/struct.rst:216
msgid ":c:type:`ssize_t`"
msgstr ""

#: ../Doc/library/struct.rst:216 ../Doc/library/struct.rst:218
msgid "\\(4)"
msgstr ""

#: ../Doc/library/struct.rst:218
msgid "``N``"
msgstr ""

#: ../Doc/library/struct.rst:218
msgid ":c:type:`size_t`"
msgstr ""

#: ../Doc/library/struct.rst:220
msgid "``e``"
msgstr ""

#: ../Doc/library/struct.rst:220
msgid "\\(7)"
msgstr ""

#: ../Doc/library/struct.rst:220 ../Doc/library/struct.rst:222
#: ../Doc/library/struct.rst:224
msgid "float"
msgstr ""

#: ../Doc/library/struct.rst:220 ../Doc/library/struct.rst:222
#: ../Doc/library/struct.rst:224
msgid "\\(5)"
msgstr ""

#: ../Doc/library/struct.rst:222
msgid "``f``"
msgstr ""

#: ../Doc/library/struct.rst:222
msgid ":c:type:`float`"
msgstr ""

#: ../Doc/library/struct.rst:224
msgid "``d``"
msgstr ""

#: ../Doc/library/struct.rst:224
msgid ":c:type:`double`"
msgstr ""

#: ../Doc/library/struct.rst:226
msgid "``s``"
msgstr ""

#: ../Doc/library/struct.rst:226 ../Doc/library/struct.rst:228
msgid ":c:type:`char[]`"
msgstr ""

#: ../Doc/library/struct.rst:226 ../Doc/library/struct.rst:228
msgid "bytes"
msgstr ""

#: ../Doc/library/struct.rst:228
msgid "``p``"
msgstr ""

#: ../Doc/library/struct.rst:230
msgid "``P``"
msgstr ""

#: ../Doc/library/struct.rst:230
msgid ":c:type:`void \\*`"
msgstr ""

#: ../Doc/library/struct.rst:230
msgid "\\(6)"
msgstr ""

#: ../Doc/library/struct.rst:233
msgid "Added support for the ``'n'`` and ``'N'`` formats."
msgstr ""

#: ../Doc/library/struct.rst:236
msgid "Added support for the ``'e'`` format."
msgstr ""

#: ../Doc/library/struct.rst:243
msgid ""
"The ``'?'`` conversion code corresponds to the :c:type:`_Bool` type "
"defined by C99. If this type is not available, it is simulated using a "
":c:type:`char`. In standard mode, it is always represented by one byte."
msgstr ""

#: ../Doc/library/struct.rst:248
msgid ""
"The ``'q'`` and ``'Q'`` conversion codes are available in native mode "
"only if the platform C compiler supports C :c:type:`long long`, or, on "
"Windows, :c:type:`__int64`.  They are always available in standard modes."
msgstr ""

#: ../Doc/library/struct.rst:253
msgid ""
"When attempting to pack a non-integer using any of the integer conversion"
" codes, if the non-integer has a :meth:`__index__` method then that "
"method is called to convert the argument to an integer before packing."
msgstr ""

#: ../Doc/library/struct.rst:257
msgid "Use of the :meth:`__index__` method for non-integers is new in 3.2."
msgstr ""

#: ../Doc/library/struct.rst:261
msgid ""
"The ``'n'`` and ``'N'`` conversion codes are only available for the "
"native size (selected as the default or with the ``'@'`` byte order "
"character). For the standard size, you can use whichever of the other "
"integer formats fits your application."
msgstr ""

#: ../Doc/library/struct.rst:267
msgid ""
"For the ``'f'``, ``'d'`` and ``'e'`` conversion codes, the packed "
"representation uses the IEEE 754 binary32, binary64 or binary16 format "
"(for ``'f'``, ``'d'`` or ``'e'`` respectively), regardless of the "
"floating-point format used by the platform."
msgstr ""

#: ../Doc/library/struct.rst:273
msgid ""
"The ``'P'`` format character is only available for the native byte "
"ordering (selected as the default or with the ``'@'`` byte order "
"character). The byte order character ``'='`` chooses to use little- or "
"big-endian ordering based on the host system. The struct module does not "
"interpret this as native ordering, so the ``'P'`` format is not "
"available."
msgstr ""

#: ../Doc/library/struct.rst:280
msgid ""
"The IEEE 754 binary16 \"half precision\" type was introduced in the 2008 "
"revision of the `IEEE 754 standard <ieee 754 standard_>`_. It has a sign "
"bit, a 5-bit exponent and 11-bit precision (with 10 bits explicitly "
"stored), and can represent numbers between approximately ``6.1e-05`` and "
"``6.5e+04`` at full precision. This type is not widely supported by C "
"compilers: on a typical machine, an unsigned short can be used for "
"storage, but not for math operations. See the Wikipedia page on the "
"`half-precision floating-point format <half precision format_>`_ for more"
" information."
msgstr ""

#: ../Doc/library/struct.rst:290
msgid ""
"A format character may be preceded by an integral repeat count.  For "
"example, the format string ``'4h'`` means exactly the same as ``'hhhh'``."
msgstr ""

#: ../Doc/library/struct.rst:293
msgid ""
"Whitespace characters between formats are ignored; a count and its format"
" must not contain whitespace though."
msgstr ""

#: ../Doc/library/struct.rst:296
msgid ""
"For the ``'s'`` format character, the count is interpreted as the length "
"of the bytes, not a repeat count like for the other format characters; "
"for example, ``'10s'`` means a single 10-byte string, while ``'10c'`` "
"means 10 characters. If a count is not given, it defaults to 1.  For "
"packing, the string is truncated or padded with null bytes as appropriate"
" to make it fit. For unpacking, the resulting bytes object always has "
"exactly the specified number of bytes.  As a special case, ``'0s'`` means"
" a single, empty string (while ``'0c'`` means 0 characters)."
msgstr ""

#: ../Doc/library/struct.rst:305
msgid ""
"When packing a value ``x`` using one of the integer formats (``'b'``, "
"``'B'``, ``'h'``, ``'H'``, ``'i'``, ``'I'``, ``'l'``, ``'L'``, ``'q'``, "
"``'Q'``), if ``x`` is outside the valid range for that format then "
":exc:`struct.error` is raised."
msgstr ""

#: ../Doc/library/struct.rst:310
msgid ""
"In 3.0, some of the integer formats wrapped out-of-range values and "
"raised :exc:`DeprecationWarning` instead of :exc:`struct.error`."
msgstr ""

#: ../Doc/library/struct.rst:314
msgid ""
"The ``'p'`` format character encodes a \"Pascal string\", meaning a short"
" variable-length string stored in a *fixed number of bytes*, given by the"
" count. The first byte stored is the length of the string, or 255, "
"whichever is smaller.  The bytes of the string follow.  If the string "
"passed in to :func:`pack` is too long (longer than the count minus 1), "
"only the leading ``count-1`` bytes of the string are stored.  If the "
"string is shorter than ``count-1``, it is padded with null bytes so that "
"exactly count bytes in all are used.  Note that for :func:`unpack`, the "
"``'p'`` format character consumes ``count`` bytes, but that the string "
"returned can never contain more than 255 bytes."
msgstr ""

#: ../Doc/library/struct.rst:325
msgid ""
"For the ``'?'`` format character, the return value is either "
":const:`True` or :const:`False`. When packing, the truth value of the "
"argument object is used. Either 0 or 1 in the native or standard bool "
"representation will be packed, and any non-zero value will be ``True`` "
"when unpacking."
msgstr ""

#: ../Doc/library/struct.rst:335
msgid "Examples"
msgstr ""

#: ../Doc/library/struct.rst:338
msgid ""
"All examples assume a native byte order, size, and alignment with a big-"
"endian machine."
msgstr ""

#: ../Doc/library/struct.rst:341
msgid "A basic example of packing/unpacking three integers::"
msgstr ""

#: ../Doc/library/struct.rst:351
msgid ""
"Unpacked fields can be named by assigning them to variables or by "
"wrapping the result in a named tuple::"
msgstr ""

#: ../Doc/library/struct.rst:362
msgid ""
"The ordering of format characters may have an impact on size since the "
"padding needed to satisfy alignment requirements is different::"
msgstr ""

#: ../Doc/library/struct.rst:374
msgid ""
"The following format ``'llh0l'`` specifies two pad bytes at the end, "
"assuming longs are aligned on 4-byte boundaries::"
msgstr ""

#: ../Doc/library/struct.rst:380
msgid ""
"This only works when native size and alignment are in effect; standard "
"size and alignment does not enforce any alignment."
msgstr ""

#: ../Doc/library/struct.rst:387
msgid "Module :mod:`array`"
msgstr ""

#: ../Doc/library/struct.rst:387
msgid "Packed binary storage of homogeneous data."
msgstr ""

#: ../Doc/library/struct.rst:389
msgid "Module :mod:`xdrlib`"
msgstr ""

#: ../Doc/library/struct.rst:390
msgid "Packing and unpacking of XDR data."
msgstr ""

#: ../Doc/library/struct.rst:396
msgid "Classes"
msgstr ""

#: ../Doc/library/struct.rst:398
msgid "The :mod:`struct` module also defines the following type:"
msgstr ""

#: ../Doc/library/struct.rst:403
msgid ""
"Return a new Struct object which writes and reads binary data according "
"to the format string *format*.  Creating a Struct object once and calling"
" its methods is more efficient than calling the :mod:`struct` functions "
"with the same format since the format string only needs to be compiled "
"once."
msgstr ""

#: ../Doc/library/struct.rst:409
msgid "Compiled Struct objects support the following methods and attributes:"
msgstr ""

#: ../Doc/library/struct.rst:413
msgid ""
"Identical to the :func:`pack` function, using the compiled format. "
"(``len(result)`` will equal :attr:`size`.)"
msgstr ""

#: ../Doc/library/struct.rst:419
msgid "Identical to the :func:`pack_into` function, using the compiled format."
msgstr ""

#: ../Doc/library/struct.rst:424
msgid ""
"Identical to the :func:`unpack` function, using the compiled format. The "
"buffer's size in bytes must equal :attr:`size`."
msgstr ""

#: ../Doc/library/struct.rst:430
msgid ""
"Identical to the :func:`unpack_from` function, using the compiled format."
" The buffer's size in bytes, minus *offset*, must be at least "
":attr:`size`."
msgstr ""

#: ../Doc/library/struct.rst:437
msgid ""
"Identical to the :func:`iter_unpack` function, using the compiled format."
" The buffer's size in bytes must be a multiple of :attr:`size`."
msgstr ""

#: ../Doc/library/struct.rst:444
msgid "The format string used to construct this Struct object."
msgstr ""

#: ../Doc/library/struct.rst:446
msgid "The format string type is now :class:`str` instead of :class:`bytes`."
msgstr ""

#: ../Doc/library/struct.rst:451
msgid ""
"The calculated size of the struct (and hence of the bytes object produced"
" by the :meth:`pack` method) corresponding to :attr:`format`."
msgstr ""

#~ msgid ""
#~ "Return a bytes object containing the "
#~ "values *v1*, *v2*, ... packed according"
#~ " to the format string *fmt*.  The "
#~ "arguments must match the values required"
#~ " by the format exactly."
#~ msgstr ""

#~ msgid ""
#~ "Pack the values *v1*, *v2*, ... "
#~ "according to the format string *fmt* "
#~ "and write the packed bytes into "
#~ "the writable buffer *buffer* starting at"
#~ " position *offset*.  Note that *offset* "
#~ "is a required argument."
#~ msgstr ""

#~ msgid ""
#~ "Unpack from the buffer *buffer* "
#~ "(presumably packed by ``pack(fmt, ...)``) "
#~ "according to the format string *fmt*."
#~ "  The result is a tuple even if"
#~ " it contains exactly one item.  The"
#~ " buffer's size in bytes must match"
#~ " the size required by the format, "
#~ "as reflected by :func:`calcsize`."
#~ msgstr ""

#~ msgid ""
#~ "Unpack from *buffer* starting at "
#~ "position *offset*, according to the "
#~ "format string *fmt*.  The result is "
#~ "a tuple even if it contains "
#~ "exactly one item.  The buffer's size "
#~ "in bytes, minus *offset*, must be "
#~ "at least the size required by the"
#~ " format, as reflected by :func:`calcsize`."
#~ msgstr ""

#~ msgid ""
#~ "Iteratively unpack from the buffer "
#~ "*buffer* according to the format string"
#~ " *fmt*.  This function returns an "
#~ "iterator which will read equally-sized"
#~ " chunks from the buffer until all "
#~ "its contents have been consumed.  The"
#~ " buffer's size in bytes must be "
#~ "a multiple of the size required by"
#~ " the format, as reflected by "
#~ ":func:`calcsize`."
#~ msgstr ""

#~ msgid ""
#~ "Return the size of the struct (and"
#~ " hence of the bytes object produced"
#~ " by ``pack(fmt, ...)``) corresponding to"
#~ " the format string *fmt*."
#~ msgstr ""

