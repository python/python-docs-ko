# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-30 09:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/asyncio-sync.rst:5
msgid "Synchronization primitives"
msgstr ""

#: ../Doc/library/asyncio-sync.rst:7
msgid "**Source code:** :source:`Lib/asyncio/locks.py`"
msgstr ""

#: ../Doc/library/asyncio-sync.rst:9
msgid "Locks:"
msgstr ""

#: ../Doc/library/asyncio-sync.rst:11
msgid ":class:`Lock`"
msgstr ""

#: ../Doc/library/asyncio-sync.rst:12
msgid ":class:`Event`"
msgstr ""

#: ../Doc/library/asyncio-sync.rst:13
msgid ":class:`Condition`"
msgstr ""

#: ../Doc/library/asyncio-sync.rst:15
msgid "Semaphores:"
msgstr ""

#: ../Doc/library/asyncio-sync.rst:17
msgid ":class:`Semaphore`"
msgstr ""

#: ../Doc/library/asyncio-sync.rst:18
msgid ":class:`BoundedSemaphore`"
msgstr ""

#: ../Doc/library/asyncio-sync.rst:20
msgid ""
"asyncio lock API was designed to be close to classes of the "
":mod:`threading` module (:class:`~threading.Lock`, "
":class:`~threading.Event`, :class:`~threading.Condition`, "
":class:`~threading.Semaphore`, :class:`~threading.BoundedSemaphore`), but"
" it has no *timeout* parameter. The :func:`asyncio.wait_for` function can"
" be used to cancel a task after a timeout."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:28
msgid "Lock"
msgstr ""

#: ../Doc/library/asyncio-sync.rst:32
msgid "Primitive lock objects."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:34
msgid ""
"A primitive lock is a synchronization primitive that is not owned by a "
"particular coroutine when locked.  A primitive lock is in one of two "
"states, 'locked' or 'unlocked'."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:38
msgid ""
"The lock is created in the unlocked state. It has two basic methods, "
":meth:`acquire` and :meth:`release`. When the state is unlocked, "
"acquire() changes the state to locked and returns immediately.  When the "
"state is locked, acquire() blocks until a call to release() in another "
"coroutine changes it to unlocked, then the acquire() call resets it to "
"locked and returns.  The release() method should only be called in the "
"locked state; it changes the state to unlocked and returns immediately.  "
"If an attempt is made to release an unlocked lock, a :exc:`RuntimeError` "
"will be raised."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:48
msgid ""
"When more than one coroutine is blocked in acquire() waiting for the "
"state to turn to unlocked, only one coroutine proceeds when a release() "
"call resets the state to unlocked; first coroutine which is blocked in "
"acquire() is being processed."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:53
msgid ":meth:`acquire` is a coroutine and should be called with ``await``."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:55
msgid "Locks support the :ref:`context management protocol <async-with-locks>`."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:57 ../Doc/library/asyncio-sync.rst:97
#: ../Doc/library/asyncio-sync.rst:145 ../Doc/library/asyncio-sync.rst:237
#: ../Doc/library/asyncio-sync.rst:274
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:61
msgid "Return ``True`` if the lock is acquired."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:65
msgid "Acquire a lock."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:67 ../Doc/library/asyncio-sync.rst:151
msgid ""
"This method blocks until the lock is unlocked, then sets it to locked and"
" returns ``True``."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:70 ../Doc/library/asyncio-sync.rst:123
#: ../Doc/library/asyncio-sync.rst:154 ../Doc/library/asyncio-sync.rst:206
#: ../Doc/library/asyncio-sync.rst:215 ../Doc/library/asyncio-sync.rst:248
msgid "This method is a :ref:`coroutine <coroutine>`."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:74
msgid "Release a lock."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:76
msgid ""
"When the lock is locked, reset it to unlocked, and return.  If any other "
"coroutines are blocked waiting for the lock to become unlocked, allow "
"exactly one of them to proceed."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:80 ../Doc/library/asyncio-sync.rst:190
msgid "When invoked on an unlocked lock, a :exc:`RuntimeError` is raised."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:82 ../Doc/library/asyncio-sync.rst:192
msgid "There is no return value."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:86
msgid "Event"
msgstr ""

#: ../Doc/library/asyncio-sync.rst:90
msgid ""
"An Event implementation, asynchronous equivalent to "
":class:`threading.Event`."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:92
msgid ""
"Class implementing event objects. An event manages a flag that can be set"
" to true with the :meth:`set` method and reset to false with the "
":meth:`clear` method.  The :meth:`wait` method blocks until the flag is "
"true. The flag is initially false."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:101
msgid ""
"Reset the internal flag to false. Subsequently, coroutines calling "
":meth:`wait` will block until :meth:`set` is called to set the internal "
"flag to true again."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:107
msgid "Return ``True`` if and only if the internal flag is true."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:111
msgid ""
"Set the internal flag to true. All coroutines waiting for it to become "
"true are awakened. Coroutine that call :meth:`wait` once the flag is true"
" will not block at all."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:117
msgid "Block until the internal flag is true."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:119
msgid ""
"If the internal flag is true on entry, return ``True`` immediately. "
"Otherwise, block until another coroutine calls :meth:`set` to set the "
"flag to true, then return ``True``."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:127
msgid "Condition"
msgstr ""

#: ../Doc/library/asyncio-sync.rst:131
msgid ""
"A Condition implementation, asynchronous equivalent to "
":class:`threading.Condition`."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:134
msgid ""
"This class implements condition variable objects. A condition variable "
"allows one or more coroutines to wait until they are notified by another "
"coroutine."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:138
msgid ""
"If the *lock* argument is given and not ``None``, it must be a "
":class:`Lock` object, and it is used as the underlying lock.  Otherwise, "
"a new :class:`Lock` object is created and used as the underlying lock."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:142
msgid ""
"Conditions support the :ref:`context management protocol <async-with-"
"locks>`."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:149
msgid "Acquire the underlying lock."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:158
msgid ""
"By default, wake up one coroutine waiting on this condition, if any. If "
"the calling coroutine has not acquired the lock when this method is "
"called, a :exc:`RuntimeError` is raised."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:162
msgid ""
"This method wakes up at most *n* of the coroutines waiting for the "
"condition variable; it is a no-op if no coroutines are waiting."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:167
msgid ""
"An awakened coroutine does not actually return from its :meth:`wait` call"
" until it can reacquire the lock. Since :meth:`notify` does not release "
"the lock, its caller should."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:173
msgid "Return ``True`` if the underlying lock is acquired."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:177
msgid ""
"Wake up all coroutines waiting on this condition. This method acts like "
":meth:`notify`, but wakes up all waiting coroutines instead of one. If "
"the calling coroutine has not acquired the lock when this method is "
"called, a :exc:`RuntimeError` is raised."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:184
msgid "Release the underlying lock."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:186
msgid ""
"When the lock is locked, reset it to unlocked, and return. If any other "
"coroutines are blocked waiting for the lock to become unlocked, allow "
"exactly one of them to proceed."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:196
msgid "Wait until notified."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:198
msgid ""
"If the calling coroutine has not acquired the lock when this method is "
"called, a :exc:`RuntimeError` is raised."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:201
msgid ""
"This method releases the underlying lock, and then blocks until it is "
"awakened by a :meth:`notify` or :meth:`notify_all` call for the same "
"condition variable in another coroutine.  Once awakened, it re-acquires "
"the lock and returns ``True``."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:210
msgid "Wait until a predicate becomes true."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:212
msgid ""
"The predicate should be a callable which result will be interpreted as a "
"boolean value. The final predicate value is the return value."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:219
msgid "Semaphore"
msgstr ""

#: ../Doc/library/asyncio-sync.rst:223
msgid "A Semaphore implementation."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:225
msgid ""
"A semaphore manages an internal counter which is decremented by each "
":meth:`acquire` call and incremented by each :meth:`release` call. The "
"counter can never go below zero; when :meth:`acquire` finds that it is "
"zero, it blocks, waiting until some other coroutine calls "
":meth:`release`."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:230
msgid ""
"The optional argument gives the initial value for the internal counter; "
"it defaults to ``1``. If the value given is less than ``0``, "
":exc:`ValueError` is raised."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:234
msgid ""
"Semaphores support the :ref:`context management protocol <async-with-"
"locks>`."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:241
msgid "Acquire a semaphore."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:243
msgid ""
"If the internal counter is larger than zero on entry, decrement it by one"
" and return ``True`` immediately.  If it is zero on entry, block, waiting"
" until some other coroutine has called :meth:`release` to make it larger "
"than ``0``, and then return ``True``."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:252
msgid "Returns ``True`` if semaphore can not be acquired immediately."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:256
msgid ""
"Release a semaphore, incrementing the internal counter by one. When it "
"was zero on entry and another coroutine is waiting for it to become "
"larger than zero again, wake up that coroutine."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:262
msgid "BoundedSemaphore"
msgstr ""

#: ../Doc/library/asyncio-sync.rst:266
msgid "A bounded semaphore implementation. Inherit from :class:`Semaphore`."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:268
msgid ""
"This raises :exc:`ValueError` in :meth:`~Semaphore.release` if it would "
"increase the value above the initial value."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:271
msgid ""
"Bounded semapthores support the :ref:`context management protocol <async-"
"with-locks>`."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:280
msgid ""
"Using locks, conditions and semaphores in the :keyword:`async with` "
"statement"
msgstr ""

#: ../Doc/library/asyncio-sync.rst:282
msgid ""
":class:`Lock`, :class:`Condition`, :class:`Semaphore`, and "
":class:`BoundedSemaphore` objects can be used in :keyword:`async with` "
"statements."
msgstr ""

#: ../Doc/library/asyncio-sync.rst:286
msgid ""
"The :meth:`acquire` method will be called when the block is entered, and "
":meth:`release` will be called when the block is exited.  Hence, the "
"following snippet::"
msgstr ""

#: ../Doc/library/asyncio-sync.rst:293
msgid "is equivalent to::"
msgstr ""

#: ../Doc/library/asyncio-sync.rst:303
msgid ""
"Lock acquiring using ``await lock`` or ``yield from lock`` and "
":keyword:`with` statement (``with await lock``, ``with (yield from "
"lock)``) are deprecated."
msgstr ""

#~ msgid "Locks"
#~ msgstr ""

#~ msgid ""
#~ "It is created in the unlocked "
#~ "state.  It has two basic methods, "
#~ ":meth:`acquire` and :meth:`release`.  When the"
#~ " state is unlocked, acquire() changes "
#~ "the state to locked and returns "
#~ "immediately.  When the state is locked,"
#~ " acquire() blocks until a call to "
#~ "release() in another coroutine changes "
#~ "it to unlocked, then the acquire() "
#~ "call resets it to locked and "
#~ "returns.  The release() method should "
#~ "only be called in the locked "
#~ "state; it changes the state to "
#~ "unlocked and returns immediately.  If an"
#~ " attempt is made to release an "
#~ "unlocked lock, a :exc:`RuntimeError` will "
#~ "be raised."
#~ msgstr ""

#~ msgid ""
#~ ":meth:`acquire` is a coroutine and "
#~ "should be called with ``yield from``."
#~ msgstr ""

#~ msgid ""
#~ "Locks also support the context "
#~ "management protocol.  ``(yield from lock)``"
#~ " should be used as the context "
#~ "manager expression."
#~ msgstr ""

#~ msgid "Usage::"
#~ msgstr ""

#~ msgid "Context manager usage::"
#~ msgstr ""

#~ msgid "Lock objects can be tested for locking state::"
#~ msgstr ""

#~ msgid "Semaphores"
#~ msgstr ""

#~ msgid "Semaphores also support the context management protocol."
#~ msgstr ""

