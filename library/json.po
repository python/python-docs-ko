# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-08 11:36+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/json.rst:2
msgid ":mod:`json` --- JSON encoder and decoder"
msgstr ""

#: ../Doc/library/json.rst:10
msgid "**Source code:** :source:`Lib/json/__init__.py`"
msgstr ""

#: ../Doc/library/json.rst:14
msgid ""
"`JSON (JavaScript Object Notation) <http://json.org>`_, specified by "
":rfc:`7159` (which obsoletes :rfc:`4627`) and by `ECMA-404 <http://www"
".ecma-international.org/publications/standards/Ecma-404.htm>`_, is a "
"lightweight data interchange format inspired by `JavaScript "
"<https://en.wikipedia.org/wiki/JavaScript>`_ object literal syntax "
"(although it is not a strict subset of JavaScript [#rfc-errata]_ )."
msgstr ""

#: ../Doc/library/json.rst:21
msgid ""
":mod:`json` exposes an API familiar to users of the standard library "
":mod:`marshal` and :mod:`pickle` modules."
msgstr ""

#: ../Doc/library/json.rst:24
msgid "Encoding basic Python object hierarchies::"
msgstr ""

#: ../Doc/library/json.rst:43
msgid "Compact encoding::"
msgstr ""

#: ../Doc/library/json.rst:49
msgid "Pretty printing::"
msgstr ""

#: ../Doc/library/json.rst:58
msgid "Decoding JSON::"
msgstr ""

#: ../Doc/library/json.rst:70
msgid "Specializing JSON object decoding::"
msgstr ""

#: ../Doc/library/json.rst:85
msgid "Extending :class:`JSONEncoder`::"
msgstr ""

#: ../Doc/library/json.rst:103
msgid "Using :mod:`json.tool` from the shell to validate and pretty-print:"
msgstr ""

#: ../Doc/library/json.rst:114
msgid "See :ref:`json-commandline` for detailed documentation."
msgstr ""

#: ../Doc/library/json.rst:118
msgid ""
"JSON is a subset of `YAML <http://yaml.org/>`_ 1.2.  The JSON produced by"
" this module's default settings (in particular, the default *separators* "
"value) is also a subset of YAML 1.0 and 1.1.  This module can thus also "
"be used as a YAML serializer."
msgstr ""

#: ../Doc/library/json.rst:125
msgid "Basic Usage"
msgstr ""

#: ../Doc/library/json.rst:132
msgid ""
"Serialize *obj* as a JSON formatted stream to *fp* (a "
"``.write()``-supporting :term:`file-like object`) using this "
":ref:`conversion table <py-to-json-table>`."
msgstr ""

#: ../Doc/library/json.rst:136
msgid ""
"If *skipkeys* is true (default: ``False``), then dict keys that are not "
"of a basic type (:class:`str`, :class:`int`, :class:`float`, "
":class:`bool`, ``None``) will be skipped instead of raising a "
":exc:`TypeError`."
msgstr ""

#: ../Doc/library/json.rst:140
msgid ""
"The :mod:`json` module always produces :class:`str` objects, not "
":class:`bytes` objects. Therefore, ``fp.write()`` must support "
":class:`str` input."
msgstr ""

#: ../Doc/library/json.rst:144 ../Doc/library/json.rst:417
msgid ""
"If *ensure_ascii* is true (the default), the output is guaranteed to have"
" all incoming non-ASCII characters escaped.  If *ensure_ascii* is false, "
"these characters will be output as-is."
msgstr ""

#: ../Doc/library/json.rst:148
msgid ""
"If *check_circular* is false (default: ``True``), then the circular "
"reference check for container types will be skipped and a circular "
"reference will result in an :exc:`OverflowError` (or worse)."
msgstr ""

#: ../Doc/library/json.rst:152
msgid ""
"If *allow_nan* is false (default: ``True``), then it will be a "
":exc:`ValueError` to serialize out of range :class:`float` values "
"(``nan``, ``inf``, ``-inf``) in strict compliance of the JSON "
"specification. If *allow_nan* is true, their JavaScript equivalents "
"(``NaN``, ``Infinity``, ``-Infinity``) will be used."
msgstr ""

#: ../Doc/library/json.rst:158 ../Doc/library/json.rst:436
msgid ""
"If *indent* is a non-negative integer or string, then JSON array elements"
" and object members will be pretty-printed with that indent level.  An "
"indent level of 0, negative, or ``\"\"`` will only insert newlines.  "
"``None`` (the default) selects the most compact representation. Using a "
"positive integer indent indents that many spaces per level.  If *indent* "
"is a string (such as ``\"\\t\"``), that string is used to indent each "
"level."
msgstr ""

#: ../Doc/library/json.rst:165 ../Doc/library/json.rst:443
msgid "Allow strings for *indent* in addition to integers."
msgstr ""

#: ../Doc/library/json.rst:168 ../Doc/library/json.rst:446
msgid ""
"If specified, *separators* should be an ``(item_separator, "
"key_separator)`` tuple.  The default is ``(', ', ': ')`` if *indent* is "
"``None`` and ``(',', ': ')`` otherwise.  To get the most compact JSON "
"representation, you should specify ``(',', ':')`` to eliminate "
"whitespace."
msgstr ""

#: ../Doc/library/json.rst:173 ../Doc/library/json.rst:451
msgid "Use ``(',', ': ')`` as default if *indent* is not ``None``."
msgstr ""

#: ../Doc/library/json.rst:176 ../Doc/library/json.rst:454
msgid ""
"If specified, *default* should be a function that gets called for objects"
" that can't otherwise be serialized.  It should return a JSON encodable "
"version of the object or raise a :exc:`TypeError`.  If not specified, "
":exc:`TypeError` is raised."
msgstr ""

#: ../Doc/library/json.rst:181
msgid ""
"If *sort_keys* is true (default: ``False``), then the output of "
"dictionaries will be sorted by key."
msgstr ""

#: ../Doc/library/json.rst:184
msgid ""
"To use a custom :class:`JSONEncoder` subclass (e.g. one that overrides "
"the :meth:`default` method to serialize additional types), specify it "
"with the *cls* kwarg; otherwise :class:`JSONEncoder` is used."
msgstr ""

#: ../Doc/library/json.rst:188 ../Doc/library/json.rst:262
msgid ""
"All optional parameters are now :ref:`keyword-only <keyword-"
"only_parameter>`."
msgstr ""

#: ../Doc/library/json.rst:197
msgid ""
"Serialize *obj* to a JSON formatted :class:`str` using this "
":ref:`conversion table <py-to-json-table>`.  The arguments have the same "
"meaning as in :func:`dump`."
msgstr ""

#: ../Doc/library/json.rst:203
msgid ""
"Unlike :mod:`pickle` and :mod:`marshal`, JSON is not a framed protocol, "
"so trying to serialize multiple objects with repeated calls to "
":func:`dump` using the same *fp* will result in an invalid JSON file."
msgstr ""

#: ../Doc/library/json.rst:209
msgid ""
"Keys in key/value pairs of JSON are always of the type :class:`str`. When"
" a dictionary is converted into JSON, all the keys of the dictionary are "
"coerced to strings. As a result of this, if a dictionary is converted "
"into JSON and then back into a dictionary, the dictionary may not equal "
"the original one. That is, ``loads(dumps(x)) != x`` if x has non-string "
"keys."
msgstr ""

#: ../Doc/library/json.rst:218
msgid ""
"Deserialize *fp* (a ``.read()``-supporting :term:`text file` or "
":term:`binary file` containing a JSON document) to a Python object using "
"this :ref:`conversion table <json-to-py-table>`."
msgstr ""

#: ../Doc/library/json.rst:222
msgid ""
"*object_hook* is an optional function that will be called with the result"
" of any object literal decoded (a :class:`dict`).  The return value of "
"*object_hook* will be used instead of the :class:`dict`.  This feature "
"can be used to implement custom decoders (e.g. `JSON-RPC "
"<http://www.jsonrpc.org>`_ class hinting)."
msgstr ""

#: ../Doc/library/json.rst:228
msgid ""
"*object_pairs_hook* is an optional function that will be called with the "
"result of any object literal decoded with an ordered list of pairs.  The "
"return value of *object_pairs_hook* will be used instead of the "
":class:`dict`.  This feature can be used to implement custom decoders. If"
" *object_hook* is also defined, the *object_pairs_hook* takes priority."
msgstr ""

#: ../Doc/library/json.rst:234 ../Doc/library/json.rst:331
msgid "Added support for *object_pairs_hook*."
msgstr ""

#: ../Doc/library/json.rst:237 ../Doc/library/json.rst:334
msgid ""
"*parse_float*, if specified, will be called with the string of every JSON"
" float to be decoded.  By default, this is equivalent to "
"``float(num_str)``. This can be used to use another datatype or parser "
"for JSON floats (e.g. :class:`decimal.Decimal`)."
msgstr ""

#: ../Doc/library/json.rst:242 ../Doc/library/json.rst:339
msgid ""
"*parse_int*, if specified, will be called with the string of every JSON "
"int to be decoded.  By default, this is equivalent to ``int(num_str)``.  "
"This can be used to use another datatype or parser for JSON integers "
"(e.g. :class:`float`)."
msgstr ""

#: ../Doc/library/json.rst:247 ../Doc/library/json.rst:344
msgid ""
"*parse_constant*, if specified, will be called with one of the following "
"strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``. This can be used to "
"raise an exception if invalid JSON numbers are encountered."
msgstr ""

#: ../Doc/library/json.rst:252
msgid "*parse_constant* doesn't get called on 'null', 'true', 'false' anymore."
msgstr ""

#: ../Doc/library/json.rst:255
msgid ""
"To use a custom :class:`JSONDecoder` subclass, specify it with the "
"``cls`` kwarg; otherwise :class:`JSONDecoder` is used.  Additional "
"keyword arguments will be passed to the constructor of the class."
msgstr ""

#: ../Doc/library/json.rst:259 ../Doc/library/json.rst:278
#: ../Doc/library/json.rst:354
msgid ""
"If the data being deserialized is not a valid JSON document, a "
":exc:`JSONDecodeError` will be raised."
msgstr ""

#: ../Doc/library/json.rst:265
msgid ""
"*fp* can now be a :term:`binary file`. The input encoding should be "
"UTF-8, UTF-16 or UTF-32."
msgstr ""

#: ../Doc/library/json.rst:271
msgid ""
"Deserialize *s* (a :class:`str`, :class:`bytes` or :class:`bytearray` "
"instance containing a JSON document) to a Python object using this "
":ref:`conversion table <json-to-py-table>`."
msgstr ""

#: ../Doc/library/json.rst:275
msgid ""
"The other arguments have the same meaning as in :func:`load`, except "
"*encoding* which is ignored and deprecated."
msgstr ""

#: ../Doc/library/json.rst:281
msgid ""
"*s* can now be of type :class:`bytes` or :class:`bytearray`. The input "
"encoding should be UTF-8, UTF-16 or UTF-32."
msgstr ""

#: ../Doc/library/json.rst:287
msgid "Encoders and Decoders"
msgstr ""

#: ../Doc/library/json.rst:291
msgid "Simple JSON decoder."
msgstr ""

#: ../Doc/library/json.rst:293
msgid "Performs the following translations in decoding by default:"
msgstr ""

#: ../Doc/library/json.rst:298 ../Doc/library/json.rst:387
msgid "JSON"
msgstr ""

#: ../Doc/library/json.rst:298 ../Doc/library/json.rst:387
msgid "Python"
msgstr ""

#: ../Doc/library/json.rst:300 ../Doc/library/json.rst:389
msgid "object"
msgstr ""

#: ../Doc/library/json.rst:300 ../Doc/library/json.rst:389
msgid "dict"
msgstr ""

#: ../Doc/library/json.rst:302 ../Doc/library/json.rst:391
msgid "array"
msgstr ""

#: ../Doc/library/json.rst:302
msgid "list"
msgstr ""

#: ../Doc/library/json.rst:304 ../Doc/library/json.rst:393
msgid "string"
msgstr ""

#: ../Doc/library/json.rst:304 ../Doc/library/json.rst:393
msgid "str"
msgstr ""

#: ../Doc/library/json.rst:306
msgid "number (int)"
msgstr ""

#: ../Doc/library/json.rst:306
msgid "int"
msgstr ""

#: ../Doc/library/json.rst:308
msgid "number (real)"
msgstr ""

#: ../Doc/library/json.rst:308
msgid "float"
msgstr ""

#: ../Doc/library/json.rst:310 ../Doc/library/json.rst:397
msgid "true"
msgstr ""

#: ../Doc/library/json.rst:310 ../Doc/library/json.rst:397
msgid "True"
msgstr ""

#: ../Doc/library/json.rst:312 ../Doc/library/json.rst:399
msgid "false"
msgstr ""

#: ../Doc/library/json.rst:312 ../Doc/library/json.rst:399
msgid "False"
msgstr ""

#: ../Doc/library/json.rst:314 ../Doc/library/json.rst:401
msgid "null"
msgstr ""

#: ../Doc/library/json.rst:314 ../Doc/library/json.rst:401
msgid "None"
msgstr ""

#: ../Doc/library/json.rst:317
msgid ""
"It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as their "
"corresponding ``float`` values, which is outside the JSON spec."
msgstr ""

#: ../Doc/library/json.rst:320
msgid ""
"*object_hook*, if specified, will be called with the result of every JSON"
" object decoded and its return value will be used in place of the given "
":class:`dict`.  This can be used to provide custom deserializations (e.g."
" to support JSON-RPC class hinting)."
msgstr ""

#: ../Doc/library/json.rst:325
msgid ""
"*object_pairs_hook*, if specified will be called with the result of every"
" JSON object decoded with an ordered list of pairs.  The return value of "
"*object_pairs_hook* will be used instead of the :class:`dict`.  This "
"feature can be used to implement custom decoders.  If *object_hook* is "
"also defined, the *object_pairs_hook* takes priority."
msgstr ""

#: ../Doc/library/json.rst:349
msgid ""
"If *strict* is false (``True`` is the default), then control characters "
"will be allowed inside strings.  Control characters in this context are "
"those with character codes in the 0--31 range, including ``'\\t'`` (tab),"
" ``'\\n'``, ``'\\r'`` and ``'\\0'``."
msgstr ""

#: ../Doc/library/json.rst:357 ../Doc/library/json.rst:459
msgid "All parameters are now :ref:`keyword-only <keyword-only_parameter>`."
msgstr ""

#: ../Doc/library/json.rst:362
msgid ""
"Return the Python representation of *s* (a :class:`str` instance "
"containing a JSON document)."
msgstr ""

#: ../Doc/library/json.rst:365
msgid ""
":exc:`JSONDecodeError` will be raised if the given JSON document is not "
"valid."
msgstr ""

#: ../Doc/library/json.rst:370
msgid ""
"Decode a JSON document from *s* (a :class:`str` beginning with a JSON "
"document) and return a 2-tuple of the Python representation and the index"
" in *s* where the document ended."
msgstr ""

#: ../Doc/library/json.rst:374
msgid ""
"This can be used to decode a JSON document from a string that may have "
"extraneous data at the end."
msgstr ""

#: ../Doc/library/json.rst:380
msgid "Extensible JSON encoder for Python data structures."
msgstr ""

#: ../Doc/library/json.rst:382
msgid "Supports the following objects and types by default:"
msgstr ""

#: ../Doc/library/json.rst:391
msgid "list, tuple"
msgstr ""

#: ../Doc/library/json.rst:395
msgid "int, float, int- & float-derived Enums"
msgstr ""

#: ../Doc/library/json.rst:395
msgid "number"
msgstr ""

#: ../Doc/library/json.rst:404
msgid "Added support for int- and float-derived Enum classes."
msgstr ""

#: ../Doc/library/json.rst:407
msgid ""
"To extend this to recognize other objects, subclass and implement a "
":meth:`default` method with another method that returns a serializable "
"object for ``o`` if possible, otherwise it should call the superclass "
"implementation (to raise :exc:`TypeError`)."
msgstr ""

#: ../Doc/library/json.rst:412
msgid ""
"If *skipkeys* is false (the default), then it is a :exc:`TypeError` to "
"attempt encoding of keys that are not :class:`str`, :class:`int`, "
":class:`float` or ``None``.  If *skipkeys* is true, such items are simply"
" skipped."
msgstr ""

#: ../Doc/library/json.rst:421
msgid ""
"If *check_circular* is true (the default), then lists, dicts, and custom "
"encoded objects will be checked for circular references during encoding "
"to prevent an infinite recursion (which would cause an "
":exc:`OverflowError`). Otherwise, no such check takes place."
msgstr ""

#: ../Doc/library/json.rst:426
msgid ""
"If *allow_nan* is true (the default), then ``NaN``, ``Infinity``, and "
"``-Infinity`` will be encoded as such.  This behavior is not JSON "
"specification compliant, but is consistent with most JavaScript based "
"encoders and decoders.  Otherwise, it will be a :exc:`ValueError` to "
"encode such floats."
msgstr ""

#: ../Doc/library/json.rst:432
msgid ""
"If *sort_keys* is true (default: ``False``), then the output of "
"dictionaries will be sorted by key; this is useful for regression tests "
"to ensure that JSON serializations can be compared on a day-to-day basis."
msgstr ""

#: ../Doc/library/json.rst:465
msgid ""
"Implement this method in a subclass such that it returns a serializable "
"object for *o*, or calls the base implementation (to raise a "
":exc:`TypeError`)."
msgstr ""

#: ../Doc/library/json.rst:469
msgid ""
"For example, to support arbitrary iterators, you could implement default "
"like this::"
msgstr ""

#: ../Doc/library/json.rst:485
msgid ""
"Return a JSON string representation of a Python data structure, *o*.  For"
" example::"
msgstr ""

#: ../Doc/library/json.rst:494
msgid ""
"Encode the given object, *o*, and yield each string representation as "
"available.  For example::"
msgstr ""

#: ../Doc/library/json.rst:502
msgid "Exceptions"
msgstr ""

#: ../Doc/library/json.rst:506
msgid "Subclass of :exc:`ValueError` with the following additional attributes:"
msgstr ""

#: ../Doc/library/json.rst:510
msgid "The unformatted error message."
msgstr ""

#: ../Doc/library/json.rst:514
msgid "The JSON document being parsed."
msgstr ""

#: ../Doc/library/json.rst:518
msgid "The start index of *doc* where parsing failed."
msgstr ""

#: ../Doc/library/json.rst:522
msgid "The line corresponding to *pos*."
msgstr ""

#: ../Doc/library/json.rst:526
msgid "The column corresponding to *pos*."
msgstr ""

#: ../Doc/library/json.rst:532
msgid "Standard Compliance and Interoperability"
msgstr ""

#: ../Doc/library/json.rst:534
msgid ""
"The JSON format is specified by :rfc:`7159` and by `ECMA-404 <http://www"
".ecma-international.org/publications/standards/Ecma-404.htm>`_. This "
"section details this module's level of compliance with the RFC. For "
"simplicity, :class:`JSONEncoder` and :class:`JSONDecoder` subclasses, and"
" parameters other than those explicitly mentioned, are not considered."
msgstr ""

#: ../Doc/library/json.rst:540
msgid ""
"This module does not comply with the RFC in a strict fashion, "
"implementing some extensions that are valid JavaScript but not valid "
"JSON.  In particular:"
msgstr ""

#: ../Doc/library/json.rst:543
msgid "Infinite and NaN number values are accepted and output;"
msgstr ""

#: ../Doc/library/json.rst:544
msgid ""
"Repeated names within an object are accepted, and only the value of the "
"last name-value pair is used."
msgstr ""

#: ../Doc/library/json.rst:547
msgid ""
"Since the RFC permits RFC-compliant parsers to accept input texts that "
"are not RFC-compliant, this module's deserializer is technically RFC-"
"compliant under default settings."
msgstr ""

#: ../Doc/library/json.rst:552
msgid "Character Encodings"
msgstr ""

#: ../Doc/library/json.rst:554
msgid ""
"The RFC requires that JSON be represented using either UTF-8, UTF-16, or "
"UTF-32, with UTF-8 being the recommended default for maximum "
"interoperability."
msgstr ""

#: ../Doc/library/json.rst:557
msgid ""
"As permitted, though not required, by the RFC, this module's serializer "
"sets *ensure_ascii=True* by default, thus escaping the output so that the"
" resulting strings only contain ASCII characters."
msgstr ""

#: ../Doc/library/json.rst:561
msgid ""
"Other than the *ensure_ascii* parameter, this module is defined strictly "
"in terms of conversion between Python objects and :class:`Unicode strings"
" <str>`, and thus does not otherwise directly address the issue of "
"character encodings."
msgstr ""

#: ../Doc/library/json.rst:566
msgid ""
"The RFC prohibits adding a byte order mark (BOM) to the start of a JSON "
"text, and this module's serializer does not add a BOM to its output. The "
"RFC permits, but does not require, JSON deserializers to ignore an "
"initial BOM in their input.  This module's deserializer raises a "
":exc:`ValueError` when an initial BOM is present."
msgstr ""

#: ../Doc/library/json.rst:572
msgid ""
"The RFC does not explicitly forbid JSON strings which contain byte "
"sequences that don't correspond to valid Unicode characters (e.g. "
"unpaired UTF-16 surrogates), but it does note that they may cause "
"interoperability problems. By default, this module accepts and outputs "
"(when present in the original :class:`str`) code points for such "
"sequences."
msgstr ""

#: ../Doc/library/json.rst:580
msgid "Infinite and NaN Number Values"
msgstr ""

#: ../Doc/library/json.rst:582
msgid ""
"The RFC does not permit the representation of infinite or NaN number "
"values. Despite that, by default, this module accepts and outputs "
"``Infinity``, ``-Infinity``, and ``NaN`` as if they were valid JSON "
"number literal values::"
msgstr ""

#: ../Doc/library/json.rst:597
msgid ""
"In the serializer, the *allow_nan* parameter can be used to alter this "
"behavior.  In the deserializer, the *parse_constant* parameter can be "
"used to alter this behavior."
msgstr ""

#: ../Doc/library/json.rst:603
msgid "Repeated Names Within an Object"
msgstr ""

#: ../Doc/library/json.rst:605
msgid ""
"The RFC specifies that the names within a JSON object should be unique, "
"but does not mandate how repeated names in JSON objects should be "
"handled.  By default, this module does not raise an exception; instead, "
"it ignores all but the last name-value pair for a given name::"
msgstr ""

#: ../Doc/library/json.rst:614
msgid "The *object_pairs_hook* parameter can be used to alter this behavior."
msgstr ""

#: ../Doc/library/json.rst:618
msgid "Top-level Non-Object, Non-Array Values"
msgstr ""

#: ../Doc/library/json.rst:620
msgid ""
"The old version of JSON specified by the obsolete :rfc:`4627` required "
"that the top-level value of a JSON text must be either a JSON object or "
"array (Python :class:`dict` or :class:`list`), and could not be a JSON "
"null, boolean, number, or string value.  :rfc:`7159` removed that "
"restriction, and this module does not and has never implemented that "
"restriction in either its serializer or its deserializer."
msgstr ""

#: ../Doc/library/json.rst:627
msgid ""
"Regardless, for maximum interoperability, you may wish to voluntarily "
"adhere to the restriction yourself."
msgstr ""

#: ../Doc/library/json.rst:632
msgid "Implementation Limitations"
msgstr ""

#: ../Doc/library/json.rst:634
msgid "Some JSON deserializer implementations may set limits on:"
msgstr ""

#: ../Doc/library/json.rst:636
msgid "the size of accepted JSON texts"
msgstr ""

#: ../Doc/library/json.rst:637
msgid "the maximum level of nesting of JSON objects and arrays"
msgstr ""

#: ../Doc/library/json.rst:638
msgid "the range and precision of JSON numbers"
msgstr ""

#: ../Doc/library/json.rst:639
msgid "the content and maximum length of JSON strings"
msgstr ""

#: ../Doc/library/json.rst:641
msgid ""
"This module does not impose any such limits beyond those of the relevant "
"Python datatypes themselves or the Python interpreter itself."
msgstr ""

#: ../Doc/library/json.rst:644
msgid ""
"When serializing to JSON, beware any such limitations in applications "
"that may consume your JSON.  In particular, it is common for JSON numbers"
" to be deserialized into IEEE 754 double precision numbers and thus "
"subject to that representation's range and precision limitations.  This "
"is especially relevant when serializing Python :class:`int` values of "
"extremely large magnitude, or when serializing instances of \"exotic\" "
"numerical types such as :class:`decimal.Decimal`."
msgstr ""

#: ../Doc/library/json.rst:655
msgid "Command Line Interface"
msgstr ""

#: ../Doc/library/json.rst:660
msgid "**Source code:** :source:`Lib/json/tool.py`"
msgstr ""

#: ../Doc/library/json.rst:664
msgid ""
"The :mod:`json.tool` module provides a simple command line interface to "
"validate and pretty-print JSON objects."
msgstr ""

#: ../Doc/library/json.rst:667
msgid ""
"If the optional ``infile`` and ``outfile`` arguments are not specified, "
":attr:`sys.stdin` and :attr:`sys.stdout` will be used respectively:"
msgstr ""

#: ../Doc/library/json.rst:679
msgid ""
"The output is now in the same order as the input. Use the :option"
":`--sort-keys` option to sort the output of dictionaries alphabetically "
"by key."
msgstr ""

#: ../Doc/library/json.rst:685
msgid "Command line options"
msgstr ""

#: ../Doc/library/json.rst:689
msgid "The JSON file to be validated or pretty-printed:"
msgstr ""

#: ../Doc/library/json.rst:705
msgid "If *infile* is not specified, read from :attr:`sys.stdin`."
msgstr ""

#: ../Doc/library/json.rst:709
msgid ""
"Write the output of the *infile* to the given *outfile*. Otherwise, write"
" it to :attr:`sys.stdout`."
msgstr ""

#: ../Doc/library/json.rst:714
msgid "Sort the output of dictionaries alphabetically by key."
msgstr ""

#: ../Doc/library/json.rst:720
msgid "Show the help message."
msgstr ""

#: ../Doc/library/json.rst:724
msgid "Footnotes"
msgstr ""

#: ../Doc/library/json.rst:725
msgid ""
"As noted in `the errata for RFC 7159 <https://www.rfc-"
"editor.org/errata_search.php?rfc=7159>`_, JSON permits literal U+2028 "
"(LINE SEPARATOR) and U+2029 (PARAGRAPH SEPARATOR) characters in strings, "
"whereas JavaScript (as of ECMAScript Edition 5.1) does not."
msgstr ""

#~ msgid "Using :mod:`json.tool` from the shell to validate and pretty-print::"
#~ msgstr ""

#~ msgid ""
#~ "If the optional ``infile`` and "
#~ "``outfile`` arguments are not specified, "
#~ ":attr:`sys.stdin` and :attr:`sys.stdout` will "
#~ "be used respectively::"
#~ msgstr ""

#~ msgid "The JSON file to be validated or pretty-printed::"
#~ msgstr ""

#~ msgid ""
#~ "*object_pairs_hook* is an optional function"
#~ " that will be called with the "
#~ "result of any object literal decoded "
#~ "with an ordered list of pairs.  "
#~ "The return value of *object_pairs_hook* "
#~ "will be used instead of the "
#~ ":class:`dict`.  This feature can be used"
#~ " to implement custom decoders that "
#~ "rely on the order that the key "
#~ "and value pairs are decoded (for "
#~ "example, :func:`collections.OrderedDict` will "
#~ "remember the order of insertion). If "
#~ "*object_hook* is also defined, the "
#~ "*object_pairs_hook* takes priority."
#~ msgstr ""

#~ msgid ""
#~ "*object_pairs_hook*, if specified will be "
#~ "called with the result of every "
#~ "JSON object decoded with an ordered "
#~ "list of pairs.  The return value "
#~ "of *object_pairs_hook* will be used "
#~ "instead of the :class:`dict`.  This "
#~ "feature can be used to implement "
#~ "custom decoders that rely on the "
#~ "order that the key and value pairs"
#~ " are decoded (for example, "
#~ ":func:`collections.OrderedDict` will remember the"
#~ " order of insertion). If *object_hook* "
#~ "is also defined, the *object_pairs_hook* "
#~ "takes priority."
#~ msgstr ""

#~ msgid ""
#~ "Deserialize *fp* (a ``.read()``-supporting "
#~ ":term:`file-like object` containing a "
#~ "JSON document) to a Python object "
#~ "using this :ref:`conversion table <json-"
#~ "to-py-table>`."
#~ msgstr ""

