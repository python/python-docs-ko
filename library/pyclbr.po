# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-30 09:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/pyclbr.rst:2
msgid ":mod:`pyclbr` --- Python class browser support"
msgstr ""

#: ../Doc/library/pyclbr.rst:9
msgid "**Source code:** :source:`Lib/pyclbr.py`"
msgstr ""

#: ../Doc/library/pyclbr.rst:13
msgid ""
"The :mod:`pyclbr` module provides limited information about the "
"functions, classes, and methods defined in a python-coded module.  The "
"information is sufficient to implement a module browser.  The information"
" is extracted from the python source code rather than by importing the "
"module, so this module is safe to use with untrusted code. This "
"restriction makes it impossible to use this module with modules not "
"implemented in Python, including all standard and optional extension "
"modules."
msgstr ""

#: ../Doc/library/pyclbr.rst:25
msgid ""
"Return a dictionary mapping module-level class names to class "
"descriptors.  If possible, descriptors for imported base classes are "
"included.  Parameter *module* is a string with the name of the module to "
"read; it may be the name of a module within a package.  If given, *path* "
"is a sequence of directory paths prepended to ``sys.path``, which is used"
" to locate the module source code."
msgstr ""

#: ../Doc/library/pyclbr.rst:35
msgid ""
"Return a dictionary-based tree containing a function or class descriptors"
" for each function and class defined in the module with a ``def`` or "
"``class`` statement.  The returned dictionary maps module-level function "
"and class names to their descriptors.  Nested objects are entered into "
"the children dictionary of their parent.  As with readmodule, *module* "
"names the module to be read and *path* is prepended to sys.path.  If the "
"module being read is a package, the returned dictionary has a key "
"``'__path__'`` whose value is a list containing the package search path."
msgstr ""

#: ../Doc/library/pyclbr.rst:45
msgid ""
"Descriptors for nested definitions.  They are accessed through the new "
"children attibute.  Each has a new parent attribute."
msgstr ""

#: ../Doc/library/pyclbr.rst:49
msgid ""
"The descriptors returned by these functions are instances of Function and"
" Class classes.  Users are not expected to create instances of these "
"classes."
msgstr ""

#: ../Doc/library/pyclbr.rst:57
msgid "Function Objects"
msgstr ""

#: ../Doc/library/pyclbr.rst:58
msgid ""
"Class :class:`Function` instances describe functions defined by def "
"statements.  They have the following attributes:"
msgstr ""

#: ../Doc/library/pyclbr.rst:64
msgid "Name of the file in which the function is defined."
msgstr ""

#: ../Doc/library/pyclbr.rst:69
msgid "The name of the module defining the function described."
msgstr ""

#: ../Doc/library/pyclbr.rst:74
msgid "The name of the function."
msgstr ""

#: ../Doc/library/pyclbr.rst:79 ../Doc/library/pyclbr.rst:122
msgid "The line number in the file where the definition starts."
msgstr ""

#: ../Doc/library/pyclbr.rst:84
msgid "For top-level functions, None.  For nested functions, the parent."
msgstr ""

#: ../Doc/library/pyclbr.rst:91 ../Doc/library/pyclbr.rst:134
msgid ""
"A dictionary mapping names to descriptors for nested functions and "
"classes."
msgstr ""

#: ../Doc/library/pyclbr.rst:100
msgid "Class Objects"
msgstr ""

#: ../Doc/library/pyclbr.rst:101
msgid ""
"Class :class:`Class` instances describe classes defined by class "
"statements.  They have the same attributes as Functions and two more."
msgstr ""

#: ../Doc/library/pyclbr.rst:107
msgid "Name of the file in which the class is defined."
msgstr ""

#: ../Doc/library/pyclbr.rst:112
msgid "The name of the module defining the class described."
msgstr ""

#: ../Doc/library/pyclbr.rst:117
msgid "The name of the class."
msgstr ""

#: ../Doc/library/pyclbr.rst:127
msgid "For top-level classes, None.  For nested classes, the parent."
msgstr ""

#: ../Doc/library/pyclbr.rst:142
msgid ""
"A list of :class:`Class` objects which describe the immediate base "
"classes of the class being described.  Classes which are named as "
"superclasses but which are not discoverable by :func:`readmodule_ex` are "
"listed as a string with the class name instead of as :class:`Class` "
"objects."
msgstr ""

#: ../Doc/library/pyclbr.rst:151
msgid ""
"A dictionary mapping method names to line numbers.  This can be derived "
"from the newer children dictionary, but remains for back-compatibility."
msgstr ""

#~ msgid ""
#~ "The :mod:`pyclbr` module can be used "
#~ "to determine some limited information "
#~ "about the classes, methods and top-"
#~ "level functions defined in a module."
#~ "  The information provided is sufficient"
#~ " to implement a traditional three-"
#~ "pane class browser.  The information is"
#~ " extracted from the source code "
#~ "rather than by importing the module, "
#~ "so this module is safe to use "
#~ "with untrusted code.  This restriction "
#~ "makes it impossible to use this "
#~ "module with modules not implemented in"
#~ " Python, including all standard and "
#~ "optional extension modules."
#~ msgstr ""

#~ msgid ""
#~ "Read a module and return a "
#~ "dictionary mapping class names to class"
#~ " descriptor objects.  The parameter "
#~ "*module* should be the name of a"
#~ " module as a string; it may be"
#~ " the name of a module within a"
#~ " package.  The *path* parameter should "
#~ "be a sequence, and is used to "
#~ "augment the value of ``sys.path``, which"
#~ " is used to locate module source "
#~ "code."
#~ msgstr ""

#~ msgid ""
#~ "Like :func:`readmodule`, but the returned "
#~ "dictionary, in addition to mapping class"
#~ " names to class descriptor objects, "
#~ "also maps top-level function names "
#~ "to function descriptor objects.  Moreover, "
#~ "if the module being read is a "
#~ "package, the key ``'__path__'`` in the"
#~ " returned dictionary has as its value"
#~ " a list which contains the package"
#~ " search path."
#~ msgstr ""

#~ msgid ""
#~ "The :class:`Class` objects used as "
#~ "values in the dictionary returned by "
#~ ":func:`readmodule` and :func:`readmodule_ex` provide"
#~ " the following data attributes:"
#~ msgstr ""

#~ msgid ""
#~ "The name of the module defining "
#~ "the class described by the class "
#~ "descriptor."
#~ msgstr ""

#~ msgid ""
#~ "A list of :class:`Class` objects which"
#~ " describe the immediate base classes "
#~ "of the class being described.  Classes"
#~ " which are named as superclasses but"
#~ " which are not discoverable by "
#~ ":func:`readmodule` are listed as a "
#~ "string with the class name instead "
#~ "of as :class:`Class` objects."
#~ msgstr ""

#~ msgid "A dictionary mapping method names to line numbers."
#~ msgstr ""

#~ msgid "Name of the file containing the ``class`` statement defining the class."
#~ msgstr ""

#~ msgid ""
#~ "The line number of the ``class`` "
#~ "statement within the file named by "
#~ ":attr:`~Class.file`."
#~ msgstr ""

#~ msgid ""
#~ "The :class:`Function` objects used as "
#~ "values in the dictionary returned by "
#~ ":func:`readmodule_ex` provide the following "
#~ "attributes:"
#~ msgstr ""

#~ msgid ""
#~ "The name of the module defining "
#~ "the function described by the function"
#~ " descriptor."
#~ msgstr ""

#~ msgid ""
#~ "Name of the file containing the "
#~ "``def`` statement defining the function."
#~ msgstr ""

#~ msgid ""
#~ "The line number of the ``def`` "
#~ "statement within the file named by "
#~ ":attr:`~Function.file`."
#~ msgstr ""

