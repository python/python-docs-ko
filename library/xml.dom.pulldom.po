# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-26 18:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/xml.dom.pulldom.rst:2
msgid ":mod:`xml.dom.pulldom` --- Support for building partial DOM trees"
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:9
msgid "**Source code:** :source:`Lib/xml/dom/pulldom.py`"
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:13
msgid ""
"The :mod:`xml.dom.pulldom` module provides a \"pull parser\" which can "
"also be asked to produce DOM-accessible fragments of the document where "
"necessary. The basic concept involves pulling \"events\" from a stream of"
" incoming XML and processing them. In contrast to SAX which also employs "
"an event-driven processing model together with callbacks, the user of a "
"pull parser is responsible for explicitly pulling events from the stream,"
" looping over those events until either processing is finished or an "
"error condition occurs."
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:24
msgid ""
"The :mod:`xml.dom.pulldom` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data"
" see :ref:`xml-vulnerabilities`."
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:29
msgid "Example::"
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:40
msgid "``event`` is a constant and can be one of:"
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:42
msgid ":data:`START_ELEMENT`"
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:43
msgid ":data:`END_ELEMENT`"
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:44
msgid ":data:`COMMENT`"
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:45
msgid ":data:`START_DOCUMENT`"
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:46
msgid ":data:`END_DOCUMENT`"
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:47
msgid ":data:`CHARACTERS`"
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:48
msgid ":data:`PROCESSING_INSTRUCTION`"
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:49
msgid ":data:`IGNORABLE_WHITESPACE`"
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:51
msgid ""
"``node`` is an object of type :class:`xml.dom.minidom.Document`, "
":class:`xml.dom.minidom.Element` or :class:`xml.dom.minidom.Text`."
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:54
msgid ""
"Since the document is treated as a \"flat\" stream of events, the "
"document \"tree\" is implicitly traversed and the desired elements are "
"found regardless of their depth in the tree. In other words, one does not"
" need to consider hierarchical issues such as recursive searching of the "
"document nodes, although if the context of elements were important, one "
"would either need to maintain some context-related state (i.e. "
"remembering where one is in the document at any given point) or to make "
"use of the :func:`DOMEventStream.expandNode` method and switch to DOM-"
"related processing."
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:66 ../Doc/library/xml.dom.pulldom.rst:71
msgid "Subclass of :class:`xml.sax.handler.ContentHandler`."
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:76
msgid ""
"Return a :class:`DOMEventStream` from the given input. *stream_or_string*"
" may be either a file name, or a file-like object. *parser*, if given, "
"must be an :class:`~xml.sax.xmlreader.XMLReader` object. This function "
"will change the document handler of the parser and activate namespace "
"support; other parser configuration (like setting an entity resolver) "
"must have been done in advance."
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:83
msgid ""
"If you have XML in a string, you can use the :func:`parseString` function"
" instead:"
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:87
msgid "Return a :class:`DOMEventStream` that represents the (Unicode) *string*."
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:91
msgid "Default value for the *bufsize* parameter to :func:`parse`."
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:93
msgid ""
"The value of this variable can be changed before calling :func:`parse` "
"and the new value will take effect."
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:99
msgid "DOMEventStream Objects"
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:106
msgid ""
"Return a tuple containing *event* and the current *node* as "
":class:`xml.dom.minidom.Document` if event equals :data:`START_DOCUMENT`,"
" :class:`xml.dom.minidom.Element` if event equals :data:`START_ELEMENT` "
"or :data:`END_ELEMENT` or :class:`xml.dom.minidom.Text` if event equals "
":data:`CHARACTERS`. The current node does not contain information about "
"its children, unless :func:`expandNode` is called."
msgstr ""

#: ../Doc/library/xml.dom.pulldom.rst:116
msgid "Expands all children of *node* into *node*. Example::"
msgstr ""

