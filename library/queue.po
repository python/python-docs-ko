# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-30 09:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/queue.rst:2
msgid ":mod:`queue` --- A synchronized queue class"
msgstr ""

#: ../Doc/library/queue.rst:7
msgid "**Source code:** :source:`Lib/queue.py`"
msgstr ""

#: ../Doc/library/queue.rst:11
msgid ""
"The :mod:`queue` module implements multi-producer, multi-consumer queues."
" It is especially useful in threaded programming when information must be"
" exchanged safely between multiple threads.  The :class:`Queue` class in "
"this module implements all the required locking semantics.  It depends on"
" the availability of thread support in Python; see the :mod:`threading` "
"module."
msgstr ""

#: ../Doc/library/queue.rst:18
msgid ""
"The module implements three types of queue, which differ only in the "
"order in which the entries are retrieved.  In a :abbr:`FIFO (first-in, "
"first-out)` queue, the first tasks added are the first retrieved. In a "
":abbr:`LIFO (last-in, first-out)` queue, the most recently added entry is"
" the first retrieved (operating like a stack).  With a priority queue, "
"the entries are kept sorted (using the :mod:`heapq` module) and the "
"lowest valued entry is retrieved first."
msgstr ""

#: ../Doc/library/queue.rst:26
msgid ""
"Internally, those three types of queues use locks to temporarily block "
"competing threads; however, they are not designed to handle reentrancy "
"within a thread."
msgstr ""

#: ../Doc/library/queue.rst:30
msgid ""
"In addition, the module implements a \"simple\" :abbr:`FIFO (first-in, "
"first-out)` queue type where specific implementations can provide "
"additional guarantees in exchange for the smaller functionality."
msgstr ""

#: ../Doc/library/queue.rst:35
msgid "The :mod:`queue` module defines the following classes and exceptions:"
msgstr ""

#: ../Doc/library/queue.rst:39
msgid ""
"Constructor for a :abbr:`FIFO (first-in, first-out)` queue.  *maxsize* is"
" an integer that sets the upperbound limit on the number of items that "
"can be placed in the queue.  Insertion will block once this size has been"
" reached, until queue items are consumed.  If *maxsize* is less than or "
"equal to zero, the queue size is infinite."
msgstr ""

#: ../Doc/library/queue.rst:47
msgid ""
"Constructor for a :abbr:`LIFO (last-in, first-out)` queue.  *maxsize* is "
"an integer that sets the upperbound limit on the number of items that can"
" be placed in the queue.  Insertion will block once this size has been "
"reached, until queue items are consumed.  If *maxsize* is less than or "
"equal to zero, the queue size is infinite."
msgstr ""

#: ../Doc/library/queue.rst:56
msgid ""
"Constructor for a priority queue.  *maxsize* is an integer that sets the "
"upperbound limit on the number of items that can be placed in the queue."
"  Insertion will block once this size has been reached, until queue items"
" are consumed.  If *maxsize* is less than or equal to zero, the queue "
"size is infinite."
msgstr ""

#: ../Doc/library/queue.rst:61
msgid ""
"The lowest valued entries are retrieved first (the lowest valued entry is"
" the one returned by ``sorted(list(entries))[0]``).  A typical pattern "
"for entries is a tuple in the form: ``(priority_number, data)``."
msgstr ""

#: ../Doc/library/queue.rst:65
msgid ""
"If the *data* elements are not comparable, the data can be wrapped in a "
"class that ignores the data item and only compares the priority number::"
msgstr ""

#: ../Doc/library/queue.rst:78
msgid ""
"Constructor for an unbounded :abbr:`FIFO (first-in, first-out)` queue. "
"Simple queues lack advanced functionality such as task tracking."
msgstr ""

#: ../Doc/library/queue.rst:86
msgid ""
"Exception raised when non-blocking :meth:`~Queue.get` (or "
":meth:`~Queue.get_nowait`) is called on a :class:`Queue` object which is "
"empty."
msgstr ""

#: ../Doc/library/queue.rst:93
msgid ""
"Exception raised when non-blocking :meth:`~Queue.put` (or "
":meth:`~Queue.put_nowait`) is called on a :class:`Queue` object which is "
"full."
msgstr ""

#: ../Doc/library/queue.rst:101
msgid "Queue Objects"
msgstr ""

#: ../Doc/library/queue.rst:103
msgid ""
"Queue objects (:class:`Queue`, :class:`LifoQueue`, or "
":class:`PriorityQueue`) provide the public methods described below."
msgstr ""

#: ../Doc/library/queue.rst:109
msgid ""
"Return the approximate size of the queue.  Note, qsize() > 0 doesn't "
"guarantee that a subsequent get() will not block, nor will qsize() < "
"maxsize guarantee that put() will not block."
msgstr ""

#: ../Doc/library/queue.rst:116
msgid ""
"Return ``True`` if the queue is empty, ``False`` otherwise.  If empty() "
"returns ``True`` it doesn't guarantee that a subsequent call to put() "
"will not block.  Similarly, if empty() returns ``False`` it doesn't "
"guarantee that a subsequent call to get() will not block."
msgstr ""

#: ../Doc/library/queue.rst:124
msgid ""
"Return ``True`` if the queue is full, ``False`` otherwise.  If full() "
"returns ``True`` it doesn't guarantee that a subsequent call to get() "
"will not block.  Similarly, if full() returns ``False`` it doesn't "
"guarantee that a subsequent call to put() will not block."
msgstr ""

#: ../Doc/library/queue.rst:132
msgid ""
"Put *item* into the queue. If optional args *block* is true and *timeout*"
" is ``None`` (the default), block if necessary until a free slot is "
"available. If *timeout* is a positive number, it blocks at most *timeout*"
" seconds and raises the :exc:`Full` exception if no free slot was "
"available within that time. Otherwise (*block* is false), put an item on "
"the queue if a free slot is immediately available, else raise the "
":exc:`Full` exception (*timeout* is ignored in that case)."
msgstr ""

#: ../Doc/library/queue.rst:143
msgid "Equivalent to ``put(item, False)``."
msgstr ""

#: ../Doc/library/queue.rst:148
msgid ""
"Remove and return an item from the queue. If optional args *block* is "
"true and *timeout* is ``None`` (the default), block if necessary until an"
" item is available. If *timeout* is a positive number, it blocks at most "
"*timeout* seconds and raises the :exc:`Empty` exception if no item was "
"available within that time. Otherwise (*block* is false), return an item "
"if one is immediately available, else raise the :exc:`Empty` exception "
"(*timeout* is ignored in that case)."
msgstr ""

#: ../Doc/library/queue.rst:158 ../Doc/library/queue.rst:269
msgid "Equivalent to ``get(False)``."
msgstr ""

#: ../Doc/library/queue.rst:160
msgid ""
"Two methods are offered to support tracking whether enqueued tasks have "
"been fully processed by daemon consumer threads."
msgstr ""

#: ../Doc/library/queue.rst:166
msgid ""
"Indicate that a formerly enqueued task is complete.  Used by queue "
"consumer threads.  For each :meth:`get` used to fetch a task, a "
"subsequent call to :meth:`task_done` tells the queue that the processing "
"on the task is complete."
msgstr ""

#: ../Doc/library/queue.rst:170
msgid ""
"If a :meth:`join` is currently blocking, it will resume when all items "
"have been processed (meaning that a :meth:`task_done` call was received "
"for every item that had been :meth:`put` into the queue)."
msgstr ""

#: ../Doc/library/queue.rst:174
msgid ""
"Raises a :exc:`ValueError` if called more times than there were items "
"placed in the queue."
msgstr ""

#: ../Doc/library/queue.rst:180
msgid "Blocks until all items in the queue have been gotten and processed."
msgstr ""

#: ../Doc/library/queue.rst:182
msgid ""
"The count of unfinished tasks goes up whenever an item is added to the "
"queue. The count goes down whenever a consumer thread calls "
":meth:`task_done` to indicate that the item was retrieved and all work on"
" it is complete. When the count of unfinished tasks drops to zero, "
":meth:`join` unblocks."
msgstr ""

#: ../Doc/library/queue.rst:188
msgid "Example of how to wait for enqueued tasks to be completed::"
msgstr ""

#: ../Doc/library/queue.rst:219
msgid "SimpleQueue Objects"
msgstr ""

#: ../Doc/library/queue.rst:221
msgid ":class:`SimpleQueue` objects provide the public methods described below."
msgstr ""

#: ../Doc/library/queue.rst:225
msgid ""
"Return the approximate size of the queue.  Note, qsize() > 0 doesn't "
"guarantee that a subsequent get() will not block."
msgstr ""

#: ../Doc/library/queue.rst:231
msgid ""
"Return ``True`` if the queue is empty, ``False`` otherwise. If empty() "
"returns ``False`` it doesn't guarantee that a subsequent call to get() "
"will not block."
msgstr ""

#: ../Doc/library/queue.rst:238
msgid ""
"Put *item* into the queue.  The method never blocks and always succeeds "
"(except for potential low-level errors such as failure to allocate "
"memory). The optional args *block* and *timeout* are ignored and only "
"provided for compatibility with :meth:`Queue.put`."
msgstr ""

#: ../Doc/library/queue.rst:253
msgid ""
"Equivalent to ``put(item)``, provided for compatibility with "
":meth:`Queue.put_nowait`."
msgstr ""

#: ../Doc/library/queue.rst:259
msgid ""
"Remove and return an item from the queue.  If optional args *block* is "
"true and *timeout* is ``None`` (the default), block if necessary until an"
" item is available. If *timeout* is a positive number, it blocks at most "
"*timeout* seconds and raises the :exc:`Empty` exception if no item was "
"available within that time. Otherwise (*block* is false), return an item "
"if one is immediately available, else raise the :exc:`Empty` exception "
"(*timeout* is ignored in that case)."
msgstr ""

#: ../Doc/library/queue.rst:276
msgid "Class :class:`multiprocessing.Queue`"
msgstr ""

#: ../Doc/library/queue.rst:275
msgid ""
"A queue class for use in a multi-processing (rather than multi-threading)"
" context."
msgstr ""

#: ../Doc/library/queue.rst:278
msgid ""
":class:`collections.deque` is an alternative implementation of unbounded "
"queues with fast atomic :meth:`~collections.deque.append` and "
":meth:`~collections.deque.popleft` operations that do not require "
"locking."
msgstr ""

#~ msgid ""
#~ "Internally, the module uses locks to "
#~ "temporarily block competing threads; however,"
#~ " it is not designed to handle "
#~ "reentrancy within a thread."
#~ msgstr ""

