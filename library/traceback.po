# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-26 18:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/traceback.rst:2
msgid ":mod:`traceback` --- Print or retrieve a stack traceback"
msgstr ""

#: ../Doc/library/traceback.rst:7
msgid "**Source code:** :source:`Lib/traceback.py`"
msgstr ""

#: ../Doc/library/traceback.rst:11
msgid ""
"This module provides a standard interface to extract, format and print "
"stack traces of Python programs.  It exactly mimics the behavior of the "
"Python interpreter when it prints a stack trace.  This is useful when you"
" want to print stack traces under program control, such as in a "
"\"wrapper\" around the interpreter."
msgstr ""

#: ../Doc/library/traceback.rst:19
msgid ""
"The module uses traceback objects --- this is the object type that is "
"stored in the :data:`sys.last_traceback` variable and returned as the "
"third item from :func:`sys.exc_info`."
msgstr ""

#: ../Doc/library/traceback.rst:23
msgid "The module defines the following functions:"
msgstr ""

#: ../Doc/library/traceback.rst:28
msgid ""
"Print up to *limit* stack trace entries from traceback object *tb* "
"(starting from the caller's frame) if *limit* is positive.  Otherwise, "
"print the last ``abs(limit)`` entries.  If *limit* is omitted or "
"``None``, all entries are printed.  If *file* is omitted or ``None``, the"
" output goes to ``sys.stderr``; otherwise it should be an open file or "
"file-like object to receive the output."
msgstr ""

#: ../Doc/library/traceback.rst:35 ../Doc/library/traceback.rst:85
msgid "Added negative *limit* support."
msgstr ""

#: ../Doc/library/traceback.rst:41
msgid ""
"Print exception information and stack trace entries from traceback object"
" *tb* to *file*. This differs from :func:`print_tb` in the following "
"ways:"
msgstr ""

#: ../Doc/library/traceback.rst:45
msgid ""
"if *tb* is not ``None``, it prints a header ``Traceback (most recent call"
" last):``"
msgstr ""

#: ../Doc/library/traceback.rst:47
msgid "it prints the exception *etype* and *value* after the stack trace"
msgstr ""

#: ../Doc/library/traceback.rst:48
msgid ""
"if *type(value)* is :exc:`SyntaxError` and *value* has the appropriate "
"format, it prints the line where the syntax error occurred with a caret "
"indicating the approximate position of the error."
msgstr ""

#: ../Doc/library/traceback.rst:52
msgid ""
"The optional *limit* argument has the same meaning as for "
":func:`print_tb`. If *chain* is true (the default), then chained "
"exceptions (the :attr:`__cause__` or :attr:`__context__` attributes of "
"the exception) will be printed as well, like the interpreter itself does "
"when printing an unhandled exception."
msgstr ""

#: ../Doc/library/traceback.rst:58 ../Doc/library/traceback.rst:137
msgid "The *etype* argument is ignored and inferred from the type of *value*."
msgstr ""

#: ../Doc/library/traceback.rst:64
msgid ""
"This is a shorthand for ``print_exception(*sys.exc_info(), limit, file, "
"chain)``."
msgstr ""

#: ../Doc/library/traceback.rst:70
msgid ""
"This is a shorthand for ``print_exception(sys.last_type, sys.last_value, "
"sys.last_traceback, limit, file, chain)``.  In general it will work only "
"after an exception has reached an interactive prompt (see "
":data:`sys.last_type`)."
msgstr ""

#: ../Doc/library/traceback.rst:78
msgid ""
"Print up to *limit* stack trace entries (starting from the invocation "
"point) if *limit* is positive.  Otherwise, print the last ``abs(limit)`` "
"entries.  If *limit* is omitted or ``None``, all entries are printed. The"
" optional *f* argument can be used to specify an alternate stack frame to"
" start.  The optional *file* argument has the same meaning as for "
":func:`print_tb`."
msgstr ""

#: ../Doc/library/traceback.rst:91
msgid ""
"Return a list of \"pre-processed\" stack trace entries extracted from the"
" traceback object *tb*.  It is useful for alternate formatting of stack "
"traces.  The optional *limit* argument has the same meaning as for "
":func:`print_tb`.  A \"pre-processed\" stack trace entry is a 4-tuple "
"(*filename*, *line number*, *function name*, *text*) representing the "
"information that is usually printed for a stack trace.  The *text* is a "
"string with leading and trailing whitespace stripped; if the source is "
"not available it is ``None``."
msgstr ""

#: ../Doc/library/traceback.rst:103
msgid ""
"Extract the raw traceback from the current stack frame.  The return value"
" has the same format as for :func:`extract_tb`.  The optional *f* and "
"*limit* arguments have the same meaning as for :func:`print_stack`."
msgstr ""

#: ../Doc/library/traceback.rst:110
msgid ""
"Given a list of tuples as returned by :func:`extract_tb` or "
":func:`extract_stack`, return a list of strings ready for printing. Each "
"string in the resulting list corresponds to the item with the same index "
"in the argument list.  Each string ends in a newline; the strings may "
"contain internal newlines as well, for those items whose source text line"
" is not ``None``."
msgstr ""

#: ../Doc/library/traceback.rst:120
msgid ""
"Format the exception part of a traceback.  The arguments are the "
"exception type and value such as given by ``sys.last_type`` and "
"``sys.last_value``. The return value is a list of strings, each ending in"
" a newline.  Normally, the list contains a single string; however, for "
":exc:`SyntaxError` exceptions, it contains several lines that (when "
"printed) display detailed information about where the syntax error "
"occurred.  The message indicating which exception occurred is the always "
"last string in the list."
msgstr ""

#: ../Doc/library/traceback.rst:131
msgid ""
"Format a stack trace and the exception information.  The arguments  have "
"the same meaning as the corresponding arguments to "
":func:`print_exception`.  The return value is a list of strings, each "
"ending in a newline and some containing internal newlines.  When these "
"lines are concatenated and printed, exactly the same text is printed as "
"does :func:`print_exception`."
msgstr ""

#: ../Doc/library/traceback.rst:143
msgid ""
"This is like ``print_exc(limit)`` but returns a string instead of "
"printing to a file."
msgstr ""

#: ../Doc/library/traceback.rst:149
msgid "A shorthand for ``format_list(extract_tb(tb, limit))``."
msgstr ""

#: ../Doc/library/traceback.rst:154
msgid "A shorthand for ``format_list(extract_stack(f, limit))``."
msgstr ""

#: ../Doc/library/traceback.rst:158
msgid ""
"Clears the local variables of all the stack frames in a traceback *tb* by"
" calling the :meth:`clear` method of each frame object."
msgstr ""

#: ../Doc/library/traceback.rst:165
msgid ""
"Walk a stack following ``f.f_back`` from the given frame, yielding the "
"frame and line number for each frame. If *f* is ``None``, the current "
"stack is used. This helper is used with :meth:`StackSummary.extract`."
msgstr ""

#: ../Doc/library/traceback.rst:173
msgid ""
"Walk a traceback following ``tb_next`` yielding the frame and line number"
" for each frame. This helper is used with :meth:`StackSummary.extract`."
msgstr ""

#: ../Doc/library/traceback.rst:178
msgid "The module also defines the following classes:"
msgstr ""

#: ../Doc/library/traceback.rst:181
msgid ":class:`TracebackException` Objects"
msgstr ""

#: ../Doc/library/traceback.rst:185
msgid ""
":class:`TracebackException` objects are created from actual exceptions to"
" capture data for later printing in a lightweight fashion."
msgstr ""

#: ../Doc/library/traceback.rst:190 ../Doc/library/traceback.rst:237
msgid ""
"Capture an exception for later rendering. *limit*, *lookup_lines* and "
"*capture_locals* are as for the :class:`StackSummary` class."
msgstr ""

#: ../Doc/library/traceback.rst:193 ../Doc/library/traceback.rst:240
msgid "Note that when locals are captured, they are also shown in the traceback."
msgstr ""

#: ../Doc/library/traceback.rst:197
msgid "A :class:`TracebackException` of the original ``__cause__``."
msgstr ""

#: ../Doc/library/traceback.rst:201
msgid "A :class:`TracebackException` of the original ``__context__``."
msgstr ""

#: ../Doc/library/traceback.rst:205
msgid "The ``__suppress_context__`` value from the original exception."
msgstr ""

#: ../Doc/library/traceback.rst:209
msgid "A :class:`StackSummary` representing the traceback."
msgstr ""

#: ../Doc/library/traceback.rst:213
msgid "The class of the original traceback."
msgstr ""

#: ../Doc/library/traceback.rst:217
msgid "For syntax errors - the file name where the error occurred."
msgstr ""

#: ../Doc/library/traceback.rst:221
msgid "For syntax errors - the line number where the error occurred."
msgstr ""

#: ../Doc/library/traceback.rst:225
msgid "For syntax errors - the text where the error occurred."
msgstr ""

#: ../Doc/library/traceback.rst:229
msgid "For syntax errors - the offset into the text where the error occurred."
msgstr ""

#: ../Doc/library/traceback.rst:233
msgid "For syntax errors - the compiler error message."
msgstr ""

#: ../Doc/library/traceback.rst:244
msgid "Format the exception."
msgstr ""

#: ../Doc/library/traceback.rst:246
msgid ""
"If *chain* is not ``True``, ``__cause__`` and ``__context__`` will not be"
" formatted."
msgstr ""

#: ../Doc/library/traceback.rst:249
msgid ""
"The return value is a generator of strings, each ending in a newline and "
"some containing internal newlines. :func:`~traceback.print_exception` is "
"a wrapper around this method which just prints the lines to a file."
msgstr ""

#: ../Doc/library/traceback.rst:253 ../Doc/library/traceback.rst:267
msgid ""
"The message indicating which exception occurred is always the last string"
" in the output."
msgstr ""

#: ../Doc/library/traceback.rst:258
msgid "Format the exception part of the traceback."
msgstr ""

#: ../Doc/library/traceback.rst:260
msgid "The return value is a generator of strings, each ending in a newline."
msgstr ""

#: ../Doc/library/traceback.rst:262
msgid ""
"Normally, the generator emits a single string; however, for "
":exc:`SyntaxError` exceptions, it emits several lines that (when printed)"
" display detailed information about where the syntax error occurred."
msgstr ""

#: ../Doc/library/traceback.rst:272
msgid ":class:`StackSummary` Objects"
msgstr ""

#: ../Doc/library/traceback.rst:276
msgid ":class:`StackSummary` objects represent a call stack ready for formatting."
msgstr ""

#: ../Doc/library/traceback.rst:282
msgid ""
"Construct a :class:`StackSummary` object from a frame generator (such as "
"is returned by :func:`~traceback.walk_stack` or "
":func:`~traceback.walk_tb`)."
msgstr ""

#: ../Doc/library/traceback.rst:286
msgid ""
"If *limit* is supplied, only this many frames are taken from *frame_gen*."
" If *lookup_lines* is ``False``, the returned :class:`FrameSummary` "
"objects will not have read their lines in yet, making the cost of "
"creating the :class:`StackSummary` cheaper (which may be valuable if it "
"may not actually get formatted). If *capture_locals* is ``True`` the "
"local variables in each :class:`FrameSummary` are captured as object "
"representations."
msgstr ""

#: ../Doc/library/traceback.rst:296
msgid ""
"Construct a :class:`StackSummary` object from a supplied old-style list "
"of tuples. Each tuple should be a 4-tuple with filename, lineno, name, "
"line as the elements."
msgstr ""

#: ../Doc/library/traceback.rst:302
msgid ""
"Returns a list of strings ready for printing.  Each string in the "
"resulting list corresponds to a single frame from the stack. Each string "
"ends in a newline; the strings may contain internal newlines as well, for"
" those items with source text lines."
msgstr ""

#: ../Doc/library/traceback.rst:307
msgid ""
"For long sequences of the same frame and line, the first few repetitions "
"are shown, followed by a summary line stating the exact number of further"
" repetitions."
msgstr ""

#: ../Doc/library/traceback.rst:311
msgid "Long sequences of repeated frames are now abbreviated."
msgstr ""

#: ../Doc/library/traceback.rst:316
msgid ":class:`FrameSummary` Objects"
msgstr ""

#: ../Doc/library/traceback.rst:320
msgid ":class:`FrameSummary` objects represent a single frame in a traceback."
msgstr ""

#: ../Doc/library/traceback.rst:324
msgid ""
"Represent a single frame in the traceback or stack that is being "
"formatted or printed. It may optionally have a stringified version of the"
" frames locals included in it. If *lookup_line* is ``False``, the source "
"code is not looked up until the :class:`FrameSummary` has the "
":attr:`~FrameSummary.line` attribute accessed (which also happens when "
"casting it to a tuple). :attr:`~FrameSummary.line` may be directly "
"provided, and will prevent line lookups happening at all. *locals* is an "
"optional local variable dictionary, and if supplied the variable "
"representations are stored in the summary for later display."
msgstr ""

#: ../Doc/library/traceback.rst:337
msgid "Traceback Examples"
msgstr ""

#: ../Doc/library/traceback.rst:339
msgid ""
"This simple example implements a basic read-eval-print loop, similar to "
"(but less useful than) the standard Python interactive interpreter loop."
"  For a more complete implementation of the interpreter loop, refer to "
"the :mod:`code` module. ::"
msgstr ""

#: ../Doc/library/traceback.rst:361
msgid ""
"The following example demonstrates the different ways to print and format"
" the exception and traceback:"
msgstr ""

#: ../Doc/library/traceback.rst:400
msgid "The output for the example would look similar to this:"
msgstr ""

#: ../Doc/library/traceback.rst:442
msgid ""
"The following example shows the different ways to print and format the "
"stack::"
msgstr ""

#: ../Doc/library/traceback.rst:468
msgid "This last example demonstrates the final few formatting functions:"
msgstr ""

