# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-26 18:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/email.encoders.rst:2
msgid ":mod:`email.encoders`: Encoders"
msgstr ""

#: ../Doc/library/email.encoders.rst:7
msgid "**Source code:** :source:`Lib/email/encoders.py`"
msgstr ""

#: ../Doc/library/email.encoders.rst:11
msgid ""
"This module is part of the legacy (``Compat32``) email API.  In the new "
"API the functionality is provided by the *cte* parameter of the "
":meth:`~email.message.EmailMessage.set_content` method."
msgstr ""

#: ../Doc/library/email.encoders.rst:15
msgid ""
"The remaining text in this section is the original documentation of the "
"module."
msgstr ""

#: ../Doc/library/email.encoders.rst:17
msgid ""
"When creating :class:`~email.message.Message` objects from scratch, you "
"often need to encode the payloads for transport through compliant mail "
"servers. This is especially true for :mimetype:`image/\\*` and "
":mimetype:`text/\\*` type messages containing binary data."
msgstr ""

#: ../Doc/library/email.encoders.rst:22
msgid ""
"The :mod:`email` package provides some convenient encodings in its "
":mod:`encoders` module.  These encoders are actually used by the "
":class:`~email.mime.audio.MIMEAudio` and "
":class:`~email.mime.image.MIMEImage` class constructors to provide "
"default encodings.  All encoder functions take exactly one argument, the "
"message object to encode.  They usually extract the payload, encode it, "
"and reset the payload to this newly encoded value.  They should also set "
"the :mailheader:`Content-Transfer-Encoding` header as appropriate."
msgstr ""

#: ../Doc/library/email.encoders.rst:30
msgid ""
"Note that these functions are not meaningful for a multipart message.  "
"They must be applied to individual subparts instead, and will raise a "
":exc:`TypeError` if passed a message whose type is multipart."
msgstr ""

#: ../Doc/library/email.encoders.rst:34
msgid "Here are the encoding functions provided:"
msgstr ""

#: ../Doc/library/email.encoders.rst:39
msgid ""
"Encodes the payload into quoted-printable form and sets the :mailheader"
":`Content-Transfer-Encoding` header to ``quoted-printable`` [#]_. This is"
" a good encoding to use when most of your payload is normal printable "
"data, but contains a few unprintable characters."
msgstr ""

#: ../Doc/library/email.encoders.rst:47
msgid ""
"Encodes the payload into base64 form and sets the :mailheader:`Content-"
"Transfer-Encoding` header to ``base64``.  This is a good encoding to use "
"when most of your payload is unprintable data since it is a more compact "
"form than quoted-printable.  The drawback of base64 encoding is that it "
"renders the text non-human readable."
msgstr ""

#: ../Doc/library/email.encoders.rst:56
msgid ""
"This doesn't actually modify the message's payload, but it does set the "
":mailheader:`Content-Transfer-Encoding` header to either ``7bit`` or "
"``8bit`` as appropriate, based on the payload data."
msgstr ""

#: ../Doc/library/email.encoders.rst:63
msgid ""
"This does nothing; it doesn't even set the :mailheader:`Content-Transfer-"
"Encoding` header."
msgstr ""

#: ../Doc/library/email.encoders.rst:67
msgid "Footnotes"
msgstr ""

#: ../Doc/library/email.encoders.rst:68
msgid ""
"Note that encoding with :meth:`encode_quopri` also encodes all tabs and "
"space characters in the data."
msgstr ""

