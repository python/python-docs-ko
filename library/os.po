# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-08 11:36+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/os.rst:2
msgid ":mod:`os` --- Miscellaneous operating system interfaces"
msgstr ""

#: ../Doc/library/os.rst:7
msgid "**Source code:** :source:`Lib/os.py`"
msgstr ""

#: ../Doc/library/os.rst:11
msgid ""
"This module provides a portable way of using operating system dependent "
"functionality.  If you just want to read or write a file see "
":func:`open`, if you want to manipulate paths, see the :mod:`os.path` "
"module, and if you want to read all the lines in all the files on the "
"command line see the :mod:`fileinput` module.  For creating temporary "
"files and directories see the :mod:`tempfile` module, and for high-level "
"file and directory handling see the :mod:`shutil` module."
msgstr ""

#: ../Doc/library/os.rst:19
msgid "Notes on the availability of these functions:"
msgstr ""

#: ../Doc/library/os.rst:21
msgid ""
"The design of all built-in operating system dependent modules of Python "
"is such that as long as the same functionality is available, it uses the "
"same interface; for example, the function ``os.stat(path)`` returns stat "
"information about *path* in the same format (which happens to have "
"originated with the POSIX interface)."
msgstr ""

#: ../Doc/library/os.rst:27
msgid ""
"Extensions peculiar to a particular operating system are also available "
"through the :mod:`os` module, but using them is of course a threat to "
"portability."
msgstr ""

#: ../Doc/library/os.rst:31
msgid ""
"All functions accepting path or file names accept both bytes and string "
"objects, and result in an object of the same type, if a path or file name"
" is returned."
msgstr ""

#: ../Doc/library/os.rst:35
msgid ""
"An \"Availability: Unix\" note means that this function is commonly found"
" on Unix systems.  It does not make any claims about its existence on a "
"specific operating system."
msgstr ""

#: ../Doc/library/os.rst:39
msgid ""
"If not separately noted, all functions that claim \"Availability: Unix\" "
"are supported on Mac OS X, which builds on a Unix core."
msgstr ""

#: ../Doc/library/os.rst:47
msgid ""
"All functions in this module raise :exc:`OSError` in the case of invalid "
"or inaccessible file names and paths, or other arguments that have the "
"correct type, but are not accepted by the operating system."
msgstr ""

#: ../Doc/library/os.rst:53
msgid "An alias for the built-in :exc:`OSError` exception."
msgstr ""

#: ../Doc/library/os.rst:58
msgid ""
"The name of the operating system dependent module imported.  The "
"following names have currently been registered: ``'posix'``, ``'nt'``, "
"``'java'``."
msgstr ""

#: ../Doc/library/os.rst:63
msgid ""
":attr:`sys.platform` has a finer granularity.  :func:`os.uname` gives "
"system-dependent version information."
msgstr ""

#: ../Doc/library/os.rst:66
msgid ""
"The :mod:`platform` module provides detailed checks for the system's "
"identity."
msgstr ""

#: ../Doc/library/os.rst:74
msgid "File Names, Command Line Arguments, and Environment Variables"
msgstr ""

#: ../Doc/library/os.rst:76
msgid ""
"In Python, file names, command line arguments, and environment variables "
"are represented using the string type. On some systems, decoding these "
"strings to and from bytes is necessary before passing them to the "
"operating system. Python uses the file system encoding to perform this "
"conversion (see :func:`sys.getfilesystemencoding`)."
msgstr ""

#: ../Doc/library/os.rst:82
msgid ""
"On some systems, conversion using the file system encoding may fail. In "
"this case, Python uses the :ref:`surrogateescape encoding error handler "
"<surrogateescape>`, which means that undecodable bytes are replaced by a "
"Unicode character U+DCxx on decoding, and these are again translated to "
"the original byte on encoding."
msgstr ""

#: ../Doc/library/os.rst:90
msgid ""
"The file system encoding must guarantee to successfully decode all bytes "
"below 128. If the file system encoding fails to provide this guarantee, "
"API functions may raise UnicodeErrors."
msgstr ""

#: ../Doc/library/os.rst:98
msgid "Process Parameters"
msgstr ""

#: ../Doc/library/os.rst:100
msgid ""
"These functions and data items provide information and operate on the "
"current process and user."
msgstr ""

#: ../Doc/library/os.rst:106
msgid ""
"Return the filename corresponding to the controlling terminal of the "
"process."
msgstr ""

#: ../Doc/library/os.rst:108 ../Doc/library/os.rst:270
#: ../Doc/library/os.rst:279 ../Doc/library/os.rst:288
#: ../Doc/library/os.rst:297 ../Doc/library/os.rst:306
#: ../Doc/library/os.rst:342 ../Doc/library/os.rst:350
#: ../Doc/library/os.rst:386 ../Doc/library/os.rst:397
#: ../Doc/library/os.rst:407 ../Doc/library/os.rst:417
#: ../Doc/library/os.rst:428 ../Doc/library/os.rst:437
#: ../Doc/library/os.rst:467 ../Doc/library/os.rst:474
#: ../Doc/library/os.rst:481 ../Doc/library/os.rst:490
#: ../Doc/library/os.rst:502 ../Doc/library/os.rst:511
#: ../Doc/library/os.rst:537 ../Doc/library/os.rst:544
#: ../Doc/library/os.rst:553 ../Doc/library/os.rst:562
#: ../Doc/library/os.rst:569 ../Doc/library/os.rst:576
#: ../Doc/library/os.rst:585 ../Doc/library/os.rst:757
#: ../Doc/library/os.rst:767 ../Doc/library/os.rst:775
#: ../Doc/library/os.rst:798 ../Doc/library/os.rst:819
#: ../Doc/library/os.rst:852 ../Doc/library/os.rst:870
#: ../Doc/library/os.rst:882 ../Doc/library/os.rst:1050
#: ../Doc/library/os.rst:1065 ../Doc/library/os.rst:1080
#: ../Doc/library/os.rst:1093 ../Doc/library/os.rst:1161
#: ../Doc/library/os.rst:1260 ../Doc/library/os.rst:1277
#: ../Doc/library/os.rst:1289 ../Doc/library/os.rst:1307
#: ../Doc/library/os.rst:1317 ../Doc/library/os.rst:1325
#: ../Doc/library/os.rst:1334 ../Doc/library/os.rst:1369
#: ../Doc/library/os.rst:1606 ../Doc/library/os.rst:1671
#: ../Doc/library/os.rst:1685 ../Doc/library/os.rst:1697
#: ../Doc/library/os.rst:1716 ../Doc/library/os.rst:1729
#: ../Doc/library/os.rst:1740 ../Doc/library/os.rst:1912
#: ../Doc/library/os.rst:1934 ../Doc/library/os.rst:1978
#: ../Doc/library/os.rst:1990 ../Doc/library/os.rst:2597
#: ../Doc/library/os.rst:2744 ../Doc/library/os.rst:2965
#: ../Doc/library/os.rst:3176 ../Doc/library/os.rst:3184
#: ../Doc/library/os.rst:3191 ../Doc/library/os.rst:3198
#: ../Doc/library/os.rst:3205 ../Doc/library/os.rst:3212
#: ../Doc/library/os.rst:3219 ../Doc/library/os.rst:3226
#: ../Doc/library/os.rst:3234 ../Doc/library/os.rst:3242
#: ../Doc/library/os.rst:3249 ../Doc/library/os.rst:3256
#: ../Doc/library/os.rst:3265 ../Doc/library/os.rst:3273
#: ../Doc/library/os.rst:3281 ../Doc/library/os.rst:3288
#: ../Doc/library/os.rst:3295 ../Doc/library/os.rst:3310
#: ../Doc/library/os.rst:3355 ../Doc/library/os.rst:3362
#: ../Doc/library/os.rst:3370 ../Doc/library/os.rst:3425
#: ../Doc/library/os.rst:3623 ../Doc/library/os.rst:3638
#: ../Doc/library/os.rst:3649 ../Doc/library/os.rst:3660
#: ../Doc/library/os.rst:3673 ../Doc/library/os.rst:3720
#: ../Doc/library/os.rst:3731 ../Doc/library/os.rst:3739
#: ../Doc/library/os.rst:3755 ../Doc/library/os.rst:3767
#: ../Doc/library/os.rst:3775 ../Doc/library/os.rst:3783
#: ../Doc/library/os.rst:3791 ../Doc/library/os.rst:3799
#: ../Doc/library/os.rst:3807 ../Doc/library/os.rst:3814
#: ../Doc/library/os.rst:3821 ../Doc/library/os.rst:3967
#: ../Doc/library/os.rst:3976 ../Doc/library/os.rst:3997
#: ../Doc/library/os.rst:4007 ../Doc/library/os.rst:4016
msgid "Availability: Unix."
msgstr ""

#: ../Doc/library/os.rst:113
msgid ""
"A :term:`mapping` object representing the string environment. For "
"example, ``environ['HOME']`` is the pathname of your home directory (on "
"some platforms), and is equivalent to ``getenv(\"HOME\")`` in C."
msgstr ""

#: ../Doc/library/os.rst:117
msgid ""
"This mapping is captured the first time the :mod:`os` module is imported,"
" typically during Python startup as part of processing :file:`site.py`.  "
"Changes to the environment made after this time are not reflected in "
"``os.environ``, except for changes made by modifying ``os.environ`` "
"directly."
msgstr ""

#: ../Doc/library/os.rst:122
msgid ""
"If the platform supports the :func:`putenv` function, this mapping may be"
" used to modify the environment as well as query the environment.  "
":func:`putenv` will be called automatically when the mapping is modified."
msgstr ""

#: ../Doc/library/os.rst:126
msgid ""
"On Unix, keys and values use :func:`sys.getfilesystemencoding` and "
"``'surrogateescape'`` error handler. Use :data:`environb` if you would "
"like to use a different encoding."
msgstr ""

#: ../Doc/library/os.rst:132
msgid ""
"Calling :func:`putenv` directly does not change ``os.environ``, so it's "
"better to modify ``os.environ``."
msgstr ""

#: ../Doc/library/os.rst:137
msgid ""
"On some platforms, including FreeBSD and Mac OS X, setting ``environ`` "
"may cause memory leaks.  Refer to the system documentation for "
":c:func:`putenv`."
msgstr ""

#: ../Doc/library/os.rst:141
msgid ""
"If :func:`putenv` is not provided, a modified copy of this mapping  may "
"be passed to the appropriate process-creation functions to cause  child "
"processes to use a modified environment."
msgstr ""

#: ../Doc/library/os.rst:145
msgid ""
"If the platform supports the :func:`unsetenv` function, you can delete "
"items in this mapping to unset environment variables. :func:`unsetenv` "
"will be called automatically when an item is deleted from ``os.environ``,"
" and when one of the :meth:`pop` or :meth:`clear` methods is called."
msgstr ""

#: ../Doc/library/os.rst:153
msgid ""
"Bytes version of :data:`environ`: a :term:`mapping` object representing "
"the environment as byte strings. :data:`environ` and :data:`environb` are"
" synchronized (modify :data:`environb` updates :data:`environ`, and vice "
"versa)."
msgstr ""

#: ../Doc/library/os.rst:158
msgid ""
":data:`environb` is only available if :data:`supports_bytes_environ` is "
"True."
msgstr ""

#: ../Doc/library/os.rst:169
msgid "These functions are described in :ref:`os-file-dir`."
msgstr ""

#: ../Doc/library/os.rst:174
msgid ""
"Encode :term:`path-like <path-like object>` *filename* to the filesystem "
"encoding with ``'surrogateescape'`` error handler, or ``'strict'`` on "
"Windows; return :class:`bytes` unchanged."
msgstr ""

#: ../Doc/library/os.rst:178
msgid ":func:`fsdecode` is the reverse function."
msgstr ""

#: ../Doc/library/os.rst:182 ../Doc/library/os.rst:197
msgid ""
"Support added to accept objects implementing the :class:`os.PathLike` "
"interface."
msgstr ""

#: ../Doc/library/os.rst:189
msgid ""
"Decode the :term:`path-like <path-like object>` *filename* from the "
"filesystem encoding with ``'surrogateescape'`` error handler, or "
"``'strict'`` on Windows; return :class:`str` unchanged."
msgstr ""

#: ../Doc/library/os.rst:193
msgid ":func:`fsencode` is the reverse function."
msgstr ""

#: ../Doc/library/os.rst:204
msgid "Return the file system representation of the path."
msgstr ""

#: ../Doc/library/os.rst:206
msgid ""
"If :class:`str` or :class:`bytes` is passed in, it is returned unchanged."
" Otherwise :meth:`~os.PathLike.__fspath__` is called and its value is "
"returned as long as it is a :class:`str` or :class:`bytes` object. In all"
" other cases, :exc:`TypeError` is raised."
msgstr ""

#: ../Doc/library/os.rst:216
msgid ""
"An :term:`abstract base class` for objects representing a file system "
"path, e.g. :class:`pathlib.PurePath`."
msgstr ""

#: ../Doc/library/os.rst:223
msgid "Return the file system path representation of the object."
msgstr ""

#: ../Doc/library/os.rst:225
msgid ""
"The method should only return a :class:`str` or :class:`bytes` object, "
"with the preference being for :class:`str`."
msgstr ""

#: ../Doc/library/os.rst:231
msgid ""
"Return the value of the environment variable *key* if it exists, or "
"*default* if it doesn't. *key*, *default* and the result are str."
msgstr ""

#: ../Doc/library/os.rst:234
msgid ""
"On Unix, keys and values are decoded with "
":func:`sys.getfilesystemencoding` and ``'surrogateescape'`` error "
"handler. Use :func:`os.getenvb` if you would like to use a different "
"encoding."
msgstr ""

#: ../Doc/library/os.rst:238 ../Doc/library/os.rst:450
#: ../Doc/library/os.rst:654
msgid "Availability: most flavors of Unix, Windows."
msgstr ""

#: ../Doc/library/os.rst:243
msgid ""
"Return the value of the environment variable *key* if it exists, or "
"*default* if it doesn't. *key*, *default* and the result are bytes."
msgstr ""

#: ../Doc/library/os.rst:246
msgid ""
":func:`getenvb` is only available if :data:`supports_bytes_environ` is "
"True."
msgstr ""

#: ../Doc/library/os.rst:249
msgid "Availability: most flavors of Unix."
msgstr ""

#: ../Doc/library/os.rst:256
msgid ""
"Returns the list of directories that will be searched for a named "
"executable, similar to a shell, when launching a process. *env*, when "
"specified, should be an environment variable dictionary to lookup the "
"PATH in. By default, when *env* is ``None``, :data:`environ` is used."
msgstr ""

#: ../Doc/library/os.rst:267
msgid ""
"Return the effective group id of the current process.  This corresponds "
"to the \"set id\" bit on the file being executed in the current process."
msgstr ""

#: ../Doc/library/os.rst:277
msgid "Return the current process's effective user id."
msgstr ""

#: ../Doc/library/os.rst:286
msgid "Return the real group id of the current process."
msgstr ""

#: ../Doc/library/os.rst:293
msgid ""
"Return list of group ids that *user* belongs to. If *group* is not in the"
" list, it is included; typically, *group* is specified as the group ID "
"field from the password record for *user*."
msgstr ""

#: ../Doc/library/os.rst:304
msgid "Return list of supplemental group ids associated with the current process."
msgstr ""

#: ../Doc/library/os.rst:310
msgid ""
"On Mac OS X, :func:`getgroups` behavior differs somewhat from other Unix "
"platforms. If the Python interpreter was built with a deployment target "
"of :const:`10.5` or earlier, :func:`getgroups` returns the list of "
"effective group ids associated with the current user process; this list "
"is limited to a system-defined number of entries, typically 16, and may "
"be modified by calls to :func:`setgroups` if suitably privileged. If "
"built with a deployment target greater than :const:`10.5`, "
":func:`getgroups` returns the current group access list for the user "
"associated with the effective user id of the process; the group access "
"list may change over the lifetime of the process, it is not affected by "
"calls to :func:`setgroups`, and its length is not limited to 16.  The "
"deployment target value, :const:`MACOSX_DEPLOYMENT_TARGET`, can be "
"obtained with :func:`sysconfig.get_config_var`."
msgstr ""

#: ../Doc/library/os.rst:327
msgid ""
"Return the name of the user logged in on the controlling terminal of the "
"process.  For most purposes, it is more useful to use "
":func:`getpass.getuser` since the latter checks the environment variables"
" :envvar:`LOGNAME` or :envvar:`USERNAME` to find out who the user is, and"
" falls back to ``pwd.getpwuid(os.getuid())[0]`` to get the login name of "
"the current real user id."
msgstr ""

#: ../Doc/library/os.rst:334 ../Doc/library/os.rst:368
#: ../Doc/library/os.rst:831 ../Doc/library/os.rst:840
#: ../Doc/library/os.rst:1026 ../Doc/library/os.rst:1396
#: ../Doc/library/os.rst:1754 ../Doc/library/os.rst:2727
#: ../Doc/library/os.rst:2756 ../Doc/library/os.rst:3142
#: ../Doc/library/os.rst:3506 ../Doc/library/os.rst:3517
#: ../Doc/library/os.rst:3585 ../Doc/library/os.rst:3608
msgid "Availability: Unix, Windows."
msgstr ""

#: ../Doc/library/os.rst:339
msgid ""
"Return the process group id of the process with process id *pid*. If "
"*pid* is 0, the process group id of the current process is returned."
msgstr ""

#: ../Doc/library/os.rst:348
msgid "Return the id of the current process group."
msgstr ""

#: ../Doc/library/os.rst:357
msgid "Return the current process id."
msgstr ""

#: ../Doc/library/os.rst:364
msgid ""
"Return the parent's process id.  When the parent process has exited, on "
"Unix the id returned is the one of the init process (1), on Windows it is"
" still the same id, which may be already reused by another process."
msgstr ""

#: ../Doc/library/os.rst:370
msgid "Added support for Windows."
msgstr ""

#: ../Doc/library/os.rst:378
msgid ""
"Get program scheduling priority.  The value *which* is one of "
":const:`PRIO_PROCESS`, :const:`PRIO_PGRP`, or :const:`PRIO_USER`, and "
"*who* is interpreted relative to *which* (a process identifier for "
":const:`PRIO_PROCESS`, process group identifier for :const:`PRIO_PGRP`, "
"and a user ID for :const:`PRIO_USER`).  A zero value for *who* denotes "
"(respectively) the calling process, the process group of the calling "
"process, or the real user ID of the calling process."
msgstr ""

#: ../Doc/library/os.rst:395
msgid "Parameters for the :func:`getpriority` and :func:`setpriority` functions."
msgstr ""

#: ../Doc/library/os.rst:404
msgid ""
"Return a tuple (ruid, euid, suid) denoting the current process's real, "
"effective, and saved user ids."
msgstr ""

#: ../Doc/library/os.rst:414
msgid ""
"Return a tuple (rgid, egid, sgid) denoting the current process's real, "
"effective, and saved group ids."
msgstr ""

#: ../Doc/library/os.rst:426
msgid "Return the current process's real user id."
msgstr ""

#: ../Doc/library/os.rst:433
msgid ""
"Call the system initgroups() to initialize the group access list with all"
" of the groups of which the specified username is a member, plus the "
"specified group id."
msgstr ""

#: ../Doc/library/os.rst:446
msgid ""
"Set the environment variable named *key* to the string *value*.  Such "
"changes to the environment affect subprocesses started with "
":func:`os.system`, :func:`popen` or :func:`fork` and :func:`execv`."
msgstr ""

#: ../Doc/library/os.rst:454
msgid ""
"On some platforms, including FreeBSD and Mac OS X, setting ``environ`` "
"may cause memory leaks. Refer to the system documentation for putenv."
msgstr ""

#: ../Doc/library/os.rst:457
msgid ""
"When :func:`putenv` is supported, assignments to items in ``os.environ`` "
"are automatically translated into corresponding calls to :func:`putenv`; "
"however, calls to :func:`putenv` don't update ``os.environ``, so it is "
"actually preferable to assign to items of ``os.environ``."
msgstr ""

#: ../Doc/library/os.rst:465
msgid "Set the current process's effective group id."
msgstr ""

#: ../Doc/library/os.rst:472
msgid "Set the current process's effective user id."
msgstr ""

#: ../Doc/library/os.rst:479
msgid "Set the current process' group id."
msgstr ""

#: ../Doc/library/os.rst:486
msgid ""
"Set the list of supplemental group ids associated with the current "
"process to *groups*. *groups* must be a sequence, and each element must "
"be an integer identifying a group. This operation is typically available "
"only to the superuser."
msgstr ""

#: ../Doc/library/os.rst:492
msgid ""
"On Mac OS X, the length of *groups* may not exceed the system-defined "
"maximum number of effective group ids, typically 16. See the "
"documentation for :func:`getgroups` for cases where it may not return the"
" same group list set by calling setgroups()."
msgstr ""

#: ../Doc/library/os.rst:499
msgid ""
"Call the system call :c:func:`setpgrp` or ``setpgrp(0, 0)`` depending on "
"which version is implemented (if any).  See the Unix manual for the "
"semantics."
msgstr ""

#: ../Doc/library/os.rst:507
msgid ""
"Call the system call :c:func:`setpgid` to set the process group id of the"
" process with id *pid* to the process group with id *pgrp*.  See the Unix"
" manual for the semantics."
msgstr ""

#: ../Doc/library/os.rst:518
msgid ""
"Set program scheduling priority. The value *which* is one of "
":const:`PRIO_PROCESS`, :const:`PRIO_PGRP`, or :const:`PRIO_USER`, and "
"*who* is interpreted relative to *which* (a process identifier for "
":const:`PRIO_PROCESS`, process group identifier for :const:`PRIO_PGRP`, "
"and a user ID for :const:`PRIO_USER`). A zero value for *who* denotes "
"(respectively) the calling process, the process group of the calling "
"process, or the real user ID of the calling process. *priority* is a "
"value in the range -20 to 19. The default priority is 0; lower priorities"
" cause more favorable scheduling."
msgstr ""

#: ../Doc/library/os.rst:528
msgid "Availability: Unix"
msgstr ""

#: ../Doc/library/os.rst:535
msgid "Set the current process's real and effective group ids."
msgstr ""

#: ../Doc/library/os.rst:542
msgid "Set the current process's real, effective, and saved group ids."
msgstr ""

#: ../Doc/library/os.rst:551
msgid "Set the current process's real, effective, and saved user ids."
msgstr ""

#: ../Doc/library/os.rst:560
msgid "Set the current process's real and effective user ids."
msgstr ""

#: ../Doc/library/os.rst:567
msgid ""
"Call the system call :c:func:`getsid`.  See the Unix manual for the "
"semantics."
msgstr ""

#: ../Doc/library/os.rst:574
msgid ""
"Call the system call :c:func:`setsid`.  See the Unix manual for the "
"semantics."
msgstr ""

#: ../Doc/library/os.rst:583
msgid "Set the current process's user id."
msgstr ""

#: ../Doc/library/os.rst:591
msgid ""
"Return the error message corresponding to the error code in *code*. On "
"platforms where :c:func:`strerror` returns ``NULL`` when given an unknown"
" error number, :exc:`ValueError` is raised."
msgstr ""

#: ../Doc/library/os.rst:598
msgid ""
"``True`` if the native OS type of the environment is bytes (eg. ``False``"
" on Windows)."
msgstr ""

#: ../Doc/library/os.rst:606
msgid "Set the current numeric umask and return the previous umask."
msgstr ""

#: ../Doc/library/os.rst:615
msgid ""
"Returns information identifying the current operating system. The return "
"value is an object with five attributes:"
msgstr ""

#: ../Doc/library/os.rst:618
msgid ":attr:`sysname` - operating system name"
msgstr ""

#: ../Doc/library/os.rst:619
msgid ":attr:`nodename` - name of machine on network (implementation-defined)"
msgstr ""

#: ../Doc/library/os.rst:620
msgid ":attr:`release` - operating system release"
msgstr ""

#: ../Doc/library/os.rst:621
msgid ":attr:`version` - operating system version"
msgstr ""

#: ../Doc/library/os.rst:622
msgid ":attr:`machine` - hardware identifier"
msgstr ""

#: ../Doc/library/os.rst:624
msgid ""
"For backwards compatibility, this object is also iterable, behaving like "
"a five-tuple containing :attr:`sysname`, :attr:`nodename`, "
":attr:`release`, :attr:`version`, and :attr:`machine` in that order."
msgstr ""

#: ../Doc/library/os.rst:629
msgid ""
"Some systems truncate :attr:`nodename` to 8 characters or to the leading "
"component; a better way to get the hostname is :func:`socket.gethostname`"
"  or even ``socket.gethostbyaddr(socket.gethostname())``."
msgstr ""

#: ../Doc/library/os.rst:634
msgid "Availability: recent flavors of Unix."
msgstr ""

#: ../Doc/library/os.rst:636 ../Doc/library/os.rst:3610
msgid ""
"Return type changed from a tuple to a tuple-like object with named "
"attributes."
msgstr ""

#: ../Doc/library/os.rst:645
msgid ""
"Unset (delete) the environment variable named *key*. Such changes to the "
"environment affect subprocesses started with :func:`os.system`, "
":func:`popen` or :func:`fork` and :func:`execv`."
msgstr ""

#: ../Doc/library/os.rst:649
msgid ""
"When :func:`unsetenv` is supported, deletion of items in ``os.environ`` "
"is automatically translated into a corresponding call to "
":func:`unsetenv`; however, calls to :func:`unsetenv` don't update "
"``os.environ``, so it is actually preferable to delete items of "
"``os.environ``."
msgstr ""

#: ../Doc/library/os.rst:660
msgid "File Object Creation"
msgstr ""

#: ../Doc/library/os.rst:662
msgid ""
"This function creates new :term:`file objects <file object>`.  (See also "
":func:`~os.open` for opening file descriptors.)"
msgstr ""

#: ../Doc/library/os.rst:668
msgid ""
"Return an open file object connected to the file descriptor *fd*.  This "
"is an alias of the :func:`open` built-in function and accepts the same "
"arguments. The only difference is that the first argument of "
":func:`fdopen` must always be an integer."
msgstr ""

#: ../Doc/library/os.rst:677
msgid "File Descriptor Operations"
msgstr ""

#: ../Doc/library/os.rst:679
msgid "These functions operate on I/O streams referenced using file descriptors."
msgstr ""

#: ../Doc/library/os.rst:681
msgid ""
"File descriptors are small integers corresponding to a file that has been"
" opened by the current process.  For example, standard input is usually "
"file descriptor 0, standard output is 1, and standard error is 2.  "
"Further files opened by a process will then be assigned 3, 4, 5, and so "
"forth.  The name \"file descriptor\" is slightly deceptive; on Unix "
"platforms, sockets and pipes are also referenced by file descriptors."
msgstr ""

#: ../Doc/library/os.rst:688
msgid ""
"The :meth:`~io.IOBase.fileno` method can be used to obtain the file "
"descriptor associated with a :term:`file object` when required.  Note "
"that using the file descriptor directly will bypass the file object "
"methods, ignoring aspects such as internal buffering of data."
msgstr ""

#: ../Doc/library/os.rst:696
msgid "Close file descriptor *fd*."
msgstr ""

#: ../Doc/library/os.rst:700
msgid ""
"This function is intended for low-level I/O and must be applied to a file"
" descriptor as returned by :func:`os.open` or :func:`pipe`.  To close a "
"\"file object\" returned by the built-in function :func:`open` or by "
":func:`popen` or :func:`fdopen`, use its :meth:`~io.IOBase.close` method."
msgstr ""

#: ../Doc/library/os.rst:708
msgid ""
"Close all file descriptors from *fd_low* (inclusive) to *fd_high* "
"(exclusive), ignoring errors. Equivalent to (but much faster than)::"
msgstr ""

#: ../Doc/library/os.rst:720
msgid ""
"Return a string describing the encoding of the device associated with "
"*fd* if it is connected to a terminal; else return :const:`None`."
msgstr ""

#: ../Doc/library/os.rst:726
msgid ""
"Return a duplicate of file descriptor *fd*. The new file descriptor is "
":ref:`non-inheritable <fd_inheritance>`."
msgstr ""

#: ../Doc/library/os.rst:729
msgid ""
"On Windows, when duplicating a standard stream (0: stdin, 1: stdout, 2: "
"stderr), the new file descriptor is :ref:`inheritable <fd_inheritance>`."
msgstr ""

#: ../Doc/library/os.rst:733 ../Doc/library/os.rst:923
msgid "The new file descriptor is now non-inheritable."
msgstr ""

#: ../Doc/library/os.rst:739
msgid ""
"Duplicate file descriptor *fd* to *fd2*, closing the latter first if "
"necessary. Return *fd2*. The new file descriptor is :ref:`inheritable "
"<fd_inheritance>` by default or non-inheritable if *inheritable* is "
"``False``."
msgstr ""

#: ../Doc/library/os.rst:744
msgid "Add the optional *inheritable* parameter."
msgstr ""

#: ../Doc/library/os.rst:747
msgid "Return *fd2* on success. Previously, ``None`` was always returned."
msgstr ""

#: ../Doc/library/os.rst:753
msgid ""
"Change the mode of the file given by *fd* to the numeric *mode*.  See the"
" docs for :func:`chmod` for possible values of *mode*.  As of Python 3.3,"
" this is equivalent to ``os.chmod(fd, mode)``."
msgstr ""

#: ../Doc/library/os.rst:762
msgid ""
"Change the owner and group id of the file given by *fd* to the numeric "
"*uid* and *gid*.  To leave one of the ids unchanged, set it to -1.  See "
":func:`chown`.  As of Python 3.3, this is equivalent to ``os.chown(fd, "
"uid, gid)``."
msgstr ""

#: ../Doc/library/os.rst:772
msgid ""
"Force write of file with filedescriptor *fd* to disk. Does not force "
"update of metadata."
msgstr ""

#: ../Doc/library/os.rst:778
msgid "This function is not available on MacOS."
msgstr ""

#: ../Doc/library/os.rst:783
msgid ""
"Return system configuration information relevant to an open file. *name* "
"specifies the configuration value to retrieve; it may be a string which "
"is the name of a defined system value; these names are specified in a "
"number of standards (POSIX.1, Unix 95, Unix 98, and others).  Some "
"platforms define additional names as well.  The names known to the host "
"operating system are given in the ``pathconf_names`` dictionary.  For "
"configuration variables not included in that mapping, passing an integer "
"for *name* is also accepted."
msgstr ""

#: ../Doc/library/os.rst:791 ../Doc/library/os.rst:1970
msgid ""
"If *name* is a string and is not known, :exc:`ValueError` is raised.  If "
"a specific value for *name* is not supported by the host system, even if "
"it is included in ``pathconf_names``, an :exc:`OSError` is raised with "
":const:`errno.EINVAL` for the error number."
msgstr ""

#: ../Doc/library/os.rst:796
msgid "As of Python 3.3, this is equivalent to ``os.pathconf(fd, name)``."
msgstr ""

#: ../Doc/library/os.rst:803
msgid ""
"Get the status of the file descriptor *fd*. Return a :class:`stat_result`"
" object."
msgstr ""

#: ../Doc/library/os.rst:806
msgid "As of Python 3.3, this is equivalent to ``os.stat(fd)``."
msgstr ""

#: ../Doc/library/os.rst:810 ../Doc/library/os.rst:1816
msgid "The :func:`.stat` function."
msgstr ""

#: ../Doc/library/os.rst:815
msgid ""
"Return information about the filesystem containing the file associated "
"with file descriptor *fd*, like :func:`statvfs`.  As of Python 3.3, this "
"is equivalent to ``os.statvfs(fd)``."
msgstr ""

#: ../Doc/library/os.rst:824
msgid ""
"Force write of file with filedescriptor *fd* to disk.  On Unix, this "
"calls the native :c:func:`fsync` function; on Windows, the MS "
":c:func:`_commit` function."
msgstr ""

#: ../Doc/library/os.rst:827
msgid ""
"If you're starting with a buffered Python :term:`file object` *f*, first "
"do ``f.flush()``, and then do ``os.fsync(f.fileno())``, to ensure that "
"all internal buffers associated with *f* are written to disk."
msgstr ""

#: ../Doc/library/os.rst:836
msgid ""
"Truncate the file corresponding to file descriptor *fd*, so that it is at"
" most *length* bytes in size.  As of Python 3.3, this is equivalent to "
"``os.truncate(fd, length)``."
msgstr ""

#: ../Doc/library/os.rst:842 ../Doc/library/os.rst:2760
msgid "Added support for Windows"
msgstr ""

#: ../Doc/library/os.rst:847
msgid ""
"Get the blocking mode of the file descriptor: ``False`` if the "
":data:`O_NONBLOCK` flag is set, ``True`` if the flag is cleared."
msgstr ""

#: ../Doc/library/os.rst:850
msgid "See also :func:`set_blocking` and :meth:`socket.socket.setblocking`."
msgstr ""

#: ../Doc/library/os.rst:858
msgid ""
"Return ``True`` if the file descriptor *fd* is open and connected to a "
"tty(-like) device, else ``False``."
msgstr ""

#: ../Doc/library/os.rst:864
msgid ""
"Apply, test or remove a POSIX lock on an open file descriptor. *fd* is an"
" open file descriptor. *cmd* specifies the command to use - one of "
":data:`F_LOCK`, :data:`F_TLOCK`, :data:`F_ULOCK` or :data:`F_TEST`. *len*"
" specifies the section of the file to lock."
msgstr ""

#: ../Doc/library/os.rst:880
msgid "Flags that specify what action :func:`lockf` will take."
msgstr ""

#: ../Doc/library/os.rst:889
msgid ""
"Set the current position of file descriptor *fd* to position *pos*, "
"modified by *how*: :const:`SEEK_SET` or ``0`` to set the position "
"relative to the beginning of the file; :const:`SEEK_CUR` or ``1`` to set "
"it relative to the current position; :const:`SEEK_END` or ``2`` to set it"
" relative to the end of the file. Return the new cursor position in "
"bytes, starting from the beginning."
msgstr ""

#: ../Doc/library/os.rst:900
msgid ""
"Parameters to the :func:`lseek` function. Their values are 0, 1, and 2, "
"respectively."
msgstr ""

#: ../Doc/library/os.rst:903
msgid ""
"Some operating systems could support additional values, like "
":data:`os.SEEK_HOLE` or :data:`os.SEEK_DATA`."
msgstr ""

#: ../Doc/library/os.rst:910
msgid ""
"Open the file *path* and set various flags according to *flags* and "
"possibly its mode according to *mode*.  When computing *mode*, the "
"current umask value is first masked out.  Return the file descriptor for "
"the newly opened file. The new file descriptor is :ref:`non-inheritable "
"<fd_inheritance>`."
msgstr ""

#: ../Doc/library/os.rst:915
msgid ""
"For a description of the flag and mode values, see the C run-time "
"documentation; flag constants (like :const:`O_RDONLY` and "
":const:`O_WRONLY`) are defined in the :mod:`os` module.  In particular, "
"on Windows adding :const:`O_BINARY` is needed to open files in binary "
"mode."
msgstr ""

#: ../Doc/library/os.rst:920
msgid ""
"This function can support :ref:`paths relative to directory descriptors "
"<dir_fd>` with the *dir_fd* parameter."
msgstr ""

#: ../Doc/library/os.rst:928
msgid ""
"This function is intended for low-level I/O.  For normal usage, use the "
"built-in function :func:`open`, which returns a :term:`file object` with "
":meth:`~file.read` and :meth:`~file.write` methods (and many more).  To "
"wrap a file descriptor in a file object, use :func:`fdopen`."
msgstr ""

#: ../Doc/library/os.rst:933 ../Doc/library/os.rst:1848
#: ../Doc/library/os.rst:1914 ../Doc/library/os.rst:1936
#: ../Doc/library/os.rst:2013 ../Doc/library/os.rst:2034
msgid "The *dir_fd* argument."
msgstr ""

#: ../Doc/library/os.rst:936 ../Doc/library/os.rst:1228
#: ../Doc/library/os.rst:1351 ../Doc/library/os.rst:3705
msgid ""
"If the system call is interrupted and the signal handler does not raise "
"an exception, the function now retries the system call instead of raising"
" an :exc:`InterruptedError` exception (see :pep:`475` for the rationale)."
msgstr ""

#: ../Doc/library/os.rst:941 ../Doc/library/os.rst:1555
#: ../Doc/library/os.rst:1582 ../Doc/library/os.rst:1611
#: ../Doc/library/os.rst:1655 ../Doc/library/os.rst:1687
#: ../Doc/library/os.rst:1718 ../Doc/library/os.rst:1731
#: ../Doc/library/os.rst:1742 ../Doc/library/os.rst:1795
#: ../Doc/library/os.rst:1851 ../Doc/library/os.rst:1890
#: ../Doc/library/os.rst:1917 ../Doc/library/os.rst:1939
#: ../Doc/library/os.rst:1980 ../Doc/library/os.rst:2016
#: ../Doc/library/os.rst:2037 ../Doc/library/os.rst:2054
#: ../Doc/library/os.rst:2125 ../Doc/library/os.rst:2382
#: ../Doc/library/os.rst:2611 ../Doc/library/os.rst:2763
#: ../Doc/library/os.rst:2777 ../Doc/library/os.rst:2817
#: ../Doc/library/os.rst:2910 ../Doc/library/os.rst:2969
#: ../Doc/library/os.rst:3007 ../Doc/library/os.rst:3148
#: ../Doc/library/os.rst:3494
msgid "Accepts a :term:`path-like object`."
msgstr ""

#: ../Doc/library/os.rst:944
msgid ""
"The following constants are options for the *flags* parameter to the "
":func:`~os.open` function.  They can be combined using the bitwise OR "
"operator ``|``.  Some of them are not available on all platforms.  For "
"descriptions of their availability and use, consult the "
":manpage:`open(2)` manual page on Unix or `the MSDN "
"<https://msdn.microsoft.com/en-us/library/z0kc8e3z.aspx>`_ on Windows."
msgstr ""

#: ../Doc/library/os.rst:959
msgid "The above constants are available on Unix and Windows."
msgstr ""

#: ../Doc/library/os.rst:970
msgid "The above constants are only available on Unix."
msgstr ""

#: ../Doc/library/os.rst:972
msgid "Add :data:`O_CLOEXEC` constant."
msgstr ""

#: ../Doc/library/os.rst:983
msgid "The above constants are only available on Windows."
msgstr ""

#: ../Doc/library/os.rst:996
msgid ""
"The above constants are extensions and not present if they are not "
"defined by the C library."
msgstr ""

#: ../Doc/library/os.rst:999
msgid ""
"Add :data:`O_PATH` on systems that support it. Add :data:`O_TMPFILE`, "
"only available on Linux Kernel 3.11   or newer."
msgstr ""

#: ../Doc/library/os.rst:1009
msgid ""
"Open a new pseudo-terminal pair. Return a pair of file descriptors "
"``(master, slave)`` for the pty and the tty, respectively. The new file "
"descriptors are :ref:`non-inheritable <fd_inheritance>`. For a (slightly)"
" more portable approach, use the :mod:`pty` module."
msgstr ""

#: ../Doc/library/os.rst:1014 ../Doc/library/os.rst:1040
#: ../Doc/library/os.rst:3321
msgid "Availability: some flavors of Unix."
msgstr ""

#: ../Doc/library/os.rst:1016 ../Doc/library/os.rst:1028
msgid "The new file descriptors are now non-inheritable."
msgstr ""

#: ../Doc/library/os.rst:1022
msgid ""
"Create a pipe.  Return a pair of file descriptors ``(r, w)`` usable for "
"reading and writing, respectively. The new file descriptor is :ref:`non-"
"inheritable <fd_inheritance>`."
msgstr ""

#: ../Doc/library/os.rst:1034
msgid ""
"Create a pipe with *flags* set atomically. *flags* can be constructed by "
"ORing together one or more of these values: :data:`O_NONBLOCK`, "
":data:`O_CLOEXEC`. Return a pair of file descriptors ``(r, w)`` usable "
"for reading and writing, respectively."
msgstr ""

#: ../Doc/library/os.rst:1047
msgid ""
"Ensures that enough disk space is allocated for the file specified by "
"*fd* starting from *offset* and continuing for *len* bytes."
msgstr ""

#: ../Doc/library/os.rst:1057
msgid ""
"Announces an intention to access data in a specific pattern thus allowing"
" the kernel to make optimizations. The advice applies to the region of "
"the file specified by *fd* starting at *offset* and continuing for *len* "
"bytes. *advice* is one of :data:`POSIX_FADV_NORMAL`, "
":data:`POSIX_FADV_SEQUENTIAL`, :data:`POSIX_FADV_RANDOM`, "
":data:`POSIX_FADV_NOREUSE`, :data:`POSIX_FADV_WILLNEED` or "
":data:`POSIX_FADV_DONTNEED`."
msgstr ""

#: ../Doc/library/os.rst:1077
msgid ""
"Flags that can be used in *advice* in :func:`posix_fadvise` that specify "
"the access pattern that is likely to be used."
msgstr ""

#: ../Doc/library/os.rst:1087
msgid ""
"Read at most *n* bytes from file descriptor *fd* at a position of "
"*offset*, leaving the file offset unchanged."
msgstr ""

#: ../Doc/library/os.rst:1090 ../Doc/library/os.rst:1217
msgid ""
"Return a bytestring containing the bytes read. If the end of the file "
"referred to by *fd* has been reached, an empty bytes object is returned."
msgstr ""

#: ../Doc/library/os.rst:1100
msgid ""
"Read from a file descriptor *fd* at a position of *offset* into mutable "
":term:`bytes-like objects <bytes-like object>` *buffers*, leaving the "
"file offset unchanged.  Transfer data into each buffer until it is full "
"and then move on to the next buffer in the sequence to hold the rest of "
"the data."
msgstr ""

#: ../Doc/library/os.rst:1105 ../Doc/library/os.rst:1174
msgid ""
"The flags argument contains a bitwise OR of zero or more of the following"
" flags:"
msgstr ""

#: ../Doc/library/os.rst:1108
msgid ":data:`RWF_HIPRI`"
msgstr ""

#: ../Doc/library/os.rst:1109
msgid ":data:`RWF_NOWAIT`"
msgstr ""

#: ../Doc/library/os.rst:1111 ../Doc/library/os.rst:1301
msgid ""
"Return the total number of bytes actually read which can be less than the"
" total capacity of all the objects."
msgstr ""

#: ../Doc/library/os.rst:1114 ../Doc/library/os.rst:1182
#: ../Doc/library/os.rst:1304 ../Doc/library/os.rst:1366
msgid ""
"The operating system may set a limit (:func:`sysconf` value "
"``'SC_IOV_MAX'``) on the number of buffers that can be used."
msgstr ""

#: ../Doc/library/os.rst:1117
msgid "Combine the functionality of :func:`os.readv` and :func:`os.pread`."
msgstr ""

#: ../Doc/library/os.rst:1119
msgid ""
"Availability: Linux 2.6.30 and newer, FreeBSD 6.0 and newer, OpenBSD 2.7 "
"and newer. Using flags requires Linux 4.6 or newer."
msgstr ""

#: ../Doc/library/os.rst:1127
msgid ""
"Do not wait for data which is not immediately available. If this flag is "
"specified, the system call will return instantly if it would have to read"
" data from the backing storage or wait for a lock."
msgstr ""

#: ../Doc/library/os.rst:1131
msgid ""
"If some data was successfully read, it will return the number of bytes "
"read. If no bytes were read, it will return ``-1`` and set errno to "
":data:`errno.EAGAIN`."
msgstr ""

#: ../Doc/library/os.rst:1135
msgid "Availability: Linux 4.14 and newer."
msgstr ""

#: ../Doc/library/os.rst:1142
msgid ""
"High priority read/write. Allows block-based filesystems to use polling "
"of the device, which provides lower latency, but may use additional "
"resources."
msgstr ""

#: ../Doc/library/os.rst:1146
msgid ""
"Currently, on Linux, this feature is usable only on a file descriptor "
"opened using the :data:`O_DIRECT` flag."
msgstr ""

#: ../Doc/library/os.rst:1149
msgid "Availability: Linux 4.6 and newer."
msgstr ""

#: ../Doc/library/os.rst:1156
msgid ""
"Write the bytestring in *str* to file descriptor *fd* at position of "
"*offset*, leaving the file offset unchanged."
msgstr ""

#: ../Doc/library/os.rst:1159 ../Doc/library/os.rst:1341
msgid "Return the number of bytes actually written."
msgstr ""

#: ../Doc/library/os.rst:1168
msgid ""
"Write the *buffers* contents to file descriptor *fd* at a offset "
"*offset*, leaving the file offset unchanged.  *buffers* must be a "
"sequence of :term:`bytes-like objects <bytes-like object>`. Buffers are "
"processed in array order. Entire contents of the first buffer is written "
"before proceeding to the second, and so on."
msgstr ""

#: ../Doc/library/os.rst:1177
msgid ":data:`RWF_DSYNC`"
msgstr ""

#: ../Doc/library/os.rst:1178
msgid ":data:`RWF_SYNC`"
msgstr ""

#: ../Doc/library/os.rst:1180
msgid "Return the total number of bytes actually written."
msgstr ""

#: ../Doc/library/os.rst:1185
msgid "Combine the functionality of :func:`os.writev` and :func:`os.pwrite`."
msgstr ""

#: ../Doc/library/os.rst:1187
msgid ""
"Availability: Linux 2.6.30 and newer, FreeBSD 6.0 and newer, OpenBSD 2.7 "
"and newer. Using flags requires Linux 4.7 or newer."
msgstr ""

#: ../Doc/library/os.rst:1195
msgid ""
"Provide a per-write equivalent of the :data:`O_DSYNC` ``open(2)`` flag. "
"This flag effect applies only to the data range written by the system "
"call."
msgstr ""

#: ../Doc/library/os.rst:1198 ../Doc/library/os.rst:1208
msgid "Availability: Linux 4.7 and newer."
msgstr ""

#: ../Doc/library/os.rst:1205
msgid ""
"Provide a per-write equivalent of the :data:`O_SYNC` ``open(2)`` flag. "
"This flag effect applies only to the data range written by the system "
"call."
msgstr ""

#: ../Doc/library/os.rst:1215
msgid "Read at most *n* bytes from file descriptor *fd*."
msgstr ""

#: ../Doc/library/os.rst:1222
msgid ""
"This function is intended for low-level I/O and must be applied to a file"
" descriptor as returned by :func:`os.open` or :func:`pipe`.  To read a "
"\"file object\" returned by the built-in function :func:`open` or by "
":func:`popen` or :func:`fdopen`, or :data:`sys.stdin`, use its "
":meth:`~file.read` or :meth:`~file.readline` methods."
msgstr ""

#: ../Doc/library/os.rst:1237
msgid ""
"Copy *count* bytes from file descriptor *in* to file descriptor *out* "
"starting at *offset*. Return the number of bytes sent. When EOF is "
"reached return 0."
msgstr ""

#: ../Doc/library/os.rst:1241
msgid ""
"The first function notation is supported by all platforms that define "
":func:`sendfile`."
msgstr ""

#: ../Doc/library/os.rst:1244
msgid ""
"On Linux, if *offset* is given as ``None``, the bytes are read from the "
"current position of *in* and the position of *in* is updated."
msgstr ""

#: ../Doc/library/os.rst:1247
msgid ""
"The second case may be used on Mac OS X and FreeBSD where *headers* and "
"*trailers* are arbitrary sequences of buffers that are written before and"
" after the data from *in* is written. It returns the same as the first "
"case."
msgstr ""

#: ../Doc/library/os.rst:1251
msgid ""
"On Mac OS X and FreeBSD, a value of 0 for *count* specifies to send until"
" the end of *in* is reached."
msgstr ""

#: ../Doc/library/os.rst:1254
msgid ""
"All platforms support sockets as *out* file descriptor, and some "
"platforms allow other types (e.g. regular file, pipe) as well."
msgstr ""

#: ../Doc/library/os.rst:1257
msgid ""
"Cross-platform applications should not use *headers*, *trailers* and "
"*flags* arguments."
msgstr ""

#: ../Doc/library/os.rst:1264
msgid ""
"For a higher-level wrapper of :func:`sendfile`, see "
":meth:`socket.socket.sendfile`."
msgstr ""

#: ../Doc/library/os.rst:1272
msgid ""
"Set the blocking mode of the specified file descriptor. Set the "
":data:`O_NONBLOCK` flag if blocking is ``False``, clear the flag "
"otherwise."
msgstr ""

#: ../Doc/library/os.rst:1275
msgid "See also :func:`get_blocking` and :meth:`socket.socket.setblocking`."
msgstr ""

#: ../Doc/library/os.rst:1286
msgid ""
"Parameters to the :func:`sendfile` function, if the implementation "
"supports them."
msgstr ""

#: ../Doc/library/os.rst:1296
msgid ""
"Read from a file descriptor *fd* into a number of mutable :term:`bytes-"
"like objects <bytes-like object>` *buffers*. Transfer data into each "
"buffer until it is full and then move on to the next buffer in the "
"sequence to hold the rest of the data."
msgstr ""

#: ../Doc/library/os.rst:1314
msgid ""
"Return the process group associated with the terminal given by *fd* (an "
"open file descriptor as returned by :func:`os.open`)."
msgstr ""

#: ../Doc/library/os.rst:1322
msgid ""
"Set the process group associated with the terminal given by *fd* (an open"
" file descriptor as returned by :func:`os.open`) to *pg*."
msgstr ""

#: ../Doc/library/os.rst:1330
msgid ""
"Return a string which specifies the terminal device associated with file "
"descriptor *fd*.  If *fd* is not associated with a terminal device, an "
"exception is raised."
msgstr ""

#: ../Doc/library/os.rst:1339
msgid "Write the bytestring in *str* to file descriptor *fd*."
msgstr ""

#: ../Doc/library/os.rst:1345
msgid ""
"This function is intended for low-level I/O and must be applied to a file"
" descriptor as returned by :func:`os.open` or :func:`pipe`.  To write a "
"\"file object\" returned by the built-in function :func:`open` or by "
":func:`popen` or :func:`fdopen`, or :data:`sys.stdout` or "
":data:`sys.stderr`, use its :meth:`~file.write` method."
msgstr ""

#: ../Doc/library/os.rst:1359
msgid ""
"Write the contents of *buffers* to file descriptor *fd*. *buffers* must "
"be a sequence of :term:`bytes-like objects <bytes-like object>`. Buffers "
"are processed in array order. Entire contents of the first buffer is "
"written before proceeding to the second, and so on."
msgstr ""

#: ../Doc/library/os.rst:1364
msgid "Returns the total number of bytes actually written."
msgstr ""

#: ../Doc/library/os.rst:1377
msgid "Querying the size of a terminal"
msgstr ""

#: ../Doc/library/os.rst:1383
msgid ""
"Return the size of the terminal window as ``(columns, lines)``, tuple of "
"type :class:`terminal_size`."
msgstr ""

#: ../Doc/library/os.rst:1386
msgid ""
"The optional argument ``fd`` (default ``STDOUT_FILENO``, or standard "
"output) specifies which file descriptor should be queried."
msgstr ""

#: ../Doc/library/os.rst:1389
msgid ""
"If the file descriptor is not connected to a terminal, an :exc:`OSError` "
"is raised."
msgstr ""

#: ../Doc/library/os.rst:1392
msgid ""
":func:`shutil.get_terminal_size` is the high-level function which should "
"normally be used, ``os.get_terminal_size`` is the low-level "
"implementation."
msgstr ""

#: ../Doc/library/os.rst:1400
msgid ""
"A subclass of tuple, holding ``(columns, lines)`` of the terminal window "
"size."
msgstr ""

#: ../Doc/library/os.rst:1404
msgid "Width of the terminal window in characters."
msgstr ""

#: ../Doc/library/os.rst:1408
msgid "Height of the terminal window in characters."
msgstr ""

#: ../Doc/library/os.rst:1414
msgid "Inheritance of File Descriptors"
msgstr ""

#: ../Doc/library/os.rst:1418
msgid ""
"A file descriptor has an \"inheritable\" flag which indicates if the file"
" descriptor can be inherited by child processes.  Since Python 3.4, file "
"descriptors created by Python are non-inheritable by default."
msgstr ""

#: ../Doc/library/os.rst:1422
msgid ""
"On UNIX, non-inheritable file descriptors are closed in child processes "
"at the execution of a new program, other file descriptors are inherited."
msgstr ""

#: ../Doc/library/os.rst:1425
msgid ""
"On Windows, non-inheritable handles and file descriptors are closed in "
"child processes, except for standard streams (file descriptors 0, 1 and "
"2: stdin, stdout and stderr), which are always inherited.  Using "
":func:`spawn\\* <spawnl>` functions, all inheritable handles and all "
"inheritable file descriptors are inherited. Using the :mod:`subprocess` "
"module, all file descriptors except standard streams are closed, and "
"inheritable handles are only inherited if the *close_fds* parameter is "
"``False``."
msgstr ""

#: ../Doc/library/os.rst:1435
msgid "Get the \"inheritable\" flag of the specified file descriptor (a boolean)."
msgstr ""

#: ../Doc/library/os.rst:1439
msgid "Set the \"inheritable\" flag of the specified file descriptor."
msgstr ""

#: ../Doc/library/os.rst:1443
msgid "Get the \"inheritable\" flag of the specified handle (a boolean)."
msgstr ""

#: ../Doc/library/os.rst:1445 ../Doc/library/os.rst:1451
#: ../Doc/library/os.rst:3529 ../Doc/library/os.rst:3558
msgid "Availability: Windows."
msgstr ""

#: ../Doc/library/os.rst:1449
msgid "Set the \"inheritable\" flag of the specified handle."
msgstr ""

#: ../Doc/library/os.rst:1457
msgid "Files and Directories"
msgstr ""

#: ../Doc/library/os.rst:1459
msgid ""
"On some Unix platforms, many of these functions support one or more of "
"these features:"
msgstr ""

#: ../Doc/library/os.rst:1464
msgid ""
"**specifying a file descriptor:** For some functions, the *path* argument"
" can be not only a string giving a path name, but also a file descriptor."
"  The function will then operate on the file referred to by the "
"descriptor.  (For POSIX systems, Python will call the ``f...`` version of"
" the function.)"
msgstr ""

#: ../Doc/library/os.rst:1470
msgid ""
"You can check whether or not *path* can be specified as a file descriptor"
" on your platform using :data:`os.supports_fd`.  If it is unavailable, "
"using it will raise a :exc:`NotImplementedError`."
msgstr ""

#: ../Doc/library/os.rst:1474
msgid ""
"If the function also supports *dir_fd* or *follow_symlinks* arguments, it"
" is an error to specify one of those when supplying *path* as a file "
"descriptor."
msgstr ""

#: ../Doc/library/os.rst:1479
msgid ""
"**paths relative to directory descriptors:** If *dir_fd* is not ``None``,"
" it should be a file descriptor referring to a directory, and the path to"
" operate on should be relative; path will then be relative to that "
"directory.  If the path is absolute, *dir_fd* is ignored.  (For POSIX "
"systems, Python will call the ``...at`` or ``f...at`` version of the "
"function.)"
msgstr ""

#: ../Doc/library/os.rst:1485
msgid ""
"You can check whether or not *dir_fd* is supported on your platform using"
" :data:`os.supports_dir_fd`.  If it is unavailable, using it will raise a"
" :exc:`NotImplementedError`."
msgstr ""

#: ../Doc/library/os.rst:1491
msgid ""
"**not following symlinks:** If *follow_symlinks* is ``False``, and the "
"last element of the path to operate on is a symbolic link, the function "
"will operate on the symbolic link itself instead of the file the link "
"points to.  (For POSIX systems, Python will call the ``l...`` version of "
"the function.)"
msgstr ""

#: ../Doc/library/os.rst:1497
msgid ""
"You can check whether or not *follow_symlinks* is supported on your "
"platform using :data:`os.supports_follow_symlinks`.  If it is "
"unavailable, using it will raise a :exc:`NotImplementedError`."
msgstr ""

#: ../Doc/library/os.rst:1505
msgid ""
"Use the real uid/gid to test for access to *path*.  Note that most "
"operations will use the effective uid/gid, therefore this routine can be "
"used in a suid/sgid environment to test if the invoking user has the "
"specified access to *path*.  *mode* should be :const:`F_OK` to test the "
"existence of *path*, or it can be the inclusive OR of one or more of "
":const:`R_OK`, :const:`W_OK`, and :const:`X_OK` to test permissions.  "
"Return :const:`True` if access is allowed, :const:`False` if not. See the"
" Unix man page :manpage:`access(2)` for more information."
msgstr ""

#: ../Doc/library/os.rst:1514
msgid ""
"This function can support specifying :ref:`paths relative to directory "
"descriptors <dir_fd>` and :ref:`not following symlinks "
"<follow_symlinks>`."
msgstr ""

#: ../Doc/library/os.rst:1517
msgid ""
"If *effective_ids* is ``True``, :func:`access` will perform its access "
"checks using the effective uid/gid instead of the real uid/gid. "
"*effective_ids* may not be supported on your platform; you can check "
"whether or not it is available using :data:`os.supports_effective_ids`.  "
"If it is unavailable, using it will raise a :exc:`NotImplementedError`."
msgstr ""

#: ../Doc/library/os.rst:1525
msgid ""
"Using :func:`access` to check if a user is authorized to e.g. open a file"
" before actually doing so using :func:`open` creates a security hole, "
"because the user might exploit the short time interval between checking "
"and opening the file to manipulate it. It's preferable to use "
":term:`EAFP` techniques. For example::"
msgstr ""

#: ../Doc/library/os.rst:1536
msgid "is better written as::"
msgstr ""

#: ../Doc/library/os.rst:1548
msgid ""
"I/O operations may fail even when :func:`access` indicates that they "
"would succeed, particularly for operations on network filesystems which "
"may have permissions semantics beyond the usual POSIX permission-bit "
"model."
msgstr ""

#: ../Doc/library/os.rst:1552
msgid "Added the *dir_fd*, *effective_ids*, and *follow_symlinks* parameters."
msgstr ""

#: ../Doc/library/os.rst:1564
msgid ""
"Values to pass as the *mode* parameter of :func:`access` to test the "
"existence, readability, writability and executability of *path*, "
"respectively."
msgstr ""

#: ../Doc/library/os.rst:1573
msgid "Change the current working directory to *path*."
msgstr ""

#: ../Doc/library/os.rst:1575
msgid ""
"This function can support :ref:`specifying a file descriptor <path_fd>`."
"  The descriptor must refer to an opened directory, not an open file."
msgstr ""

#: ../Doc/library/os.rst:1578
msgid ""
"Added support for specifying *path* as a file descriptor on some "
"platforms."
msgstr ""

#: ../Doc/library/os.rst:1588
msgid ""
"Set the flags of *path* to the numeric *flags*. *flags* may take a "
"combination (bitwise OR) of the following values (as defined in the "
":mod:`stat` module):"
msgstr ""

#: ../Doc/library/os.rst:1591
msgid ":data:`stat.UF_NODUMP`"
msgstr ""

#: ../Doc/library/os.rst:1592
msgid ":data:`stat.UF_IMMUTABLE`"
msgstr ""

#: ../Doc/library/os.rst:1593
msgid ":data:`stat.UF_APPEND`"
msgstr ""

#: ../Doc/library/os.rst:1594
msgid ":data:`stat.UF_OPAQUE`"
msgstr ""

#: ../Doc/library/os.rst:1595
msgid ":data:`stat.UF_NOUNLINK`"
msgstr ""

#: ../Doc/library/os.rst:1596
msgid ":data:`stat.UF_COMPRESSED`"
msgstr ""

#: ../Doc/library/os.rst:1597
msgid ":data:`stat.UF_HIDDEN`"
msgstr ""

#: ../Doc/library/os.rst:1598
msgid ":data:`stat.SF_ARCHIVED`"
msgstr ""

#: ../Doc/library/os.rst:1599
msgid ":data:`stat.SF_IMMUTABLE`"
msgstr ""

#: ../Doc/library/os.rst:1600
msgid ":data:`stat.SF_APPEND`"
msgstr ""

#: ../Doc/library/os.rst:1601
msgid ":data:`stat.SF_NOUNLINK`"
msgstr ""

#: ../Doc/library/os.rst:1602
msgid ":data:`stat.SF_SNAPSHOT`"
msgstr ""

#: ../Doc/library/os.rst:1604
msgid "This function can support :ref:`not following symlinks <follow_symlinks>`."
msgstr ""

#: ../Doc/library/os.rst:1608
msgid "The *follow_symlinks* argument."
msgstr ""

#: ../Doc/library/os.rst:1617
msgid ""
"Change the mode of *path* to the numeric *mode*. *mode* may take one of "
"the following values (as defined in the :mod:`stat` module) or bitwise "
"ORed combinations of them:"
msgstr ""

#: ../Doc/library/os.rst:1621
msgid ":data:`stat.S_ISUID`"
msgstr ""

#: ../Doc/library/os.rst:1622
msgid ":data:`stat.S_ISGID`"
msgstr ""

#: ../Doc/library/os.rst:1623
msgid ":data:`stat.S_ENFMT`"
msgstr ""

#: ../Doc/library/os.rst:1624
msgid ":data:`stat.S_ISVTX`"
msgstr ""

#: ../Doc/library/os.rst:1625
msgid ":data:`stat.S_IREAD`"
msgstr ""

#: ../Doc/library/os.rst:1626
msgid ":data:`stat.S_IWRITE`"
msgstr ""

#: ../Doc/library/os.rst:1627
msgid ":data:`stat.S_IEXEC`"
msgstr ""

#: ../Doc/library/os.rst:1628
msgid ":data:`stat.S_IRWXU`"
msgstr ""

#: ../Doc/library/os.rst:1629
msgid ":data:`stat.S_IRUSR`"
msgstr ""

#: ../Doc/library/os.rst:1630
msgid ":data:`stat.S_IWUSR`"
msgstr ""

#: ../Doc/library/os.rst:1631
msgid ":data:`stat.S_IXUSR`"
msgstr ""

#: ../Doc/library/os.rst:1632
msgid ":data:`stat.S_IRWXG`"
msgstr ""

#: ../Doc/library/os.rst:1633
msgid ":data:`stat.S_IRGRP`"
msgstr ""

#: ../Doc/library/os.rst:1634
msgid ":data:`stat.S_IWGRP`"
msgstr ""

#: ../Doc/library/os.rst:1635
msgid ":data:`stat.S_IXGRP`"
msgstr ""

#: ../Doc/library/os.rst:1636
msgid ":data:`stat.S_IRWXO`"
msgstr ""

#: ../Doc/library/os.rst:1637
msgid ":data:`stat.S_IROTH`"
msgstr ""

#: ../Doc/library/os.rst:1638
msgid ":data:`stat.S_IWOTH`"
msgstr ""

#: ../Doc/library/os.rst:1639
msgid ":data:`stat.S_IXOTH`"
msgstr ""

#: ../Doc/library/os.rst:1641 ../Doc/library/os.rst:1664
#: ../Doc/library/os.rst:2809
msgid ""
"This function can support :ref:`specifying a file descriptor <path_fd>`, "
":ref:`paths relative to directory descriptors <dir_fd>` and :ref:`not "
"following symlinks <follow_symlinks>`."
msgstr ""

#: ../Doc/library/os.rst:1647
msgid ""
"Although Windows supports :func:`chmod`, you can only set the file's "
"read-only flag with it (via the ``stat.S_IWRITE`` and ``stat.S_IREAD`` "
"constants or a corresponding integer value).  All other bits are ignored."
msgstr ""

#: ../Doc/library/os.rst:1651
msgid ""
"Added support for specifying *path* as an open file descriptor, and the "
"*dir_fd* and *follow_symlinks* arguments."
msgstr ""

#: ../Doc/library/os.rst:1661
msgid ""
"Change the owner and group id of *path* to the numeric *uid* and *gid*.  "
"To leave one of the ids unchanged, set it to -1."
msgstr ""

#: ../Doc/library/os.rst:1668
msgid ""
"See :func:`shutil.chown` for a higher-level function that accepts names "
"in addition to numeric ids."
msgstr ""

#: ../Doc/library/os.rst:1673
msgid ""
"Added support for specifying an open file descriptor for *path*, and the "
"*dir_fd* and *follow_symlinks* arguments."
msgstr ""

#: ../Doc/library/os.rst:1677
msgid "Supports a :term:`path-like object`."
msgstr ""

#: ../Doc/library/os.rst:1683
msgid "Change the root directory of the current process to *path*."
msgstr ""

#: ../Doc/library/os.rst:1693
msgid ""
"Change the current working directory to the directory represented by the "
"file descriptor *fd*.  The descriptor must refer to an opened directory, "
"not an open file.  As of Python 3.3, this is equivalent to "
"``os.chdir(fd)``."
msgstr ""

#: ../Doc/library/os.rst:1702
msgid "Return a string representing the current working directory."
msgstr ""

#: ../Doc/library/os.rst:1707
msgid "Return a bytestring representing the current working directory."
msgstr ""

#: ../Doc/library/os.rst:1712
msgid ""
"Set the flags of *path* to the numeric *flags*, like :func:`chflags`, but"
" do not follow symbolic links.  As of Python 3.3, this is equivalent to "
"``os.chflags(path, flags, follow_symlinks=False)``."
msgstr ""

#: ../Doc/library/os.rst:1724
msgid ""
"Change the mode of *path* to the numeric *mode*. If path is a symlink, "
"this affects the symlink rather than the target.  See the docs for "
":func:`chmod` for possible values of *mode*.  As of Python 3.3, this is "
"equivalent to ``os.chmod(path, mode, follow_symlinks=False)``."
msgstr ""

#: ../Doc/library/os.rst:1736
msgid ""
"Change the owner and group id of *path* to the numeric *uid* and *gid*.  "
"This function will not follow symbolic links.  As of Python 3.3, this is "
"equivalent to ``os.chown(path, uid, gid, follow_symlinks=False)``."
msgstr ""

#: ../Doc/library/os.rst:1748
msgid "Create a hard link pointing to *src* named *dst*."
msgstr ""

#: ../Doc/library/os.rst:1750
msgid ""
"This function can support specifying *src_dir_fd* and/or *dst_dir_fd* to "
"supply :ref:`paths relative to directory descriptors <dir_fd>`, and "
":ref:`not following symlinks <follow_symlinks>`."
msgstr ""

#: ../Doc/library/os.rst:1756
msgid "Added Windows support."
msgstr ""

#: ../Doc/library/os.rst:1759
msgid "Added the *src_dir_fd*, *dst_dir_fd*, and *follow_symlinks* arguments."
msgstr ""

#: ../Doc/library/os.rst:1762 ../Doc/library/os.rst:1824
#: ../Doc/library/os.rst:2076 ../Doc/library/os.rst:2109
#: ../Doc/library/os.rst:2736
msgid "Accepts a :term:`path-like object` for *src* and *dst*."
msgstr ""

#: ../Doc/library/os.rst:1768
msgid ""
"Return a list containing the names of the entries in the directory given "
"by *path*.  The list is in arbitrary order, and does not include the "
"special entries ``'.'`` and ``'..'`` even if they are present in the "
"directory."
msgstr ""

#: ../Doc/library/os.rst:1772
msgid ""
"*path* may be a :term:`path-like object`.  If *path* is of type ``bytes``"
" (directly or indirectly through the :class:`PathLike` interface), the "
"filenames returned will also be of type ``bytes``; in all other "
"circumstances, they will be of type ``str``."
msgstr ""

#: ../Doc/library/os.rst:1777 ../Doc/library/os.rst:2152
msgid ""
"This function can also support :ref:`specifying a file descriptor "
"<path_fd>`; the file descriptor must refer to a directory."
msgstr ""

#: ../Doc/library/os.rst:1781
msgid "To encode ``str`` filenames to ``bytes``, use :func:`~os.fsencode`."
msgstr ""

#: ../Doc/library/os.rst:1785
msgid ""
"The :func:`scandir` function returns directory entries along with file "
"attribute information, giving better performance for many common use "
"cases."
msgstr ""

#: ../Doc/library/os.rst:1789
msgid "The *path* parameter became optional."
msgstr ""

#: ../Doc/library/os.rst:1792 ../Doc/library/os.rst:2602
msgid "Added support for specifying an open file descriptor for *path*."
msgstr ""

#: ../Doc/library/os.rst:1801
msgid ""
"Perform the equivalent of an :c:func:`lstat` system call on the given "
"path. Similar to :func:`~os.stat`, but does not follow symbolic links. "
"Return a :class:`stat_result` object."
msgstr ""

#: ../Doc/library/os.rst:1805
msgid ""
"On platforms that do not support symbolic links, this is an alias for "
":func:`~os.stat`."
msgstr ""

#: ../Doc/library/os.rst:1808
msgid ""
"As of Python 3.3, this is equivalent to ``os.stat(path, dir_fd=dir_fd, "
"follow_symlinks=False)``."
msgstr ""

#: ../Doc/library/os.rst:1811 ../Doc/library/os.rst:1842
#: ../Doc/library/os.rst:1903 ../Doc/library/os.rst:1931
#: ../Doc/library/os.rst:2005
msgid ""
"This function can also support :ref:`paths relative to directory "
"descriptors <dir_fd>`."
msgstr ""

#: ../Doc/library/os.rst:1818 ../Doc/library/os.rst:2010
#: ../Doc/library/os.rst:2729
msgid "Added support for Windows 6.0 (Vista) symbolic links."
msgstr ""

#: ../Doc/library/os.rst:1821
msgid "Added the *dir_fd* parameter."
msgstr ""

#: ../Doc/library/os.rst:1830
msgid "Create a directory named *path* with numeric mode *mode*."
msgstr ""

#: ../Doc/library/os.rst:1832
msgid "If the directory already exists, :exc:`FileExistsError` is raised."
msgstr ""

#: ../Doc/library/os.rst:1836
msgid ""
"On some systems, *mode* is ignored.  Where it is used, the current umask "
"value is first masked out.  If bits other than the last 9 (i.e. the last "
"3 digits of the octal representation of the *mode*) are set, their "
"meaning is platform-dependent.  On some platforms, they are ignored and "
"you should call :func:`chmod` explicitly to set them."
msgstr ""

#: ../Doc/library/os.rst:1845
msgid ""
"It is also possible to create temporary directories; see the "
":mod:`tempfile` module's :func:`tempfile.mkdtemp` function."
msgstr ""

#: ../Doc/library/os.rst:1861
msgid ""
"Recursive directory creation function.  Like :func:`mkdir`, but makes all"
" intermediate-level directories needed to contain the leaf directory."
msgstr ""

#: ../Doc/library/os.rst:1864
msgid ""
"The *mode* parameter is passed to :func:`mkdir` for creating the leaf "
"directory; see :ref:`the mkdir() description <mkdir_modebits>` for how it"
" is interpreted.  To set the file permission bits of any newly-created "
"parent directories you can set the umask before invoking "
":func:`makedirs`.  The file permission bits of existing parent "
"directories are not changed."
msgstr ""

#: ../Doc/library/os.rst:1870
msgid ""
"If *exist_ok* is ``False`` (the default), an :exc:`OSError` is raised if "
"the target directory already exists."
msgstr ""

#: ../Doc/library/os.rst:1875
msgid ""
":func:`makedirs` will become confused if the path elements to create "
"include :data:`pardir` (eg. \"..\" on UNIX systems)."
msgstr ""

#: ../Doc/library/os.rst:1878
msgid "This function handles UNC paths correctly."
msgstr ""

#: ../Doc/library/os.rst:1880
msgid "The *exist_ok* parameter."
msgstr ""

#: ../Doc/library/os.rst:1885
msgid ""
"Before Python 3.4.1, if *exist_ok* was ``True`` and the directory "
"existed, :func:`makedirs` would still raise an error if *mode* did not "
"match the mode of the existing directory. Since this behavior was "
"impossible to implement safely, it was removed in Python 3.4.1. See "
":issue:`21082`."
msgstr ""

#: ../Doc/library/os.rst:1893
msgid ""
"The *mode* argument no longer affects the file permission bits of newly-"
"created intermediate-level directories."
msgstr ""

#: ../Doc/library/os.rst:1900
msgid ""
"Create a FIFO (a named pipe) named *path* with numeric mode *mode*. The "
"current umask value is first masked out from the mode."
msgstr ""

#: ../Doc/library/os.rst:1906
msgid ""
"FIFOs are pipes that can be accessed like regular files.  FIFOs exist "
"until they are deleted (for example with :func:`os.unlink`). Generally, "
"FIFOs are used as rendezvous between \"client\" and \"server\" type "
"processes: the server opens the FIFO for reading, and the client opens it"
" for writing.  Note that :func:`mkfifo` doesn't open the FIFO --- it just"
" creates the rendezvous point."
msgstr ""

#: ../Doc/library/os.rst:1923
msgid ""
"Create a filesystem node (file, device special file or named pipe) named "
"*path*. *mode* specifies both the permissions to use and the type of node"
" to be created, being combined (bitwise OR) with one of ``stat.S_IFREG``,"
" ``stat.S_IFCHR``, ``stat.S_IFBLK``, and ``stat.S_IFIFO`` (those "
"constants are available in :mod:`stat`).  For ``stat.S_IFCHR`` and "
"``stat.S_IFBLK``, *device* defines the newly created device special file "
"(probably using :func:`os.makedev`), otherwise it is ignored."
msgstr ""

#: ../Doc/library/os.rst:1945
msgid ""
"Extract the device major number from a raw device number (usually the "
":attr:`st_dev` or :attr:`st_rdev` field from :c:type:`stat`)."
msgstr ""

#: ../Doc/library/os.rst:1951
msgid ""
"Extract the device minor number from a raw device number (usually the "
":attr:`st_dev` or :attr:`st_rdev` field from :c:type:`stat`)."
msgstr ""

#: ../Doc/library/os.rst:1957
msgid "Compose a raw device number from the major and minor device numbers."
msgstr ""

#: ../Doc/library/os.rst:1962
msgid ""
"Return system configuration information relevant to a named file. *name* "
"specifies the configuration value to retrieve; it may be a string which "
"is the name of a defined system value; these names are specified in a "
"number of standards (POSIX.1, Unix 95, Unix 98, and others).  Some "
"platforms define additional names as well.  The names known to the host "
"operating system are given in the ``pathconf_names`` dictionary.  For "
"configuration variables not included in that mapping, passing an integer "
"for *name* is also accepted."
msgstr ""

#: ../Doc/library/os.rst:1975 ../Doc/library/os.rst:2595
#: ../Doc/library/os.rst:2754
msgid "This function can support :ref:`specifying a file descriptor <path_fd>`."
msgstr ""

#: ../Doc/library/os.rst:1986
msgid ""
"Dictionary mapping names accepted by :func:`pathconf` and "
":func:`fpathconf` to the integer values defined for those names by the "
"host operating system.  This can be used to determine the set of names "
"known to the system."
msgstr ""

#: ../Doc/library/os.rst:1995
msgid ""
"Return a string representing the path to which the symbolic link points."
"  The result may be either an absolute or relative pathname; if it is "
"relative, it may be converted to an absolute pathname using "
"``os.path.join(os.path.dirname(path), result)``."
msgstr ""

#: ../Doc/library/os.rst:2000
msgid ""
"If the *path* is a string object (directly or indirectly through a "
":class:`PathLike` interface), the result will also be a string object, "
"and the call may raise a UnicodeDecodeError. If the *path* is a bytes "
"object (direct or indirectly), the result will be a bytes object."
msgstr ""

#: ../Doc/library/os.rst:2008
msgid "Availability: Unix, Windows"
msgstr ""

#: ../Doc/library/os.rst:2022
msgid ""
"Remove (delete) the file *path*.  If *path* is a directory, "
":exc:`OSError` is raised.  Use :func:`rmdir` to remove directories."
msgstr ""

#: ../Doc/library/os.rst:2025 ../Doc/library/os.rst:2119
#: ../Doc/library/os.rst:2712
msgid ""
"This function can support :ref:`paths relative to directory descriptors "
"<dir_fd>`."
msgstr ""

#: ../Doc/library/os.rst:2028
msgid ""
"On Windows, attempting to remove a file that is in use causes an "
"exception to be raised; on Unix, the directory entry is removed but the "
"storage allocated to the file is not made available until the original "
"file is no longer in use."
msgstr ""

#: ../Doc/library/os.rst:2032
msgid "This function is semantically identical to :func:`unlink`."
msgstr ""

#: ../Doc/library/os.rst:2045
msgid ""
"Remove directories recursively.  Works like :func:`rmdir` except that, if"
" the leaf directory is successfully removed, :func:`removedirs`  tries to"
" successively remove every parent directory mentioned in  *path* until an"
" error is raised (which is ignored, because it generally means that a "
"parent directory is not empty). For example, "
"``os.removedirs('foo/bar/baz')`` will first remove the directory "
"``'foo/bar/baz'``, and then remove ``'foo/bar'`` and ``'foo'`` if they "
"are empty. Raises :exc:`OSError` if the leaf directory could not be "
"successfully removed."
msgstr ""

#: ../Doc/library/os.rst:2060
msgid ""
"Rename the file or directory *src* to *dst*.  If *dst* is a directory, "
":exc:`OSError` will be raised.  On Unix, if *dst* exists and is a file, "
"it will be replaced silently if the user has permission.  The operation "
"may fail on some Unix flavors if *src* and *dst* are on different "
"filesystems.  If successful, the renaming will be an atomic operation "
"(this is a POSIX requirement).  On Windows, if *dst* already exists, "
":exc:`OSError` will be raised even if it is a file."
msgstr ""

#: ../Doc/library/os.rst:2068 ../Doc/library/os.rst:2104
msgid ""
"This function can support specifying *src_dir_fd* and/or *dst_dir_fd* to "
"supply :ref:`paths relative to directory descriptors <dir_fd>`."
msgstr ""

#: ../Doc/library/os.rst:2071
msgid ""
"If you want cross-platform overwriting of the destination, use "
":func:`replace`."
msgstr ""

#: ../Doc/library/os.rst:2073
msgid "The *src_dir_fd* and *dst_dir_fd* arguments."
msgstr ""

#: ../Doc/library/os.rst:2082
msgid ""
"Recursive directory or file renaming function. Works like :func:`rename`,"
" except creation of any intermediate directories needed to make the new "
"pathname good is attempted first. After the rename, directories "
"corresponding to rightmost path segments of the old name will be pruned "
"away using :func:`removedirs`."
msgstr ""

#: ../Doc/library/os.rst:2089
msgid ""
"This function can fail with the new directory structure made if you lack "
"permissions needed to remove the leaf directory or file."
msgstr ""

#: ../Doc/library/os.rst:2092
msgid "Accepts a :term:`path-like object` for *old* and *new*."
msgstr ""

#: ../Doc/library/os.rst:2098
msgid ""
"Rename the file or directory *src* to *dst*.  If *dst* is a directory, "
":exc:`OSError` will be raised.  If *dst* exists and is a file, it will be"
" replaced silently if the user has permission.  The operation may fail if"
" *src* and *dst* are on different filesystems.  If successful, the "
"renaming will be an atomic operation (this is a POSIX requirement)."
msgstr ""

#: ../Doc/library/os.rst:2115
msgid ""
"Remove (delete) the directory *path*.  Only works when the directory is "
"empty, otherwise, :exc:`OSError` is raised.  In order to remove whole "
"directory trees, :func:`shutil.rmtree` can be used."
msgstr ""

#: ../Doc/library/os.rst:2122 ../Doc/library/os.rst:2774
msgid "The *dir_fd* parameter."
msgstr ""

#: ../Doc/library/os.rst:2131
msgid ""
"Return an iterator of :class:`os.DirEntry` objects corresponding to the "
"entries in the directory given by *path*. The entries are yielded in "
"arbitrary order, and the special entries ``'.'`` and ``'..'`` are not "
"included."
msgstr ""

#: ../Doc/library/os.rst:2136
msgid ""
"Using :func:`scandir` instead of :func:`listdir` can significantly "
"increase the performance of code that also needs file type or file "
"attribute information, because :class:`os.DirEntry` objects expose this "
"information if the operating system provides it when scanning a "
"directory. All :class:`os.DirEntry` methods may perform a system call, "
"but :func:`~os.DirEntry.is_dir` and :func:`~os.DirEntry.is_file` usually "
"only require a system call for symbolic links; :func:`os.DirEntry.stat` "
"always requires a system call on Unix but only requires one for symbolic "
"links on Windows."
msgstr ""

#: ../Doc/library/os.rst:2146
msgid ""
"*path* may be a :term:`path-like object`.  If *path* is of type ``bytes``"
" (directly or indirectly through the :class:`PathLike` interface), the "
"type of the :attr:`~os.DirEntry.name` and :attr:`~os.DirEntry.path` "
"attributes of each :class:`os.DirEntry` will be ``bytes``; in all other "
"circumstances, they will be of type ``str``."
msgstr ""

#: ../Doc/library/os.rst:2155
msgid ""
"The :func:`scandir` iterator supports the :term:`context manager` "
"protocol and has the following method:"
msgstr ""

#: ../Doc/library/os.rst:2160
msgid "Close the iterator and free acquired resources."
msgstr ""

#: ../Doc/library/os.rst:2162
msgid ""
"This is called automatically when the iterator is exhausted or garbage "
"collected, or when an error happens during iterating.  However it is "
"advisable to call it explicitly or use the :keyword:`with` statement."
msgstr ""

#: ../Doc/library/os.rst:2169
msgid ""
"The following example shows a simple use of :func:`scandir` to display "
"all the files (excluding directories) in the given *path* that don't "
"start with ``'.'``. The ``entry.is_file()`` call will generally not make "
"an additional system call::"
msgstr ""

#: ../Doc/library/os.rst:2181
msgid ""
"On Unix-based systems, :func:`scandir` uses the system's `opendir() "
"<http://pubs.opengroup.org/onlinepubs/009695399/functions/opendir.html>`_"
" and `readdir() "
"<http://pubs.opengroup.org/onlinepubs/009695399/functions/readdir_r.html>`_"
" functions. On Windows, it uses the Win32 `FindFirstFileW "
"<https://msdn.microsoft.com/en-"
"us/library/windows/desktop/aa364418(v=vs.85).aspx>`_ and `FindNextFileW "
"<https://msdn.microsoft.com/en-"
"us/library/windows/desktop/aa364428(v=vs.85).aspx>`_ functions."
msgstr ""

#: ../Doc/library/os.rst:2193
msgid ""
"Added support for the :term:`context manager` protocol and the "
":func:`~scandir.close()` method.  If a :func:`scandir` iterator is "
"neither exhausted nor explicitly closed a :exc:`ResourceWarning` will be "
"emitted in its destructor."
msgstr ""

#: ../Doc/library/os.rst:2199
msgid "The function accepts a :term:`path-like object`."
msgstr ""

#: ../Doc/library/os.rst:2201
msgid "Added support for :ref:`file descriptors <path_fd>` on Unix."
msgstr ""

#: ../Doc/library/os.rst:2207
msgid ""
"Object yielded by :func:`scandir` to expose the file path and other file "
"attributes of a directory entry."
msgstr ""

#: ../Doc/library/os.rst:2210
msgid ""
":func:`scandir` will provide as much of this information as possible "
"without making additional system calls. When a ``stat()`` or ``lstat()`` "
"system call is made, the ``os.DirEntry`` object will cache the result."
msgstr ""

#: ../Doc/library/os.rst:2214
msgid ""
"``os.DirEntry`` instances are not intended to be stored in long-lived "
"data structures; if you know the file metadata has changed or if a long "
"time has elapsed since calling :func:`scandir`, call "
"``os.stat(entry.path)`` to fetch up-to-date information."
msgstr ""

#: ../Doc/library/os.rst:2219
msgid ""
"Because the ``os.DirEntry`` methods can make operating system calls, they"
" may also raise :exc:`OSError`. If you need very fine-grained control "
"over errors, you can catch :exc:`OSError` when calling one of the "
"``os.DirEntry`` methods and handle as appropriate."
msgstr ""

#: ../Doc/library/os.rst:2224
msgid ""
"To be directly usable as a :term:`path-like object`, ``os.DirEntry`` "
"implements the :class:`PathLike` interface."
msgstr ""

#: ../Doc/library/os.rst:2227
msgid "Attributes and methods on a ``os.DirEntry`` instance are as follows:"
msgstr ""

#: ../Doc/library/os.rst:2231
msgid ""
"The entry's base filename, relative to the :func:`scandir` *path* "
"argument."
msgstr ""

#: ../Doc/library/os.rst:2234
msgid ""
"The :attr:`name` attribute will be ``bytes`` if the :func:`scandir` "
"*path* argument is of type ``bytes`` and ``str`` otherwise.  Use "
":func:`~os.fsdecode` to decode byte filenames."
msgstr ""

#: ../Doc/library/os.rst:2240
msgid ""
"The entry's full path name: equivalent to ``os.path.join(scandir_path, "
"entry.name)`` where *scandir_path* is the :func:`scandir` *path* "
"argument.  The path is only absolute if the :func:`scandir` *path* "
"argument was absolute.  If the :func:`scandir` *path* argument was a "
":ref:`file descriptor <path_fd>`, the :attr:`path` attribute is the same "
"as the :attr:`name` attribute."
msgstr ""

#: ../Doc/library/os.rst:2247
msgid ""
"The :attr:`path` attribute will be ``bytes`` if the :func:`scandir` "
"*path* argument is of type ``bytes`` and ``str`` otherwise.  Use "
":func:`~os.fsdecode` to decode byte filenames."
msgstr ""

#: ../Doc/library/os.rst:2253
msgid "Return the inode number of the entry."
msgstr ""

#: ../Doc/library/os.rst:2255
msgid ""
"The result is cached on the ``os.DirEntry`` object. Use "
"``os.stat(entry.path, follow_symlinks=False).st_ino`` to fetch up-to-date"
" information."
msgstr ""

#: ../Doc/library/os.rst:2259
msgid ""
"On the first, uncached call, a system call is required on Windows but not"
" on Unix."
msgstr ""

#: ../Doc/library/os.rst:2264
msgid ""
"Return ``True`` if this entry is a directory or a symbolic link pointing "
"to a directory; return ``False`` if the entry is or points to any other "
"kind of file, or if it doesn't exist anymore."
msgstr ""

#: ../Doc/library/os.rst:2268
msgid ""
"If *follow_symlinks* is ``False``, return ``True`` only if this entry is "
"a directory (without following symlinks); return ``False`` if the entry "
"is any other kind of file or if it doesn't exist anymore."
msgstr ""

#: ../Doc/library/os.rst:2272
msgid ""
"The result is cached on the ``os.DirEntry`` object, with a separate cache"
" for *follow_symlinks* ``True`` and ``False``. Call :func:`os.stat` along"
" with :func:`stat.S_ISDIR` to fetch up-to-date information."
msgstr ""

#: ../Doc/library/os.rst:2276
msgid ""
"On the first, uncached call, no system call is required in most cases. "
"Specifically, for non-symlinks, neither Windows or Unix require a system "
"call, except on certain Unix file systems, such as network file systems, "
"that return ``dirent.d_type == DT_UNKNOWN``. If the entry is a symlink, a"
" system call will be required to follow the symlink unless "
"*follow_symlinks* is ``False``."
msgstr ""

#: ../Doc/library/os.rst:2283 ../Doc/library/os.rst:2313
msgid ""
"This method can raise :exc:`OSError`, such as :exc:`PermissionError`, but"
" :exc:`FileNotFoundError` is caught and not raised."
msgstr ""

#: ../Doc/library/os.rst:2288
msgid ""
"Return ``True`` if this entry is a file or a symbolic link pointing to a "
"file; return ``False`` if the entry is or points to a directory or other "
"non-file entry, or if it doesn't exist anymore."
msgstr ""

#: ../Doc/library/os.rst:2292
msgid ""
"If *follow_symlinks* is ``False``, return ``True`` only if this entry is "
"a file (without following symlinks); return ``False`` if the entry is a "
"directory or other non-file entry, or if it doesn't exist anymore."
msgstr ""

#: ../Doc/library/os.rst:2296
msgid ""
"The result is cached on the ``os.DirEntry`` object. Caching, system calls"
" made, and exceptions raised are as per :func:`~os.DirEntry.is_dir`."
msgstr ""

#: ../Doc/library/os.rst:2301
msgid ""
"Return ``True`` if this entry is a symbolic link (even if broken); return"
" ``False`` if the entry points to a directory or any kind of file, or if "
"it doesn't exist anymore."
msgstr ""

#: ../Doc/library/os.rst:2305
msgid ""
"The result is cached on the ``os.DirEntry`` object. Call "
":func:`os.path.islink` to fetch up-to-date information."
msgstr ""

#: ../Doc/library/os.rst:2308
msgid ""
"On the first, uncached call, no system call is required in most cases. "
"Specifically, neither Windows or Unix require a system call, except on "
"certain Unix file systems, such as network file systems, that return "
"``dirent.d_type == DT_UNKNOWN``."
msgstr ""

#: ../Doc/library/os.rst:2318
msgid ""
"Return a :class:`stat_result` object for this entry. This method follows "
"symbolic links by default; to stat a symbolic link add the "
"``follow_symlinks=False`` argument."
msgstr ""

#: ../Doc/library/os.rst:2322
msgid ""
"On Unix, this method always requires a system call. On Windows, it only "
"requires a system call if *follow_symlinks* is ``True`` and the entry is "
"a symbolic link."
msgstr ""

#: ../Doc/library/os.rst:2326
msgid ""
"On Windows, the ``st_ino``, ``st_dev`` and ``st_nlink`` attributes of the"
" :class:`stat_result` are always set to zero. Call :func:`os.stat` to get"
" these attributes."
msgstr ""

#: ../Doc/library/os.rst:2330
msgid ""
"The result is cached on the ``os.DirEntry`` object, with a separate cache"
" for *follow_symlinks* ``True`` and ``False``. Call :func:`os.stat` to "
"fetch up-to-date information."
msgstr ""

#: ../Doc/library/os.rst:2334
msgid ""
"Note that there is a nice correspondence between several attributes and "
"methods of ``os.DirEntry`` and of :class:`pathlib.Path`.  In particular, "
"the ``name`` attribute has the same meaning, as do the ``is_dir()``, "
"``is_file()``, ``is_symlink()`` and ``stat()`` methods."
msgstr ""

#: ../Doc/library/os.rst:2342
msgid ""
"Added support for the :class:`~os.PathLike` interface.  Added support for"
" :class:`bytes` paths on Windows."
msgstr ""

#: ../Doc/library/os.rst:2349
msgid ""
"Get the status of a file or a file descriptor. Perform the equivalent of "
"a :c:func:`stat` system call on the given path. *path* may be specified "
"as either a string or bytes -- directly or indirectly through the "
":class:`PathLike` interface -- or as an open file descriptor. Return a "
":class:`stat_result` object."
msgstr ""

#: ../Doc/library/os.rst:2355
msgid ""
"This function normally follows symlinks; to stat a symlink add the "
"argument ``follow_symlinks=False``, or use :func:`lstat`."
msgstr ""

#: ../Doc/library/os.rst:2358 ../Doc/library/os.rst:2990
#: ../Doc/library/os.rst:3004 ../Doc/library/os.rst:3018
#: ../Doc/library/os.rst:3036
msgid ""
"This function can support :ref:`specifying a file descriptor <path_fd>` "
"and :ref:`not following symlinks <follow_symlinks>`."
msgstr ""

#: ../Doc/library/os.rst:2363
msgid "Example::"
msgstr ""

#: ../Doc/library/os.rst:2376
msgid ":func:`fstat` and :func:`lstat` functions."
msgstr ""

#: ../Doc/library/os.rst:2378
msgid ""
"Added the *dir_fd* and *follow_symlinks* arguments, specifying a file "
"descriptor instead of a path."
msgstr ""

#: ../Doc/library/os.rst:2388
msgid ""
"Object whose attributes correspond roughly to the members of the "
":c:type:`stat` structure. It is used for the result of :func:`os.stat`, "
":func:`os.fstat` and :func:`os.lstat`."
msgstr ""

#: ../Doc/library/os.rst:2392
msgid "Attributes:"
msgstr ""

#: ../Doc/library/os.rst:2396
msgid "File mode: file type and file mode bits (permissions)."
msgstr ""

#: ../Doc/library/os.rst:2400
msgid ""
"Platform dependent, but if non-zero, uniquely identifies the file for a "
"given value of ``st_dev``. Typically:"
msgstr ""

#: ../Doc/library/os.rst:2403
msgid "the inode number on Unix,"
msgstr ""

#: ../Doc/library/os.rst:2404
msgid ""
"the `file index <https://msdn.microsoft.com/en-us/library/aa363788>`_ on "
"Windows"
msgstr ""

#: ../Doc/library/os.rst:2410
msgid "Identifier of the device on which this file resides."
msgstr ""

#: ../Doc/library/os.rst:2414
msgid "Number of hard links."
msgstr ""

#: ../Doc/library/os.rst:2418
msgid "User identifier of the file owner."
msgstr ""

#: ../Doc/library/os.rst:2422
msgid "Group identifier of the file owner."
msgstr ""

#: ../Doc/library/os.rst:2426
msgid ""
"Size of the file in bytes, if it is a regular file or a symbolic link. "
"The size of a symbolic link is the length of the pathname it contains, "
"without a terminating null byte."
msgstr ""

#: ../Doc/library/os.rst:2430
msgid "Timestamps:"
msgstr ""

#: ../Doc/library/os.rst:2434
msgid "Time of most recent access expressed in seconds."
msgstr ""

#: ../Doc/library/os.rst:2438
msgid "Time of most recent content modification expressed in seconds."
msgstr ""

#: ../Doc/library/os.rst:2442 ../Doc/library/os.rst:2458
msgid "Platform dependent:"
msgstr ""

#: ../Doc/library/os.rst:2444 ../Doc/library/os.rst:2460
msgid "the time of most recent metadata change on Unix,"
msgstr ""

#: ../Doc/library/os.rst:2445
msgid "the time of creation on Windows, expressed in seconds."
msgstr ""

#: ../Doc/library/os.rst:2449
msgid "Time of most recent access expressed in nanoseconds as an integer."
msgstr ""

#: ../Doc/library/os.rst:2453
msgid ""
"Time of most recent content modification expressed in nanoseconds as an "
"integer."
msgstr ""

#: ../Doc/library/os.rst:2461
msgid "the time of creation on Windows, expressed in nanoseconds as an integer."
msgstr ""

#: ../Doc/library/os.rst:2466
msgid ""
"The exact meaning and resolution of the :attr:`st_atime`, "
":attr:`st_mtime`, and :attr:`st_ctime` attributes depend on the operating"
" system and the file system. For example, on Windows systems using the "
"FAT or FAT32 file systems, :attr:`st_mtime` has 2-second resolution, and "
":attr:`st_atime` has only 1-day resolution.  See your operating system "
"documentation for details."
msgstr ""

#: ../Doc/library/os.rst:2473
msgid ""
"Similarly, although :attr:`st_atime_ns`, :attr:`st_mtime_ns`, and "
":attr:`st_ctime_ns` are always expressed in nanoseconds, many systems do "
"not provide nanosecond precision.  On systems that do provide nanosecond "
"precision, the floating-point object used to store :attr:`st_atime`, "
":attr:`st_mtime`, and :attr:`st_ctime` cannot preserve all of it, and as "
"such will be slightly inexact. If you need the exact timestamps you "
"should always use :attr:`st_atime_ns`, :attr:`st_mtime_ns`, and "
":attr:`st_ctime_ns`."
msgstr ""

#: ../Doc/library/os.rst:2482
msgid ""
"On some Unix systems (such as Linux), the following attributes may also "
"be available:"
msgstr ""

#: ../Doc/library/os.rst:2487
msgid ""
"Number of 512-byte blocks allocated for file. This may be smaller than "
":attr:`st_size`/512 when the file has holes."
msgstr ""

#: ../Doc/library/os.rst:2492
msgid ""
"\"Preferred\" blocksize for efficient file system I/O. Writing to a file "
"in smaller chunks may cause an inefficient read-modify-rewrite."
msgstr ""

#: ../Doc/library/os.rst:2497
msgid "Type of device if an inode device."
msgstr ""

#: ../Doc/library/os.rst:2501
msgid "User defined flags for file."
msgstr ""

#: ../Doc/library/os.rst:2503
msgid ""
"On other Unix systems (such as FreeBSD), the following attributes may be "
"available (but may be only filled out if root tries to use them):"
msgstr ""

#: ../Doc/library/os.rst:2508
msgid "File generation number."
msgstr ""

#: ../Doc/library/os.rst:2512
msgid "Time of file creation."
msgstr ""

#: ../Doc/library/os.rst:2514
msgid ""
"On Solaris and derivatives, the following attributes may also be "
"available:"
msgstr ""

#: ../Doc/library/os.rst:2519
msgid ""
"String that uniquely identifies the type of the filesystem that contains "
"the file."
msgstr ""

#: ../Doc/library/os.rst:2522
msgid "On Mac OS systems, the following attributes may also be available:"
msgstr ""

#: ../Doc/library/os.rst:2526
msgid "Real size of the file."
msgstr ""

#: ../Doc/library/os.rst:2530
msgid "Creator of the file."
msgstr ""

#: ../Doc/library/os.rst:2534
msgid "File type."
msgstr ""

#: ../Doc/library/os.rst:2536
msgid "On Windows systems, the following attribute is also available:"
msgstr ""

#: ../Doc/library/os.rst:2540
msgid ""
"Windows file attributes: ``dwFileAttributes`` member of the "
"``BY_HANDLE_FILE_INFORMATION`` structure returned by "
":c:func:`GetFileInformationByHandle`. See the ``FILE_ATTRIBUTE_*`` "
"constants in the :mod:`stat` module."
msgstr ""

#: ../Doc/library/os.rst:2545
msgid ""
"The standard module :mod:`stat` defines functions and constants that are "
"useful for extracting information from a :c:type:`stat` structure. (On "
"Windows, some items are filled with dummy values.)"
msgstr ""

#: ../Doc/library/os.rst:2549
msgid ""
"For backward compatibility, a :class:`stat_result` instance is also "
"accessible as a tuple of at least 10 integers giving the most important "
"(and portable) members of the :c:type:`stat` structure, in the order "
":attr:`st_mode`, :attr:`st_ino`, :attr:`st_dev`, :attr:`st_nlink`, "
":attr:`st_uid`, :attr:`st_gid`, :attr:`st_size`, :attr:`st_atime`, "
":attr:`st_mtime`, :attr:`st_ctime`. More items may be added at the end by"
" some implementations. For compatibility with older Python versions, "
"accessing :class:`stat_result` as a tuple always returns integers."
msgstr ""

#: ../Doc/library/os.rst:2558
msgid ""
"Added the :attr:`st_atime_ns`, :attr:`st_mtime_ns`, and "
":attr:`st_ctime_ns` members."
msgstr ""

#: ../Doc/library/os.rst:2562
msgid "Added the :attr:`st_file_attributes` member on Windows."
msgstr ""

#: ../Doc/library/os.rst:2565
msgid "Windows now returns the file index as :attr:`st_ino` when available."
msgstr ""

#: ../Doc/library/os.rst:2569
msgid "Added the :attr:`st_fstype` member to Solaris/derivatives."
msgstr ""

#: ../Doc/library/os.rst:2574
msgid ""
"Perform a :c:func:`statvfs` system call on the given path.  The return "
"value is an object whose attributes describe the filesystem on the given "
"path, and correspond to the members of the :c:type:`statvfs` structure, "
"namely: :attr:`f_bsize`, :attr:`f_frsize`, :attr:`f_blocks`, "
":attr:`f_bfree`, :attr:`f_bavail`, :attr:`f_files`, :attr:`f_ffree`, "
":attr:`f_favail`, :attr:`f_flag`, :attr:`f_namemax`, :attr:`f_fsid`."
msgstr ""

#: ../Doc/library/os.rst:2581
msgid ""
"Two module-level constants are defined for the :attr:`f_flag` attribute's"
" bit-flags: if :const:`ST_RDONLY` is set, the filesystem is mounted read-"
"only, and if :const:`ST_NOSUID` is set, the semantics of setuid/setgid "
"bits are disabled or not supported."
msgstr ""

#: ../Doc/library/os.rst:2586
msgid ""
"Additional module-level constants are defined for GNU/glibc based "
"systems. These are :const:`ST_NODEV` (disallow access to device special "
"files), :const:`ST_NOEXEC` (disallow program execution), "
":const:`ST_SYNCHRONOUS` (writes are synced at once), :const:`ST_MANDLOCK`"
" (allow mandatory locks on an FS), :const:`ST_WRITE` (write on "
"file/directory/symlink), :const:`ST_APPEND` (append-only file), "
":const:`ST_IMMUTABLE` (immutable file), :const:`ST_NOATIME` (do not "
"update access times), :const:`ST_NODIRATIME` (do not update directory "
"access times), :const:`ST_RELATIME` (update atime relative to "
"mtime/ctime)."
msgstr ""

#: ../Doc/library/os.rst:2599
msgid "The :const:`ST_RDONLY` and :const:`ST_NOSUID` constants were added."
msgstr ""

#: ../Doc/library/os.rst:2605
msgid ""
"The :const:`ST_NODEV`, :const:`ST_NOEXEC`, :const:`ST_SYNCHRONOUS`, "
":const:`ST_MANDLOCK`, :const:`ST_WRITE`, :const:`ST_APPEND`, "
":const:`ST_IMMUTABLE`, :const:`ST_NOATIME`, :const:`ST_NODIRATIME`, and "
":const:`ST_RELATIME` constants were added."
msgstr ""

#: ../Doc/library/os.rst:2614
msgid "Added :attr:`f_fsid`."
msgstr ""

#: ../Doc/library/os.rst:2620
msgid ""
"A :class:`~collections.abc.Set` object indicating which functions in the "
":mod:`os` module permit use of their *dir_fd* parameter.  Different "
"platforms provide different functionality, and an option that might work "
"on one might be unsupported on another.  For consistency's sakes, "
"functions that support *dir_fd* always allow specifying the parameter, "
"but will raise an exception if the functionality is not actually "
"available."
msgstr ""

#: ../Doc/library/os.rst:2627
msgid ""
"To check whether a particular function permits use of its *dir_fd* "
"parameter, use the ``in`` operator on ``supports_dir_fd``.  As an "
"example, this expression determines whether the *dir_fd* parameter of "
":func:`os.stat` is locally available::"
msgstr ""

#: ../Doc/library/os.rst:2634
msgid ""
"Currently *dir_fd* parameters only work on Unix platforms; none of them "
"work on Windows."
msgstr ""

#: ../Doc/library/os.rst:2642
msgid ""
"A :class:`~collections.abc.Set` object indicating which functions in the "
":mod:`os` module permit use of the *effective_ids* parameter for "
":func:`os.access`.  If the local platform supports it, the collection "
"will contain :func:`os.access`, otherwise it will be empty."
msgstr ""

#: ../Doc/library/os.rst:2647
msgid ""
"To check whether you can use the *effective_ids* parameter for "
":func:`os.access`, use the ``in`` operator on ``supports_effective_ids``,"
" like so::"
msgstr ""

#: ../Doc/library/os.rst:2653
msgid ""
"Currently *effective_ids* only works on Unix platforms; it does not work "
"on Windows."
msgstr ""

#: ../Doc/library/os.rst:2661
msgid ""
"A :class:`~collections.abc.Set` object indicating which functions in the "
":mod:`os` module permit specifying their *path* parameter as an open file"
" descriptor.  Different platforms provide different functionality, and an"
" option that might work on one might be unsupported on another.  For "
"consistency's sakes, functions that support *fd* always allow specifying "
"the parameter, but will raise an exception if the functionality is not "
"actually available."
msgstr ""

#: ../Doc/library/os.rst:2669
msgid ""
"To check whether a particular function permits specifying an open file "
"descriptor for its *path* parameter, use the ``in`` operator on "
"``supports_fd``. As an example, this expression determines whether "
":func:`os.chdir` accepts open file descriptors when called on your local "
"platform::"
msgstr ""

#: ../Doc/library/os.rst:2682
msgid ""
"A :class:`~collections.abc.Set` object indicating which functions in the "
":mod:`os` module permit use of their *follow_symlinks* parameter.  "
"Different platforms provide different functionality, and an option that "
"might work on one might be unsupported on another.  For consistency's "
"sakes, functions that support *follow_symlinks* always allow specifying "
"the parameter, but will raise an exception if the functionality is not "
"actually available."
msgstr ""

#: ../Doc/library/os.rst:2689
msgid ""
"To check whether a particular function permits use of its "
"*follow_symlinks* parameter, use the ``in`` operator on "
"``supports_follow_symlinks``.  As an example, this expression determines "
"whether the *follow_symlinks* parameter of :func:`os.stat` is locally "
"available::"
msgstr ""

#: ../Doc/library/os.rst:2701
msgid "Create a symbolic link pointing to *src* named *dst*."
msgstr ""

#: ../Doc/library/os.rst:2703
msgid ""
"On Windows, a symlink represents either a file or a directory, and does "
"not morph to the target dynamically.  If the target is present, the type "
"of the symlink will be created to match. Otherwise, the symlink will be "
"created as a directory if *target_is_directory* is ``True`` or a file "
"symlink (the default) otherwise.  On non-Window platforms, "
"*target_is_directory* is ignored."
msgstr ""

#: ../Doc/library/os.rst:2709
msgid ""
"Symbolic link support was introduced in Windows 6.0 (Vista).  "
":func:`symlink` will raise a :exc:`NotImplementedError` on Windows "
"versions earlier than 6.0."
msgstr ""

#: ../Doc/library/os.rst:2717
msgid ""
"On Windows, the *SeCreateSymbolicLinkPrivilege* is required in order to "
"successfully create symlinks. This privilege is not typically granted to "
"regular users but is available to accounts which can escalate privileges "
"to the administrator level. Either obtaining the privilege or running "
"your application as an administrator are ways to successfully create "
"symlinks."
msgstr ""

#: ../Doc/library/os.rst:2724
msgid ""
":exc:`OSError` is raised when the function is called by an unprivileged "
"user."
msgstr ""

#: ../Doc/library/os.rst:2732
msgid ""
"Added the *dir_fd* argument, and now allow *target_is_directory* on non-"
"Windows platforms."
msgstr ""

#: ../Doc/library/os.rst:2742
msgid "Force write of everything to disk."
msgstr ""

#: ../Doc/library/os.rst:2751
msgid ""
"Truncate the file corresponding to *path*, so that it is at most *length*"
" bytes in size."
msgstr ""

#: ../Doc/library/os.rst:2769
msgid ""
"Remove (delete) the file *path*.  This function is semantically identical"
" to :func:`remove`; the ``unlink`` name is its traditional Unix name.  "
"Please see the documentation for :func:`remove` for further information."
msgstr ""

#: ../Doc/library/os.rst:2783
msgid "Set the access and modified times of the file specified by *path*."
msgstr ""

#: ../Doc/library/os.rst:2785
msgid ""
":func:`utime` takes two optional parameters, *times* and *ns*. These "
"specify the times set on *path* and are used as follows:"
msgstr ""

#: ../Doc/library/os.rst:2788
msgid ""
"If *ns* is specified, it must be a 2-tuple of the form ``(atime_ns, "
"mtime_ns)`` where each member is an int expressing nanoseconds."
msgstr ""

#: ../Doc/library/os.rst:2791
msgid ""
"If *times* is not ``None``, it must be a 2-tuple of the form ``(atime, "
"mtime)`` where each member is an int or float expressing seconds."
msgstr ""

#: ../Doc/library/os.rst:2794
msgid ""
"If *times* is ``None`` and *ns* is unspecified, this is equivalent to "
"specifying ``ns=(atime_ns, mtime_ns)`` where both times are the current "
"time."
msgstr ""

#: ../Doc/library/os.rst:2798
msgid "It is an error to specify tuples for both *times* and *ns*."
msgstr ""

#: ../Doc/library/os.rst:2800
msgid ""
"Whether a directory can be given for *path* depends on whether the "
"operating system implements directories as files (for example, Windows "
"does not).  Note that the exact times you set here may not be returned by"
" a subsequent :func:`~os.stat` call, depending on the resolution with "
"which your operating system records access and modification times; see "
":func:`~os.stat`.  The best way to preserve exact times is to use the "
"*st_atime_ns* and *st_mtime_ns* fields from the :func:`os.stat` result "
"object with the *ns* parameter to `utime`."
msgstr ""

#: ../Doc/library/os.rst:2813
msgid ""
"Added support for specifying an open file descriptor for *path*, and the "
"*dir_fd*, *follow_symlinks*, and *ns* parameters."
msgstr ""

#: ../Doc/library/os.rst:2827
msgid ""
"Generate the file names in a directory tree by walking the tree either "
"top-down or bottom-up. For each directory in the tree rooted at directory"
" *top* (including *top* itself), it yields a 3-tuple ``(dirpath, "
"dirnames, filenames)``."
msgstr ""

#: ../Doc/library/os.rst:2832
msgid ""
"*dirpath* is a string, the path to the directory.  *dirnames* is a list "
"of the names of the subdirectories in *dirpath* (excluding ``'.'`` and "
"``'..'``). *filenames* is a list of the names of the non-directory files "
"in *dirpath*. Note that the names in the lists contain no path "
"components.  To get a full path (which begins with *top*) to a file or "
"directory in *dirpath*, do ``os.path.join(dirpath, name)``."
msgstr ""

#: ../Doc/library/os.rst:2839
msgid ""
"If optional argument *topdown* is ``True`` or not specified, the triple "
"for a directory is generated before the triples for any of its "
"subdirectories (directories are generated top-down).  If *topdown* is "
"``False``, the triple for a directory is generated after the triples for "
"all of its subdirectories (directories are generated bottom-up). No "
"matter the value of *topdown*, the list of subdirectories is retrieved "
"before the tuples for the directory and its subdirectories are generated."
msgstr ""

#: ../Doc/library/os.rst:2847
msgid ""
"When *topdown* is ``True``, the caller can modify the *dirnames* list in-"
"place (perhaps using :keyword:`del` or slice assignment), and "
":func:`walk` will only recurse into the subdirectories whose names remain"
" in *dirnames*; this can be used to prune the search, impose a specific "
"order of visiting, or even to inform :func:`walk` about directories the "
"caller creates or renames before it resumes :func:`walk` again.  "
"Modifying *dirnames* when *topdown* is ``False`` has no effect on the "
"behavior of the walk, because in bottom-up mode the directories in "
"*dirnames* are generated before *dirpath* itself is generated."
msgstr ""

#: ../Doc/library/os.rst:2856
msgid ""
"By default, errors from the :func:`scandir` call are ignored.  If "
"optional argument *onerror* is specified, it should be a function; it "
"will be called with one argument, an :exc:`OSError` instance.  It can "
"report the error to continue with the walk, or raise the exception to "
"abort the walk.  Note that the filename is available as the ``filename`` "
"attribute of the exception object."
msgstr ""

#: ../Doc/library/os.rst:2862
msgid ""
"By default, :func:`walk` will not walk down into symbolic links that "
"resolve to directories. Set *followlinks* to ``True`` to visit "
"directories pointed to by symlinks, on systems that support them."
msgstr ""

#: ../Doc/library/os.rst:2868
msgid ""
"Be aware that setting *followlinks* to ``True`` can lead to infinite "
"recursion if a link points to a parent directory of itself. :func:`walk` "
"does not keep track of the directories it visited already."
msgstr ""

#: ../Doc/library/os.rst:2874
msgid ""
"If you pass a relative pathname, don't change the current working "
"directory between resumptions of :func:`walk`.  :func:`walk` never "
"changes the current directory, and assumes that its caller doesn't "
"either."
msgstr ""

#: ../Doc/library/os.rst:2878 ../Doc/library/os.rst:2937
msgid ""
"This example displays the number of bytes taken by non-directory files in"
" each directory under the starting directory, except that it doesn't look"
" under any CVS subdirectory::"
msgstr ""

#: ../Doc/library/os.rst:2891
msgid ""
"In the next example (simple implementation of :func:`shutil.rmtree`), "
"walking the tree bottom-up is essential, :func:`rmdir` doesn't allow "
"deleting a directory before the directory is empty::"
msgstr ""

#: ../Doc/library/os.rst:2906
msgid ""
"This function now calls :func:`os.scandir` instead of :func:`os.listdir`,"
" making it faster by reducing the number of calls to :func:`os.stat`."
msgstr ""

#: ../Doc/library/os.rst:2920
msgid ""
"This behaves exactly like :func:`walk`, except that it yields a 4-tuple "
"``(dirpath, dirnames, filenames, dirfd)``, and it supports ``dir_fd``."
msgstr ""

#: ../Doc/library/os.rst:2923
msgid ""
"*dirpath*, *dirnames* and *filenames* are identical to :func:`walk` "
"output, and *dirfd* is a file descriptor referring to the directory "
"*dirpath*."
msgstr ""

#: ../Doc/library/os.rst:2926
msgid ""
"This function always supports :ref:`paths relative to directory "
"descriptors <dir_fd>` and :ref:`not following symlinks "
"<follow_symlinks>`.  Note however that, unlike other functions, the "
":func:`fwalk` default value for *follow_symlinks* is ``False``."
msgstr ""

#: ../Doc/library/os.rst:2933
msgid ""
"Since :func:`fwalk` yields file descriptors, those are only valid until "
"the next iteration step, so you should duplicate them (e.g. with "
":func:`dup`) if you want to keep them longer."
msgstr ""

#: ../Doc/library/os.rst:2950
msgid ""
"In the next example, walking the tree bottom-up is essential: "
":func:`rmdir` doesn't allow deleting a directory before the directory is "
"empty::"
msgstr ""

#: ../Doc/library/os.rst:2972
msgid "Added support for :class:`bytes` paths."
msgstr ""

#: ../Doc/library/os.rst:2977
msgid "Linux extended attributes"
msgstr ""

#: ../Doc/library/os.rst:2981
msgid "These functions are all available on Linux only."
msgstr ""

#: ../Doc/library/os.rst:2985
msgid ""
"Return the value of the extended filesystem attribute *attribute* for "
"*path*. *attribute* can be bytes or str (directly or indirectly through "
"the :class:`PathLike` interface). If it is str, it is encoded with the "
"filesystem encoding."
msgstr ""

#: ../Doc/library/os.rst:2993 ../Doc/library/os.rst:3021
#: ../Doc/library/os.rst:3044
msgid "Accepts a :term:`path-like object` for *path* and *attribute*."
msgstr ""

#: ../Doc/library/os.rst:2999
msgid ""
"Return a list of the extended filesystem attributes on *path*.  The "
"attributes in the list are represented as strings decoded with the "
"filesystem encoding.  If *path* is ``None``, :func:`listxattr` will "
"examine the current directory."
msgstr ""

#: ../Doc/library/os.rst:3013
msgid ""
"Removes the extended filesystem attribute *attribute* from *path*. "
"*attribute* should be bytes or str (directly or indirectly through the "
":class:`PathLike` interface). If it is a string, it is encoded with the "
"filesystem encoding."
msgstr ""

#: ../Doc/library/os.rst:3027
msgid ""
"Set the extended filesystem attribute *attribute* on *path* to *value*. "
"*attribute* must be a bytes or str with no embedded NULs (directly or "
"indirectly through the :class:`PathLike` interface). If it is a str, it "
"is encoded with the filesystem encoding.  *flags* may be "
":data:`XATTR_REPLACE` or :data:`XATTR_CREATE`. If :data:`XATTR_REPLACE` "
"is given and the attribute does not exist, ``EEXISTS`` will be raised. If"
" :data:`XATTR_CREATE` is given and the attribute already exists, the "
"attribute will not be created and ``ENODATA`` will be raised."
msgstr ""

#: ../Doc/library/os.rst:3041
msgid ""
"A bug in Linux kernel versions less than 2.6.39 caused the flags argument"
" to be ignored on some filesystems."
msgstr ""

#: ../Doc/library/os.rst:3050
msgid ""
"The maximum size the value of an extended attribute can be. Currently, "
"this is 64 KiB on Linux."
msgstr ""

#: ../Doc/library/os.rst:3056
msgid ""
"This is a possible value for the flags argument in :func:`setxattr`. It "
"indicates the operation must create an attribute."
msgstr ""

#: ../Doc/library/os.rst:3062
msgid ""
"This is a possible value for the flags argument in :func:`setxattr`. It "
"indicates the operation must replace an existing attribute."
msgstr ""

#: ../Doc/library/os.rst:3069
msgid "Process Management"
msgstr ""

#: ../Doc/library/os.rst:3071
msgid "These functions may be used to create and manage processes."
msgstr ""

#: ../Doc/library/os.rst:3073
msgid ""
"The various :func:`exec\\* <execl>` functions take a list of arguments "
"for the new program loaded into the process.  In each case, the first of "
"these arguments is passed to the new program as its own name rather than "
"as an argument a user may have typed on a command line.  For the C "
"programmer, this is the ``argv[0]`` passed to a program's :c:func:`main`."
"  For example, ``os.execv('/bin/echo', ['foo', 'bar'])`` will only print "
"``bar`` on standard output; ``foo`` will seem to be ignored."
msgstr ""

#: ../Doc/library/os.rst:3084
msgid ""
"Generate a :const:`SIGABRT` signal to the current process.  On Unix, the "
"default behavior is to produce a core dump; on Windows, the process "
"immediately returns an exit code of ``3``.  Be aware that calling this "
"function will not call the Python signal handler registered for "
":const:`SIGABRT` with :func:`signal.signal`."
msgstr ""

#: ../Doc/library/os.rst:3100
msgid ""
"These functions all execute a new program, replacing the current process;"
" they do not return.  On Unix, the new executable is loaded into the "
"current process, and will have the same process id as the caller.  Errors"
" will be reported as :exc:`OSError` exceptions."
msgstr ""

#: ../Doc/library/os.rst:3105
msgid ""
"The current process is replaced immediately. Open file objects and "
"descriptors are not flushed, so if there may be data buffered on these "
"open files, you should flush them using :func:`sys.stdout.flush` or "
":func:`os.fsync` before calling an :func:`exec\\* <execl>` function."
msgstr ""

#: ../Doc/library/os.rst:3111
msgid ""
"The \"l\" and \"v\" variants of the :func:`exec\\* <execl>` functions "
"differ in how command-line arguments are passed.  The \"l\" variants are "
"perhaps the easiest to work with if the number of parameters is fixed "
"when the code is written; the individual parameters simply become "
"additional parameters to the :func:`execl\\*` functions.  The \"v\" "
"variants are good when the number of parameters is variable, with the "
"arguments being passed in a list or tuple as the *args* parameter.  In "
"either case, the arguments to the child process should start with the "
"name of the command being run, but this is not enforced."
msgstr ""

#: ../Doc/library/os.rst:3120
msgid ""
"The variants which include a \"p\" near the end (:func:`execlp`, "
":func:`execlpe`, :func:`execvp`, and :func:`execvpe`) will use the "
":envvar:`PATH` environment variable to locate the program *file*.  When "
"the environment is being replaced (using one of the :func:`exec\\*e "
"<execl>` variants, discussed in the next paragraph), the new environment "
"is used as the source of the :envvar:`PATH` variable. The other variants,"
" :func:`execl`, :func:`execle`, :func:`execv`, and :func:`execve`, will "
"not use the :envvar:`PATH` variable to locate the executable; *path* must"
" contain an appropriate absolute or relative path."
msgstr ""

#: ../Doc/library/os.rst:3130
msgid ""
"For :func:`execle`, :func:`execlpe`, :func:`execve`, and :func:`execvpe` "
"(note that these all end in \"e\"), the *env* parameter must be a mapping"
" which is used to define the environment variables for the new process "
"(these are used instead of the current process' environment); the "
"functions :func:`execl`, :func:`execlp`, :func:`execv`, and "
":func:`execvp` all cause the new process to inherit the environment of "
"the current process."
msgstr ""

#: ../Doc/library/os.rst:3137
msgid ""
"For :func:`execve` on some platforms, *path* may also be specified as an "
"open file descriptor.  This functionality may not be supported on your "
"platform; you can check whether or not it is available using "
":data:`os.supports_fd`. If it is unavailable, using it will raise a "
":exc:`NotImplementedError`."
msgstr ""

#: ../Doc/library/os.rst:3144
msgid ""
"Added support for specifying an open file descriptor for *path* for "
":func:`execve`."
msgstr ""

#: ../Doc/library/os.rst:3153
msgid ""
"Exit the process with status *n*, without calling cleanup handlers, "
"flushing stdio buffers, etc."
msgstr ""

#: ../Doc/library/os.rst:3158
msgid ""
"The standard way to exit is ``sys.exit(n)``.  :func:`_exit` should "
"normally only be used in the child process after a :func:`fork`."
msgstr ""

#: ../Doc/library/os.rst:3161
msgid ""
"The following exit codes are defined and can be used with :func:`_exit`, "
"although they are not required.  These are typically used for system "
"programs written in Python, such as a mail server's external command "
"delivery program."
msgstr ""

#: ../Doc/library/os.rst:3167
msgid ""
"Some of these may not be available on all Unix platforms, since there is "
"some variation.  These constants are defined where they are defined by "
"the underlying platform."
msgstr ""

#: ../Doc/library/os.rst:3174
msgid "Exit code that means no error occurred."
msgstr ""

#: ../Doc/library/os.rst:3181
msgid ""
"Exit code that means the command was used incorrectly, such as when the "
"wrong number of arguments are given."
msgstr ""

#: ../Doc/library/os.rst:3189
msgid "Exit code that means the input data was incorrect."
msgstr ""

#: ../Doc/library/os.rst:3196
msgid "Exit code that means an input file did not exist or was not readable."
msgstr ""

#: ../Doc/library/os.rst:3203
msgid "Exit code that means a specified user did not exist."
msgstr ""

#: ../Doc/library/os.rst:3210
msgid "Exit code that means a specified host did not exist."
msgstr ""

#: ../Doc/library/os.rst:3217
msgid "Exit code that means that a required service is unavailable."
msgstr ""

#: ../Doc/library/os.rst:3224
msgid "Exit code that means an internal software error was detected."
msgstr ""

#: ../Doc/library/os.rst:3231
msgid ""
"Exit code that means an operating system error was detected, such as the "
"inability to fork or create a pipe."
msgstr ""

#: ../Doc/library/os.rst:3239
msgid ""
"Exit code that means some system file did not exist, could not be opened,"
" or had some other kind of error."
msgstr ""

#: ../Doc/library/os.rst:3247
msgid "Exit code that means a user specified output file could not be created."
msgstr ""

#: ../Doc/library/os.rst:3254
msgid "Exit code that means that an error occurred while doing I/O on some file."
msgstr ""

#: ../Doc/library/os.rst:3261
msgid ""
"Exit code that means a temporary failure occurred.  This indicates "
"something that may not really be an error, such as a network connection "
"that couldn't be made during a retryable operation."
msgstr ""

#: ../Doc/library/os.rst:3270
msgid ""
"Exit code that means that a protocol exchange was illegal, invalid, or "
"not understood."
msgstr ""

#: ../Doc/library/os.rst:3278
msgid ""
"Exit code that means that there were insufficient permissions to perform "
"the operation (but not intended for file system problems)."
msgstr ""

#: ../Doc/library/os.rst:3286
msgid "Exit code that means that some kind of configuration error occurred."
msgstr ""

#: ../Doc/library/os.rst:3293
msgid "Exit code that means something like \"an entry was not found\"."
msgstr ""

#: ../Doc/library/os.rst:3300
msgid ""
"Fork a child process.  Return ``0`` in the child and the child's process "
"id in the parent.  If an error occurs :exc:`OSError` is raised."
msgstr ""

#: ../Doc/library/os.rst:3303
msgid ""
"Note that some platforms including FreeBSD <= 6.3 and Cygwin have known "
"issues when using fork() from a thread."
msgstr ""

#: ../Doc/library/os.rst:3308
msgid "See :mod:`ssl` for applications that use the SSL module with fork()."
msgstr ""

#: ../Doc/library/os.rst:3315
msgid ""
"Fork a child process, using a new pseudo-terminal as the child's "
"controlling terminal. Return a pair of ``(pid, fd)``, where *pid* is "
"``0`` in the child, the new child's process id in the parent, and *fd* is"
" the file descriptor of the master end of the pseudo-terminal.  For a "
"more portable approach, use the :mod:`pty` module.  If an error occurs "
":exc:`OSError` is raised."
msgstr ""

#: ../Doc/library/os.rst:3330
msgid ""
"Send signal *sig* to the process *pid*.  Constants for the specific "
"signals available on the host platform are defined in the :mod:`signal` "
"module."
msgstr ""

#: ../Doc/library/os.rst:3333
msgid ""
"Windows: The :data:`signal.CTRL_C_EVENT` and "
":data:`signal.CTRL_BREAK_EVENT` signals are special signals which can "
"only be sent to console processes which share a common console window, "
"e.g., some subprocesses. Any other value for *sig* will cause the process"
" to be unconditionally killed by the TerminateProcess API, and the exit "
"code will be set to *sig*. The Windows version of :func:`kill` "
"additionally takes process handles to be killed."
msgstr ""

#: ../Doc/library/os.rst:3341
msgid "See also :func:`signal.pthread_kill`."
msgstr ""

#: ../Doc/library/os.rst:3343
msgid "Windows support."
msgstr ""

#: ../Doc/library/os.rst:3353
msgid "Send the signal *sig* to the process group *pgid*."
msgstr ""

#: ../Doc/library/os.rst:3360
msgid "Add *increment* to the process's \"niceness\".  Return the new niceness."
msgstr ""

#: ../Doc/library/os.rst:3367
msgid ""
"Lock program segments into memory.  The value of *op* (defined in "
"``<sys/lock.h>``) determines which segments are locked."
msgstr ""

#: ../Doc/library/os.rst:3375
msgid ""
"Open a pipe to or from command *cmd*. The return value is an open file "
"object connected to the pipe, which can be read or written depending on "
"whether *mode* is ``'r'`` (default) or ``'w'``. The *buffering* argument "
"has the same meaning as the corresponding argument to the built-in "
":func:`open` function. The returned file object reads or writes text "
"strings rather than bytes."
msgstr ""

#: ../Doc/library/os.rst:3382
msgid ""
"The ``close`` method returns :const:`None` if the subprocess exited "
"successfully, or the subprocess's return code if there was an error. On "
"POSIX systems, if the return code is positive it represents the return "
"value of the process left-shifted by one byte.  If the return code is "
"negative, the process was terminated by the signal given by the negated "
"value of the return code.  (For example, the return value might be ``- "
"signal.SIGKILL`` if the subprocess was killed.)  On Windows systems, the "
"return value contains the signed integer return code from the child "
"process."
msgstr ""

#: ../Doc/library/os.rst:3392
msgid ""
"This is implemented using :class:`subprocess.Popen`; see that class's "
"documentation for more powerful ways to manage and communicate with "
"subprocesses."
msgstr ""

#: ../Doc/library/os.rst:3400
msgid ""
"Register callables to be executed when a new child process is forked "
"using :func:`os.fork` or similar process cloning APIs. The parameters are"
" optional and keyword-only. Each specifies a different call point."
msgstr ""

#: ../Doc/library/os.rst:3405
msgid "*before* is a function called before forking a child process."
msgstr ""

#: ../Doc/library/os.rst:3406
msgid ""
"*after_in_parent* is a function called from the parent process after "
"forking a child process."
msgstr ""

#: ../Doc/library/os.rst:3408
msgid "*after_in_child* is a function called from the child process."
msgstr ""

#: ../Doc/library/os.rst:3410
msgid ""
"These calls are only made if control is expected to return to the Python "
"interpreter.  A typical :mod:`subprocess` launch will not trigger them as"
" the child is not going to re-enter the interpreter."
msgstr ""

#: ../Doc/library/os.rst:3414
msgid ""
"Functions registered for execution before forking are called in reverse "
"registration order.  Functions registered for execution after forking "
"(either in the parent or in the child) are called in registration order."
msgstr ""

#: ../Doc/library/os.rst:3419
msgid ""
"Note that :c:func:`fork` calls made by third-party C code may not call "
"those functions, unless it explicitly calls :c:func:`PyOS_BeforeFork`, "
":c:func:`PyOS_AfterFork_Parent` and :c:func:`PyOS_AfterFork_Child`."
msgstr ""

#: ../Doc/library/os.rst:3423
msgid "There is no way to unregister a function."
msgstr ""

#: ../Doc/library/os.rst:3439
msgid "Execute the program *path* in a new process."
msgstr ""

#: ../Doc/library/os.rst:3441
msgid ""
"(Note that the :mod:`subprocess` module provides more powerful facilities"
" for spawning new processes and retrieving their results; using that "
"module is preferable to using these functions.  Check especially the :ref"
":`subprocess-replacements` section.)"
msgstr ""

#: ../Doc/library/os.rst:3446
msgid ""
"If *mode* is :const:`P_NOWAIT`, this function returns the process id of "
"the new process; if *mode* is :const:`P_WAIT`, returns the process's exit"
" code if it exits normally, or ``-signal``, where *signal* is the signal "
"that killed the process.  On Windows, the process id will actually be the"
" process handle, so can be used with the :func:`waitpid` function."
msgstr ""

#: ../Doc/library/os.rst:3452
msgid ""
"The \"l\" and \"v\" variants of the :func:`spawn\\* <spawnl>` functions "
"differ in how command-line arguments are passed.  The \"l\" variants are "
"perhaps the easiest to work with if the number of parameters is fixed "
"when the code is written; the individual parameters simply become "
"additional parameters to the :func:`spawnl\\*` functions.  The \"v\" "
"variants are good when the number of parameters is variable, with the "
"arguments being passed in a list or tuple as the *args* parameter.  In "
"either case, the arguments to the child process must start with the name "
"of the command being run."
msgstr ""

#: ../Doc/library/os.rst:3461
msgid ""
"The variants which include a second \"p\" near the end (:func:`spawnlp`, "
":func:`spawnlpe`, :func:`spawnvp`, and :func:`spawnvpe`) will use the "
":envvar:`PATH` environment variable to locate the program *file*.  When "
"the environment is being replaced (using one of the :func:`spawn\\*e "
"<spawnl>` variants, discussed in the next paragraph), the new environment"
" is used as the source of the :envvar:`PATH` variable.  The other "
"variants, :func:`spawnl`, :func:`spawnle`, :func:`spawnv`, and "
":func:`spawnve`, will not use the :envvar:`PATH` variable to locate the "
"executable; *path* must contain an appropriate absolute or relative path."
msgstr ""

#: ../Doc/library/os.rst:3471
msgid ""
"For :func:`spawnle`, :func:`spawnlpe`, :func:`spawnve`, and "
":func:`spawnvpe` (note that these all end in \"e\"), the *env* parameter "
"must be a mapping which is used to define the environment variables for "
"the new process (they are used instead of the current process' "
"environment); the functions :func:`spawnl`, :func:`spawnlp`, "
":func:`spawnv`, and :func:`spawnvp` all cause the new process to inherit "
"the environment of the current process.  Note that keys and values in the"
" *env* dictionary must be strings; invalid keys or values will cause the "
"function to fail, with a return value of ``127``."
msgstr ""

#: ../Doc/library/os.rst:3480
msgid ""
"As an example, the following calls to :func:`spawnlp` and "
":func:`spawnvpe` are equivalent::"
msgstr ""

#: ../Doc/library/os.rst:3489
msgid ""
"Availability: Unix, Windows.  :func:`spawnlp`, :func:`spawnlpe`, "
":func:`spawnvp` and :func:`spawnvpe` are not available on Windows.  "
":func:`spawnle` and :func:`spawnve` are not thread-safe on Windows; we "
"advise you to use the :mod:`subprocess` module instead."
msgstr ""

#: ../Doc/library/os.rst:3501
msgid ""
"Possible values for the *mode* parameter to the :func:`spawn\\* <spawnl>`"
" family of functions.  If either of these values is given, the "
":func:`spawn\\*` functions will return as soon as the new process has "
"been created, with the process id as the return value."
msgstr ""

#: ../Doc/library/os.rst:3511
msgid ""
"Possible value for the *mode* parameter to the :func:`spawn\\* <spawnl>` "
"family of functions.  If this is given as *mode*, the :func:`spawn\\*` "
"functions will not return until the new process has run to completion and"
" will return the exit code of the process the run is successful, or "
"``-signal`` if a signal kills the process."
msgstr ""

#: ../Doc/library/os.rst:3523
msgid ""
"Possible values for the *mode* parameter to the :func:`spawn\\* <spawnl>`"
" family of functions.  These are less portable than those listed above. "
":const:`P_DETACH` is similar to :const:`P_NOWAIT`, but the new process is"
" detached from the console of the calling process. If :const:`P_OVERLAY` "
"is used, the current process will be replaced; the :func:`spawn\\* "
"<spawnl>` function will not return."
msgstr ""

#: ../Doc/library/os.rst:3534
msgid "Start a file with its associated application."
msgstr ""

#: ../Doc/library/os.rst:3536
msgid ""
"When *operation* is not specified or ``'open'``, this acts like double-"
"clicking the file in Windows Explorer, or giving the file name as an "
"argument to the :program:`start` command from the interactive command "
"shell: the file is opened with whatever application (if any) its "
"extension is associated."
msgstr ""

#: ../Doc/library/os.rst:3541
msgid ""
"When another *operation* is given, it must be a \"command verb\" that "
"specifies what should be done with the file. Common verbs documented by "
"Microsoft are ``'print'`` and  ``'edit'`` (to be used on files) as well "
"as ``'explore'`` and ``'find'`` (to be used on directories)."
msgstr ""

#: ../Doc/library/os.rst:3546
msgid ""
":func:`startfile` returns as soon as the associated application is "
"launched. There is no option to wait for the application to close, and no"
" way to retrieve the application's exit status.  The *path* parameter is "
"relative to the current directory.  If you want to use an absolute path, "
"make sure the first character is not a slash (``'/'``); the underlying "
"Win32 :c:func:`ShellExecute` function doesn't work if it is.  Use the "
":func:`os.path.normpath` function to ensure that the path is properly "
"encoded for Win32."
msgstr ""

#: ../Doc/library/os.rst:3554
msgid ""
"To reduce interpreter startup overhead, the Win32 :c:func:`ShellExecute` "
"function is not resolved until this function is first called.  If the "
"function cannot be resolved, :exc:`NotImplementedError` will be raised."
msgstr ""

#: ../Doc/library/os.rst:3563
msgid ""
"Execute the command (a string) in a subshell.  This is implemented by "
"calling the Standard C function :c:func:`system`, and has the same "
"limitations. Changes to :data:`sys.stdin`, etc. are not reflected in the "
"environment of the executed command. If *command* generates any output, "
"it will be sent to the interpreter standard output stream."
msgstr ""

#: ../Doc/library/os.rst:3569
msgid ""
"On Unix, the return value is the exit status of the process encoded in "
"the format specified for :func:`wait`.  Note that POSIX does not specify "
"the meaning of the return value of the C :c:func:`system` function, so "
"the return value of the Python function is system-dependent."
msgstr ""

#: ../Doc/library/os.rst:3574
msgid ""
"On Windows, the return value is that returned by the system shell after "
"running *command*.  The shell is given by the Windows environment "
"variable :envvar:`COMSPEC`: it is usually :program:`cmd.exe`, which "
"returns the exit status of the command run; on systems using a non-native"
" shell, consult your shell documentation."
msgstr ""

#: ../Doc/library/os.rst:3580
msgid ""
"The :mod:`subprocess` module provides more powerful facilities for "
"spawning new processes and retrieving their results; using that module is"
" preferable to using this function.  See the :ref:`subprocess-"
"replacements` section in the :mod:`subprocess` documentation for some "
"helpful recipes."
msgstr ""

#: ../Doc/library/os.rst:3590
msgid ""
"Returns the current global process times. The return value is an object "
"with five attributes:"
msgstr ""

#: ../Doc/library/os.rst:3593
msgid ":attr:`user` - user time"
msgstr ""

#: ../Doc/library/os.rst:3594
msgid ":attr:`system` - system time"
msgstr ""

#: ../Doc/library/os.rst:3595
msgid ":attr:`children_user` - user time of all child processes"
msgstr ""

#: ../Doc/library/os.rst:3596
msgid ":attr:`children_system` - system time of all child processes"
msgstr ""

#: ../Doc/library/os.rst:3597
msgid ":attr:`elapsed` - elapsed real time since a fixed point in the past"
msgstr ""

#: ../Doc/library/os.rst:3599
msgid ""
"For backwards compatibility, this object also behaves like a five-tuple "
"containing :attr:`user`, :attr:`system`, :attr:`children_user`, "
":attr:`children_system`, and :attr:`elapsed` in that order."
msgstr ""

#: ../Doc/library/os.rst:3603
msgid ""
"See the Unix manual page :manpage:`times(2)` or the corresponding Windows"
" Platform API documentation. On Windows, only :attr:`user` and "
":attr:`system` are known; the other attributes are zero."
msgstr ""

#: ../Doc/library/os.rst:3617
msgid ""
"Wait for completion of a child process, and return a tuple containing its"
" pid and exit status indication: a 16-bit number, whose low byte is the "
"signal number that killed the process, and whose high byte is the exit "
"status (if the signal number is zero); the high bit of the low byte is "
"set if a core file was produced."
msgstr ""

#: ../Doc/library/os.rst:3627
msgid ""
"Wait for the completion of one or more child processes. *idtype* can be "
":data:`P_PID`, :data:`P_PGID` or :data:`P_ALL`. *id* specifies the pid to"
" wait on. *options* is constructed from the ORing of one or more of "
":data:`WEXITED`, :data:`WSTOPPED` or :data:`WCONTINUED` and additionally "
"may be ORed with :data:`WNOHANG` or :data:`WNOWAIT`. The return value is "
"an object representing the data contained in the :c:type:`siginfo_t` "
"structure, namely: :attr:`si_pid`, :attr:`si_uid`, :attr:`si_signo`, "
":attr:`si_status`, :attr:`si_code` or ``None`` if :data:`WNOHANG` is "
"specified and there are no children in a waitable state."
msgstr ""

#: ../Doc/library/os.rst:3646
msgid ""
"These are the possible values for *idtype* in :func:`waitid`. They affect"
" how *id* is interpreted."
msgstr ""

#: ../Doc/library/os.rst:3657
msgid ""
"Flags that can be used in *options* in :func:`waitid` that specify what "
"child signal to wait for."
msgstr ""

#: ../Doc/library/os.rst:3670
msgid ""
"These are the possible values for :attr:`si_code` in the result returned "
"by :func:`waitid`."
msgstr ""

#: ../Doc/library/os.rst:3680
msgid "The details of this function differ on Unix and Windows."
msgstr ""

#: ../Doc/library/os.rst:3682
msgid ""
"On Unix: Wait for completion of a child process given by process id "
"*pid*, and return a tuple containing its process id and exit status "
"indication (encoded as for :func:`wait`).  The semantics of the call are "
"affected by the value of the integer *options*, which should be ``0`` for"
" normal operation."
msgstr ""

#: ../Doc/library/os.rst:3687
msgid ""
"If *pid* is greater than ``0``, :func:`waitpid` requests status "
"information for that specific process.  If *pid* is ``0``, the request is"
" for the status of any child in the process group of the current process."
"  If *pid* is ``-1``, the request pertains to any child of the current "
"process.  If *pid* is less than ``-1``, status is requested for any "
"process in the process group ``-pid`` (the absolute value of *pid*)."
msgstr ""

#: ../Doc/library/os.rst:3694
msgid ""
"An :exc:`OSError` is raised with the value of errno when the syscall "
"returns -1."
msgstr ""

#: ../Doc/library/os.rst:3697
msgid ""
"On Windows: Wait for completion of a process given by process handle "
"*pid*, and return a tuple containing *pid*, and its exit status shifted "
"left by 8 bits (shifting makes cross-platform use of the function "
"easier). A *pid* less than or equal to ``0`` has no special meaning on "
"Windows, and raises an exception. The value of integer *options* has no "
"effect. *pid* can refer to any process whose id is known, not necessarily"
" a child process. The :func:`spawn\\* <spawnl>` functions called with "
":const:`P_NOWAIT` return suitable process handles."
msgstr ""

#: ../Doc/library/os.rst:3713
msgid ""
"Similar to :func:`waitpid`, except no process id argument is given and a "
"3-element tuple containing the child's process id, exit status "
"indication, and resource usage information is returned.  Refer to "
":mod:`resource`.\\ :func:`~resource.getrusage` for details on resource "
"usage information.  The option argument is the same as that provided to "
":func:`waitpid` and :func:`wait4`."
msgstr ""

#: ../Doc/library/os.rst:3725
msgid ""
"Similar to :func:`waitpid`, except a 3-element tuple, containing the "
"child's process id, exit status indication, and resource usage "
"information is returned. Refer to :mod:`resource`.\\ "
":func:`~resource.getrusage` for details on resource usage information.  "
"The arguments to :func:`wait4` are the same as those provided to "
":func:`waitpid`."
msgstr ""

#: ../Doc/library/os.rst:3736
msgid ""
"The option for :func:`waitpid` to return immediately if no child process "
"status is available immediately. The function returns ``(0, 0)`` in this "
"case."
msgstr ""

#: ../Doc/library/os.rst:3744
msgid ""
"This option causes child processes to be reported if they have been "
"continued from a job control stop since their status was last reported."
msgstr ""

#: ../Doc/library/os.rst:3747
msgid "Availability: some Unix systems."
msgstr ""

#: ../Doc/library/os.rst:3752
msgid ""
"This option causes child processes to be reported if they have been "
"stopped but their current state has not been reported since they were "
"stopped."
msgstr ""

#: ../Doc/library/os.rst:3758
msgid ""
"The following functions take a process status code as returned by "
":func:`system`, :func:`wait`, or :func:`waitpid` as a parameter.  They "
"may be used to determine the disposition of a process."
msgstr ""

#: ../Doc/library/os.rst:3764
msgid ""
"Return ``True`` if a core dump was generated for the process, otherwise "
"return ``False``."
msgstr ""

#: ../Doc/library/os.rst:3772
msgid ""
"Return ``True`` if the process has been continued from a job control "
"stop, otherwise return ``False``."
msgstr ""

#: ../Doc/library/os.rst:3780
msgid ""
"Return ``True`` if the process has been stopped, otherwise return "
"``False``."
msgstr ""

#: ../Doc/library/os.rst:3788
msgid ""
"Return ``True`` if the process exited due to a signal, otherwise return "
"``False``."
msgstr ""

#: ../Doc/library/os.rst:3796
msgid ""
"Return ``True`` if the process exited using the :manpage:`exit(2)` system"
" call, otherwise return ``False``."
msgstr ""

#: ../Doc/library/os.rst:3804
msgid ""
"If ``WIFEXITED(status)`` is true, return the integer parameter to the "
":manpage:`exit(2)` system call.  Otherwise, the return value is "
"meaningless."
msgstr ""

#: ../Doc/library/os.rst:3812
msgid "Return the signal which caused the process to stop."
msgstr ""

#: ../Doc/library/os.rst:3819
msgid "Return the signal which caused the process to exit."
msgstr ""

#: ../Doc/library/os.rst:3825
msgid "Interface to the scheduler"
msgstr ""

#: ../Doc/library/os.rst:3827
msgid ""
"These functions control how a process is allocated CPU time by the "
"operating system. They are only available on some Unix platforms. For "
"more detailed information, consult your Unix manpages."
msgstr ""

#: ../Doc/library/os.rst:3833
msgid ""
"The following scheduling policies are exposed if they are supported by "
"the operating system."
msgstr ""

#: ../Doc/library/os.rst:3838
msgid "The default scheduling policy."
msgstr ""

#: ../Doc/library/os.rst:3842
msgid ""
"Scheduling policy for CPU-intensive processes that tries to preserve "
"interactivity on the rest of the computer."
msgstr ""

#: ../Doc/library/os.rst:3847
msgid "Scheduling policy for extremely low priority background tasks."
msgstr ""

#: ../Doc/library/os.rst:3851
msgid "Scheduling policy for sporadic server programs."
msgstr ""

#: ../Doc/library/os.rst:3855
msgid "A First In First Out scheduling policy."
msgstr ""

#: ../Doc/library/os.rst:3859
msgid "A round-robin scheduling policy."
msgstr ""

#: ../Doc/library/os.rst:3863
msgid ""
"This flag can be OR'ed with any other scheduling policy. When a process "
"with this flag set forks, its child's scheduling policy and priority are "
"reset to the default."
msgstr ""

#: ../Doc/library/os.rst:3870
msgid ""
"This class represents tunable scheduling parameters used in "
":func:`sched_setparam`, :func:`sched_setscheduler`, and "
":func:`sched_getparam`. It is immutable."
msgstr ""

#: ../Doc/library/os.rst:3874
msgid "At the moment, there is only one possible parameter:"
msgstr ""

#: ../Doc/library/os.rst:3878
msgid "The scheduling priority for a scheduling policy."
msgstr ""

#: ../Doc/library/os.rst:3883
msgid ""
"Get the minimum priority value for *policy*. *policy* is one of the "
"scheduling policy constants above."
msgstr ""

#: ../Doc/library/os.rst:3889
msgid ""
"Get the maximum priority value for *policy*. *policy* is one of the "
"scheduling policy constants above."
msgstr ""

#: ../Doc/library/os.rst:3895
msgid ""
"Set the scheduling policy for the process with PID *pid*. A *pid* of 0 "
"means the calling process. *policy* is one of the scheduling policy "
"constants above. *param* is a :class:`sched_param` instance."
msgstr ""

#: ../Doc/library/os.rst:3902
msgid ""
"Return the scheduling policy for the process with PID *pid*. A *pid* of 0"
" means the calling process. The result is one of the scheduling policy "
"constants above."
msgstr ""

#: ../Doc/library/os.rst:3909
msgid ""
"Set a scheduling parameters for the process with PID *pid*. A *pid* of 0 "
"means the calling process. *param* is a :class:`sched_param` instance."
msgstr ""

#: ../Doc/library/os.rst:3915
msgid ""
"Return the scheduling parameters as a :class:`sched_param` instance for "
"the process with PID *pid*. A *pid* of 0 means the calling process."
msgstr ""

#: ../Doc/library/os.rst:3921
msgid ""
"Return the round-robin quantum in seconds for the process with PID *pid*."
" A *pid* of 0 means the calling process."
msgstr ""

#: ../Doc/library/os.rst:3927
msgid "Voluntarily relinquish the CPU."
msgstr ""

#: ../Doc/library/os.rst:3932
msgid ""
"Restrict the process with PID *pid* (or the current process if zero) to a"
" set of CPUs.  *mask* is an iterable of integers representing the set of "
"CPUs to which the process should be restricted."
msgstr ""

#: ../Doc/library/os.rst:3939
msgid ""
"Return the set of CPUs the process with PID *pid* (or the current process"
" if zero) is restricted to."
msgstr ""

#: ../Doc/library/os.rst:3946
msgid "Miscellaneous System Information"
msgstr ""

#: ../Doc/library/os.rst:3951
msgid ""
"Return string-valued system configuration values. *name* specifies the "
"configuration value to retrieve; it may be a string which is the name of "
"a defined system value; these names are specified in a number of "
"standards (POSIX, Unix 95, Unix 98, and others).  Some platforms define "
"additional names as well. The names known to the host operating system "
"are given as the keys of the ``confstr_names`` dictionary.  For "
"configuration variables not included in that mapping, passing an integer "
"for *name* is also accepted."
msgstr ""

#: ../Doc/library/os.rst:3959
msgid ""
"If the configuration value specified by *name* isn't defined, ``None`` is"
" returned."
msgstr ""

#: ../Doc/library/os.rst:3962
msgid ""
"If *name* is a string and is not known, :exc:`ValueError` is raised.  If "
"a specific value for *name* is not supported by the host system, even if "
"it is included in ``confstr_names``, an :exc:`OSError` is raised with "
":const:`errno.EINVAL` for the error number."
msgstr ""

#: ../Doc/library/os.rst:3972
msgid ""
"Dictionary mapping names accepted by :func:`confstr` to the integer "
"values defined for those names by the host operating system. This can be "
"used to determine the set of names known to the system."
msgstr ""

#: ../Doc/library/os.rst:3981
msgid "Return the number of CPUs in the system. Returns ``None`` if undetermined."
msgstr ""

#: ../Doc/library/os.rst:3983
msgid ""
"This number is not equivalent to the number of CPUs the current process "
"can use.  The number of usable CPUs can be obtained with "
"``len(os.sched_getaffinity(0))``"
msgstr ""

#: ../Doc/library/os.rst:3993
msgid ""
"Return the number of processes in the system run queue averaged over the "
"last 1, 5, and 15 minutes or raises :exc:`OSError` if the load average "
"was unobtainable."
msgstr ""

#: ../Doc/library/os.rst:4002
msgid ""
"Return integer-valued system configuration values. If the configuration "
"value specified by *name* isn't defined, ``-1`` is returned.  The "
"comments regarding the *name* parameter for :func:`confstr` apply here as"
" well; the dictionary that provides information on the known names is "
"given by ``sysconf_names``."
msgstr ""

#: ../Doc/library/os.rst:4012
msgid ""
"Dictionary mapping names accepted by :func:`sysconf` to the integer "
"values defined for those names by the host operating system. This can be "
"used to determine the set of names known to the system."
msgstr ""

#: ../Doc/library/os.rst:4018
msgid ""
"The following data values are used to support path manipulation "
"operations.  These are defined for all platforms."
msgstr ""

#: ../Doc/library/os.rst:4021
msgid ""
"Higher-level operations on pathnames are defined in the :mod:`os.path` "
"module."
msgstr ""

#: ../Doc/library/os.rst:4026
msgid ""
"The constant string used by the operating system to refer to the current "
"directory. This is ``'.'`` for Windows and POSIX. Also available via "
":mod:`os.path`."
msgstr ""

#: ../Doc/library/os.rst:4033
msgid ""
"The constant string used by the operating system to refer to the parent "
"directory. This is ``'..'`` for Windows and POSIX. Also available via "
":mod:`os.path`."
msgstr ""

#: ../Doc/library/os.rst:4040
msgid ""
"The character used by the operating system to separate pathname "
"components. This is ``'/'`` for POSIX and ``'\\\\'`` for Windows.  Note "
"that knowing this is not sufficient to be able to parse or concatenate "
"pathnames --- use :func:`os.path.split` and :func:`os.path.join` --- but "
"it is occasionally useful. Also available via :mod:`os.path`."
msgstr ""

#: ../Doc/library/os.rst:4049
msgid ""
"An alternative character used by the operating system to separate "
"pathname components, or ``None`` if only one separator character exists."
"  This is set to ``'/'`` on Windows systems where ``sep`` is a backslash."
" Also available via :mod:`os.path`."
msgstr ""

#: ../Doc/library/os.rst:4057
msgid ""
"The character which separates the base filename from the extension; for "
"example, the ``'.'`` in :file:`os.py`. Also available via :mod:`os.path`."
msgstr ""

#: ../Doc/library/os.rst:4063
msgid ""
"The character conventionally used by the operating system to separate "
"search path components (as in :envvar:`PATH`), such as ``':'`` for POSIX "
"or ``';'`` for Windows. Also available via :mod:`os.path`."
msgstr ""

#: ../Doc/library/os.rst:4070
msgid ""
"The default search path used by :func:`exec\\*p\\* <execl>` and "
":func:`spawn\\*p\\* <spawnl>` if the environment doesn't have a "
"``'PATH'`` key. Also available via :mod:`os.path`."
msgstr ""

#: ../Doc/library/os.rst:4077
msgid ""
"The string used to separate (or, rather, terminate) lines on the current "
"platform.  This may be a single character, such as ``'\\n'`` for POSIX, "
"or multiple characters, for example, ``'\\r\\n'`` for Windows. Do not use"
" *os.linesep* as a line terminator when writing files opened in text mode"
" (the default); use a single ``'\\n'`` instead, on all platforms."
msgstr ""

#: ../Doc/library/os.rst:4086
msgid ""
"The file path of the null device. For example: ``'/dev/null'`` for POSIX,"
" ``'nul'`` for Windows.  Also available via :mod:`os.path`."
msgstr ""

#: ../Doc/library/os.rst:4097
msgid ""
"Flags for use with the :func:`~sys.setdlopenflags` and "
":func:`~sys.getdlopenflags` functions.  See the Unix manual page "
":manpage:`dlopen(3)` for what the different flags mean."
msgstr ""

#: ../Doc/library/os.rst:4105
msgid "Random numbers"
msgstr ""

#: ../Doc/library/os.rst:4110
msgid ""
"Get up to *size* random bytes. The function can return less bytes than "
"requested."
msgstr ""

#: ../Doc/library/os.rst:4113
msgid ""
"These bytes can be used to seed user-space random number generators or "
"for cryptographic purposes."
msgstr ""

#: ../Doc/library/os.rst:4116
msgid ""
"``getrandom()`` relies on entropy gathered from device drivers and other "
"sources of environmental noise. Unnecessarily reading large quantities of"
" data will have a negative impact on  other users  of the ``/dev/random``"
" and ``/dev/urandom`` devices."
msgstr ""

#: ../Doc/library/os.rst:4121
msgid ""
"The flags argument is a bit mask that can contain zero or more of the "
"following values ORed together: :py:data:`os.GRND_RANDOM` and "
":py:data:`GRND_NONBLOCK`."
msgstr ""

#: ../Doc/library/os.rst:4125
msgid ""
"See also the `Linux getrandom() manual page <http://man7.org/linux/man-"
"pages/man2/getrandom.2.html>`_."
msgstr ""

#: ../Doc/library/os.rst:4128
msgid "Availability: Linux 3.17 and newer."
msgstr ""

#: ../Doc/library/os.rst:4134
msgid "Return a string of *size* random bytes suitable for cryptographic use."
msgstr ""

#: ../Doc/library/os.rst:4136
msgid ""
"This function returns random bytes from an OS-specific randomness source."
"  The returned data should be unpredictable enough for cryptographic "
"applications, though its exact quality depends on the OS implementation."
msgstr ""

#: ../Doc/library/os.rst:4140
msgid ""
"On Linux, if the ``getrandom()`` syscall is available, it is used in "
"blocking mode: block until the system urandom entropy pool is initialized"
" (128 bits of entropy are collected by the kernel). See the :pep:`524` "
"for the rationale. On Linux, the :func:`getrandom` function can be used "
"to get random bytes in non-blocking mode (using the :data:`GRND_NONBLOCK`"
" flag) or to poll until the system urandom entropy pool is initialized."
msgstr ""

#: ../Doc/library/os.rst:4147
msgid ""
"On a Unix-like system, random bytes are read from the ``/dev/urandom`` "
"device. If the ``/dev/urandom`` device is not available or not readable, "
"the :exc:`NotImplementedError` exception is raised."
msgstr ""

#: ../Doc/library/os.rst:4151
msgid "On Windows, it will use ``CryptGenRandom()``."
msgstr ""

#: ../Doc/library/os.rst:4154
msgid ""
"The :mod:`secrets` module provides higher level functions. For an easy-"
"to-use interface to the random number generator provided by your "
"platform, please see :class:`random.SystemRandom`."
msgstr ""

#: ../Doc/library/os.rst:4158
msgid ""
"On Linux, ``getrandom()`` is now used in blocking mode to increase the "
"security."
msgstr ""

#: ../Doc/library/os.rst:4162
msgid ""
"On Linux, if the ``getrandom()`` syscall blocks (the urandom entropy pool"
" is not initialized yet), fall back on reading ``/dev/urandom``."
msgstr ""

#: ../Doc/library/os.rst:4166
msgid ""
"On Linux 3.17 and newer, the ``getrandom()`` syscall is now used when "
"available.  On OpenBSD 5.6 and newer, the C ``getentropy()`` function is "
"now used. These functions avoid the usage of an internal file descriptor."
msgstr ""

#: ../Doc/library/os.rst:4174
msgid ""
"By  default, when reading from ``/dev/random``, :func:`getrandom` blocks "
"if no random bytes are available, and when reading from ``/dev/urandom``,"
" it blocks if the entropy pool has not yet been initialized."
msgstr ""

#: ../Doc/library/os.rst:4178
msgid ""
"If the :py:data:`GRND_NONBLOCK` flag is set, then :func:`getrandom` does "
"not block in these cases, but instead immediately raises "
":exc:`BlockingIOError`."
msgstr ""

#: ../Doc/library/os.rst:4185
msgid ""
"If  this  bit  is  set,  then  random bytes are drawn from the "
"``/dev/random`` pool instead of the ``/dev/urandom`` pool."
msgstr ""

#~ msgid ""
#~ "Return the name of the user logged"
#~ " in on the controlling terminal of"
#~ " the process.  For most purposes, it"
#~ " is more useful to use the "
#~ "environment variables :envvar:`LOGNAME` or "
#~ ":envvar:`USERNAME` to find out who the"
#~ " user is, or ``pwd.getpwuid(os.getuid())[0]`` "
#~ "to get the login name of the "
#~ "current real user id."
#~ msgstr ""

#~ msgid ""
#~ "By default, errors from the "
#~ ":func:`listdir` call are ignored.  If "
#~ "optional argument *onerror* is specified, "
#~ "it should be a function; it will"
#~ " be called with one argument, an "
#~ ":exc:`OSError` instance.  It can report "
#~ "the error to continue with the "
#~ "walk, or raise the exception to "
#~ "abort the walk.  Note that the "
#~ "filename is available as the "
#~ "``filename`` attribute of the exception "
#~ "object."
#~ msgstr ""

#~ msgid ""
#~ "Duplicate file descriptor *fd* to *fd2*,"
#~ " closing the latter first if "
#~ "necessary. The file descriptor *fd2* is"
#~ " :ref:`inheritable <fd_inheritance>` by default,"
#~ " or non-inheritable if *inheritable* "
#~ "is ``False``."
#~ msgstr ""

#~ msgid ""
#~ "The *mode* parameter is passed to "
#~ ":func:`mkdir`; see :ref:`the mkdir() "
#~ "description <mkdir_modebits>` for how it "
#~ "is interpreted."
#~ msgstr ""

#~ msgid ""
#~ "The entry's full path name: equivalent"
#~ " to ``os.path.join(scandir_path, entry.name)`` "
#~ "where *scandir_path* is the :func:`scandir`"
#~ " *path* argument.  The path is only"
#~ " absolute if the :func:`scandir` *path* "
#~ "argument was absolute."
#~ msgstr ""

#~ msgid "Inode number."
#~ msgstr ""

#~ msgid "See also the :func:`stat_float_times` function."
#~ msgstr ""

#~ msgid ""
#~ "Determine whether :class:`stat_result` represents"
#~ " time stamps as float objects. If "
#~ "*newvalue* is ``True``, future calls to"
#~ " :func:`~os.stat` return floats, if it "
#~ "is ``False``, future calls return ints."
#~ " If *newvalue* is omitted, return the"
#~ " current setting."
#~ msgstr ""

#~ msgid ""
#~ "For compatibility with older Python "
#~ "versions, accessing :class:`stat_result` as a"
#~ " tuple always returns integers."
#~ msgstr ""

#~ msgid ""
#~ "Python now returns float values by "
#~ "default. Applications which do not work"
#~ " correctly with floating point time "
#~ "stamps can use this function to "
#~ "restore the old behaviour."
#~ msgstr ""

#~ msgid ""
#~ "The resolution of the timestamps (that"
#~ " is the smallest possible fraction) "
#~ "depends on the system. Some systems "
#~ "only support second resolution; on these"
#~ " systems, the fraction will always be"
#~ " zero."
#~ msgstr ""

#~ msgid ""
#~ "It is recommended that this setting "
#~ "is only changed at program startup "
#~ "time in the *__main__* module; libraries"
#~ " should never change this setting. If"
#~ " an application uses a library that"
#~ " works incorrectly if floating point "
#~ "time stamps are processed, this "
#~ "application should turn the feature off"
#~ " until the library has been "
#~ "corrected."
#~ msgstr ""

#~ msgid ""
#~ "Perform a :c:func:`statvfs` system call "
#~ "on the given path.  The return "
#~ "value is an object whose attributes "
#~ "describe the filesystem on the given "
#~ "path, and correspond to the members "
#~ "of the :c:type:`statvfs` structure, namely:"
#~ " :attr:`f_bsize`, :attr:`f_frsize`, :attr:`f_blocks`,"
#~ " :attr:`f_bfree`, :attr:`f_bavail`, :attr:`f_files`,"
#~ " :attr:`f_ffree`, :attr:`f_favail`, :attr:`f_flag`, "
#~ ":attr:`f_namemax`."
#~ msgstr ""

#~ msgid ""
#~ "Read from a file descriptor, *fd*, "
#~ "at a position of *offset*. It will"
#~ " read up to *buffersize* number of"
#~ " bytes. The file offset remains "
#~ "unchanged."
#~ msgstr ""

#~ msgid ""
#~ "Write *bytestring* to a file descriptor,"
#~ " *fd*, from *offset*, leaving the "
#~ "file offset unchanged."
#~ msgstr ""

#~ msgid ""
#~ "Combines the functionality of "
#~ ":func:`os.writev` and :func:`os.pwrite`. It "
#~ "writes the contents of *buffers* to "
#~ "file descriptor *fd* at offset *offset*."
#~ " *buffers* must be a sequence of "
#~ ":term:`bytes-like objects <bytes-like "
#~ "object>`. Buffers are processed in array"
#~ " order. Entire contents of first "
#~ "buffer is written before proceeding to"
#~ " second, and so on. The operating "
#~ "system may set a limit (sysconf() "
#~ "value SC_IOV_MAX) on the number of "
#~ "buffers that can be used. "
#~ ":func:`~os.pwritev` writes the contents of "
#~ "each object to the file descriptor "
#~ "and returns the total number of "
#~ "bytes written."
#~ msgstr ""

#~ msgid ""
#~ "The *flags* argument contains a bitwise"
#~ " OR of zero or more of the "
#~ "following flags:"
#~ msgstr ""

#~ msgid "RWF_DSYNC"
#~ msgstr ""

#~ msgid "RWF_SYNC"
#~ msgstr ""

#~ msgid "Using non-zero flags requires Linux 4.7 or newer."
#~ msgstr ""

#~ msgid ""
#~ "Availability: Linux (version 2.6.30), FreeBSD"
#~ " 6.0 and newer, OpenBSD (version 2.7"
#~ " and newer)."
#~ msgstr ""

#~ msgid ""
#~ "Provide a per-write equivalent of "
#~ "the O_DSYNC open(2) flag. This flag "
#~ "is meaningful only for pwritev2(), and"
#~ " its effect applies only to the "
#~ "data range written by the system "
#~ "call."
#~ msgstr ""

#~ msgid "Availability: Linux (version 4.7)."
#~ msgstr ""

#~ msgid ""
#~ "Provide a per-write equivalent of "
#~ "the O_SYNC open(2) flag. This flag "
#~ "is meaningful only for pwritev2(), and"
#~ " its effect applies only to the "
#~ "data range written by the system "
#~ "call."
#~ msgstr ""

#~ msgid ""
#~ "Read at most *n* bytes from file"
#~ " descriptor *fd*. Return a bytestring "
#~ "containing the bytes read.  If the "
#~ "end of the file referred to by "
#~ "*fd* has been reached, an empty "
#~ "bytes object is returned."
#~ msgstr ""

#~ msgid ""
#~ "Read from a file descriptor *fd* "
#~ "into a number of mutable :term"
#~ ":`bytes-like objects <bytes-like object>`"
#~ " *buffers*. :func:`~os.readv` will transfer "
#~ "data into each buffer until it is"
#~ " full and then move on to the"
#~ " next buffer in the sequence to "
#~ "hold the rest of the data. "
#~ ":func:`~os.readv` returns the total number "
#~ "of bytes read (which may be less"
#~ " than the total capacity of all "
#~ "the objects)."
#~ msgstr ""

#~ msgid ""
#~ "Combines the functionality of :func:`os.readv`"
#~ " and :func:`os.pread`. It reads from "
#~ "a file descriptor *fd* into a "
#~ "number of mutable :term:`bytes-like "
#~ "objects <bytes-like object>` *buffers*. "
#~ "As :func:`os.readv`, it will transfer "
#~ "data into each buffer until it is"
#~ " full and then move on to the"
#~ " next buffer in the sequence to "
#~ "hold the rest of the data. Its "
#~ "fourth argument, *offset*, specifies the "
#~ "file offset at which the input "
#~ "operation is to be performed. "
#~ ":func:`~os.preadv` return the total number "
#~ "of bytes read (which can be less"
#~ " than the total capacity of all "
#~ "the objects)."
#~ msgstr ""

#~ msgid "RWF_HIPRI"
#~ msgstr ""

#~ msgid "RWF_NOWAIT"
#~ msgstr ""

#~ msgid "Using non-zero flags requires Linux 4.6 or newer."
#~ msgstr ""

#~ msgid ""
#~ "High priority read/write. Allows block-"
#~ "based filesystems to use polling of "
#~ "the device, which provides lower "
#~ "latency, but may use additional "
#~ "resources. (Currently, this feature is "
#~ "usable only on a file descriptor "
#~ "opened using the O_DIRECT flag.)"
#~ msgstr ""

#~ msgid "Availability: Linux (version 4.6)."
#~ msgstr ""

#~ msgid ""
#~ "Do not wait for data which is "
#~ "not immediately available. If this flag"
#~ " is  specified, the preadv2() system "
#~ "call will return instantly if it "
#~ "would have to read data from the"
#~ " backing storage or wait for a "
#~ "lock. If some data was successfully "
#~ "read, it will return the number of"
#~ " bytes read. If no bytes were "
#~ "read, it will return -1 and set"
#~ " errno to EAGAIN. Currently, this "
#~ "flag is meaningful only for preadv2()."
#~ msgstr ""

#~ msgid "Availability: Linux (version 4.14)."
#~ msgstr ""

#~ msgid ""
#~ "Write the bytestring in *str* to "
#~ "file descriptor *fd*. Return the number"
#~ " of bytes actually written."
#~ msgstr ""

#~ msgid ""
#~ "Write the contents of *buffers* to "
#~ "file descriptor *fd*. *buffers* must be"
#~ " a sequence of :term:`bytes-like "
#~ "objects <bytes-like object>`. Buffers "
#~ "are processed in array order. Entire "
#~ "contents of first buffer is written "
#~ "before proceeding to second, and so "
#~ "on. The operating system may set a"
#~ " limit (sysconf() value SC_IOV_MAX) on "
#~ "the number of buffers that can be"
#~ " used."
#~ msgstr ""

#~ msgid ""
#~ ":func:`~os.writev` writes the contents of "
#~ "each object to the file descriptor "
#~ "and returns the total number of "
#~ "bytes written."
#~ msgstr ""

