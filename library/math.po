# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-30 09:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/math.rst:2
msgid ":mod:`math` --- Mathematical functions"
msgstr ""

#: ../Doc/library/math.rst:13
msgid ""
"This module is always available.  It provides access to the mathematical "
"functions defined by the C standard."
msgstr ""

#: ../Doc/library/math.rst:16
msgid ""
"These functions cannot be used with complex numbers; use the functions of"
" the same name from the :mod:`cmath` module if you require support for "
"complex numbers.  The distinction between functions which support complex"
" numbers and those which don't is made since most users do not want to "
"learn quite as much mathematics as required to understand complex "
"numbers.  Receiving an exception instead of a complex result allows "
"earlier detection of the unexpected complex number used as a parameter, "
"so that the programmer can determine how and why it was generated in the "
"first place."
msgstr ""

#: ../Doc/library/math.rst:25
msgid ""
"The following functions are provided by this module.  Except when "
"explicitly noted otherwise, all return values are floats."
msgstr ""

#: ../Doc/library/math.rst:30
msgid "Number-theoretic and representation functions"
msgstr ""

#: ../Doc/library/math.rst:34
msgid ""
"Return the ceiling of *x*, the smallest integer greater than or equal to "
"*x*. If *x* is not a float, delegates to ``x.__ceil__()``, which should "
"return an :class:`~numbers.Integral` value."
msgstr ""

#: ../Doc/library/math.rst:41
msgid ""
"Return a float with the magnitude (absolute value) of *x* but the sign of"
" *y*.  On platforms that support signed zeros, ``copysign(1.0, -0.0)`` "
"returns *-1.0*."
msgstr ""

#: ../Doc/library/math.rst:48
msgid "Return the absolute value of *x*."
msgstr ""

#: ../Doc/library/math.rst:53
msgid ""
"Return *x* factorial.  Raises :exc:`ValueError` if *x* is not integral or"
" is negative."
msgstr ""

#: ../Doc/library/math.rst:59
msgid ""
"Return the floor of *x*, the largest integer less than or equal to *x*. "
"If *x* is not a float, delegates to ``x.__floor__()``, which should "
"return an :class:`~numbers.Integral` value."
msgstr ""

#: ../Doc/library/math.rst:66
#, python-format
msgid ""
"Return ``fmod(x, y)``, as defined by the platform C library. Note that "
"the Python expression ``x % y`` may not return the same result.  The "
"intent of the C standard is that ``fmod(x, y)`` be exactly "
"(mathematically; to infinite precision) equal to ``x - n*y`` for some "
"integer *n* such that the result has the same sign as *x* and magnitude "
"less than ``abs(y)``.  Python's ``x % y`` returns a result with the sign "
"of *y* instead, and may not be exactly computable for float arguments. "
"For example, ``fmod(-1e-100, 1e100)`` is ``-1e-100``, but the result of "
"Python's ``-1e-100 % 1e100`` is ``1e100-1e-100``, which cannot be "
"represented exactly as a float, and rounds to the surprising ``1e100``.  "
"For this reason, function :func:`fmod` is generally preferred when "
"working with floats, while Python's ``x % y`` is preferred when working "
"with integers."
msgstr ""

#: ../Doc/library/math.rst:81
msgid ""
"Return the mantissa and exponent of *x* as the pair ``(m, e)``.  *m* is a"
" float and *e* is an integer such that ``x == m * 2**e`` exactly. If *x* "
"is zero, returns ``(0.0, 0)``, otherwise ``0.5 <= abs(m) < 1``.  This is "
"used to \"pick apart\" the internal representation of a float in a "
"portable way."
msgstr ""

#: ../Doc/library/math.rst:89
msgid ""
"Return an accurate floating point sum of values in the iterable.  Avoids "
"loss of precision by tracking multiple intermediate partial sums::"
msgstr ""

#: ../Doc/library/math.rst:97
msgid ""
"The algorithm's accuracy depends on IEEE-754 arithmetic guarantees and "
"the typical case where the rounding mode is half-even.  On some non-"
"Windows builds, the underlying C library uses extended precision addition"
" and may occasionally double-round an intermediate sum causing it to be "
"off in its least significant bit."
msgstr ""

#: ../Doc/library/math.rst:103
msgid ""
"For further discussion and two alternative approaches, see the `ASPN "
"cookbook recipes for accurate floating point summation "
"<https://code.activestate.com/recipes/393090/>`_\\."
msgstr ""

#: ../Doc/library/math.rst:110
msgid ""
"Return the greatest common divisor of the integers *a* and *b*.  If "
"either *a* or *b* is nonzero, then the value of ``gcd(a, b)`` is the "
"largest positive integer that divides both *a* and *b*.  ``gcd(0, 0)`` "
"returns ``0``."
msgstr ""

#: ../Doc/library/math.rst:120
msgid ""
"Return ``True`` if the values *a* and *b* are close to each other and "
"``False`` otherwise."
msgstr ""

#: ../Doc/library/math.rst:123
msgid ""
"Whether or not two values are considered close is determined according to"
" given absolute and relative tolerances."
msgstr ""

#: ../Doc/library/math.rst:126
msgid ""
"*rel_tol* is the relative tolerance -- it is the maximum allowed "
"difference between *a* and *b*, relative to the larger absolute value of "
"*a* or *b*. For example, to set a tolerance of 5%, pass ``rel_tol=0.05``."
"  The default tolerance is ``1e-09``, which assures that the two values "
"are the same within about 9 decimal digits.  *rel_tol* must be greater "
"than zero."
msgstr ""

#: ../Doc/library/math.rst:132
msgid ""
"*abs_tol* is the minimum absolute tolerance -- useful for comparisons "
"near zero. *abs_tol* must be at least zero."
msgstr ""

#: ../Doc/library/math.rst:135
msgid ""
"If no errors occur, the result will be: ``abs(a-b) <= max(rel_tol * "
"max(abs(a), abs(b)), abs_tol)``."
msgstr ""

#: ../Doc/library/math.rst:138
msgid ""
"The IEEE 754 special values of ``NaN``, ``inf``, and ``-inf`` will be "
"handled according to IEEE rules.  Specifically, ``NaN`` is not considered"
" close to any other value, including ``NaN``.  ``inf`` and ``-inf`` are "
"only considered close to themselves."
msgstr ""

#: ../Doc/library/math.rst:147
msgid ":pep:`485` -- A function for testing approximate equality"
msgstr ""

#: ../Doc/library/math.rst:152
msgid ""
"Return ``True`` if *x* is neither an infinity nor a NaN, and ``False`` "
"otherwise.  (Note that ``0.0`` *is* considered finite.)"
msgstr ""

#: ../Doc/library/math.rst:160
msgid ""
"Return ``True`` if *x* is a positive or negative infinity, and ``False`` "
"otherwise."
msgstr ""

#: ../Doc/library/math.rst:166
msgid "Return ``True`` if *x* is a NaN (not a number), and ``False`` otherwise."
msgstr ""

#: ../Doc/library/math.rst:171
msgid ""
"Return ``x * (2**i)``.  This is essentially the inverse of function "
":func:`frexp`."
msgstr ""

#: ../Doc/library/math.rst:177
msgid ""
"Return the fractional and integer parts of *x*.  Both results carry the "
"sign of *x* and are floats."
msgstr ""

#: ../Doc/library/math.rst:183
msgid ""
"Return the IEEE 754-style remainder of *x* with respect to *y*.  For "
"finite *x* and finite nonzero *y*, this is the difference ``x - n*y``, "
"where ``n`` is the closest integer to the exact value of the quotient ``x"
" / y``.  If ``x / y`` is exactly halfway between two consecutive "
"integers, the nearest *even* integer is used for ``n``.  The remainder "
"``r = remainder(x, y)`` thus always satisfies ``abs(r) <= 0.5 * abs(y)``."
msgstr ""

#: ../Doc/library/math.rst:190
msgid ""
"Special cases follow IEEE 754: in particular, ``remainder(x, math.inf)`` "
"is *x* for any finite *x*, and ``remainder(x, 0)`` and "
"``remainder(math.inf, x)`` raise :exc:`ValueError` for any non-NaN *x*. "
"If the result of the remainder operation is zero, that zero will have the"
" same sign as *x*."
msgstr ""

#: ../Doc/library/math.rst:196
msgid ""
"On platforms using IEEE 754 binary floating-point, the result of this "
"operation is always exactly representable: no rounding error is "
"introduced."
msgstr ""

#: ../Doc/library/math.rst:204
msgid ""
"Return the :class:`~numbers.Real` value *x* truncated to an "
":class:`~numbers.Integral` (usually an integer). Delegates to "
":meth:`x.__trunc__() <object.__trunc__>`."
msgstr ""

#: ../Doc/library/math.rst:209
msgid ""
"Note that :func:`frexp` and :func:`modf` have a different call/return "
"pattern than their C equivalents: they take a single argument and return "
"a pair of values, rather than returning their second return value through"
" an 'output parameter' (there is no such thing in Python)."
msgstr ""

#: ../Doc/library/math.rst:214
msgid ""
"For the :func:`ceil`, :func:`floor`, and :func:`modf` functions, note "
"that *all* floating-point numbers of sufficiently large magnitude are "
"exact integers. Python floats typically carry no more than 53 bits of "
"precision (the same as the platform C double type), in which case any "
"float *x* with ``abs(x) >= 2**52`` necessarily has no fractional bits."
msgstr ""

#: ../Doc/library/math.rst:222
msgid "Power and logarithmic functions"
msgstr ""

#: ../Doc/library/math.rst:226
msgid ""
"Return *e* raised to the power *x*, where *e* = 2.718281... is the base "
"of natural logarithms.  This is usually more accurate than ``math.e ** "
"x`` or ``pow(math.e, x)``."
msgstr ""

#: ../Doc/library/math.rst:233
msgid ""
"Return *e* raised to the power *x*, minus 1.  Here *e* is the base of "
"natural logarithms.  For small floats *x*, the subtraction in ``exp(x) - "
"1`` can result in a `significant loss of precision "
"<https://en.wikipedia.org/wiki/Loss_of_significance>`_\\; the "
":func:`expm1` function provides a way to compute this quantity to full "
"precision::"
msgstr ""

#: ../Doc/library/math.rst:250
msgid "With one argument, return the natural logarithm of *x* (to base *e*)."
msgstr ""

#: ../Doc/library/math.rst:252
msgid ""
"With two arguments, return the logarithm of *x* to the given *base*, "
"calculated as ``log(x)/log(base)``."
msgstr ""

#: ../Doc/library/math.rst:258
msgid ""
"Return the natural logarithm of *1+x* (base *e*). The result is "
"calculated in a way which is accurate for *x* near zero."
msgstr ""

#: ../Doc/library/math.rst:264
msgid ""
"Return the base-2 logarithm of *x*. This is usually more accurate than "
"``log(x, 2)``."
msgstr ""

#: ../Doc/library/math.rst:271
msgid ""
":meth:`int.bit_length` returns the number of bits necessary to represent "
"an integer in binary, excluding the sign and leading zeros."
msgstr ""

#: ../Doc/library/math.rst:277
msgid ""
"Return the base-10 logarithm of *x*.  This is usually more accurate than "
"``log(x, 10)``."
msgstr ""

#: ../Doc/library/math.rst:283
msgid ""
"Return ``x`` raised to the power ``y``.  Exceptional cases follow Annex "
"'F' of the C99 standard as far as possible.  In particular, ``pow(1.0, "
"x)`` and ``pow(x, 0.0)`` always return ``1.0``, even when ``x`` is a zero"
" or a NaN.  If both ``x`` and ``y`` are finite, ``x`` is negative, and "
"``y`` is not an integer then ``pow(x, y)`` is undefined, and raises "
":exc:`ValueError`."
msgstr ""

#: ../Doc/library/math.rst:290
msgid ""
"Unlike the built-in ``**`` operator, :func:`math.pow` converts both its "
"arguments to type :class:`float`.  Use ``**`` or the built-in :func:`pow`"
" function for computing exact integer powers."
msgstr ""

#: ../Doc/library/math.rst:297
msgid "Return the square root of *x*."
msgstr ""

#: ../Doc/library/math.rst:301
msgid "Trigonometric functions"
msgstr ""

#: ../Doc/library/math.rst:305
msgid "Return the arc cosine of *x*, in radians."
msgstr ""

#: ../Doc/library/math.rst:310
msgid "Return the arc sine of *x*, in radians."
msgstr ""

#: ../Doc/library/math.rst:315
msgid "Return the arc tangent of *x*, in radians."
msgstr ""

#: ../Doc/library/math.rst:320
msgid ""
"Return ``atan(y / x)``, in radians. The result is between ``-pi`` and "
"``pi``. The vector in the plane from the origin to point ``(x, y)`` makes"
" this angle with the positive X axis. The point of :func:`atan2` is that "
"the signs of both inputs are known to it, so it can compute the correct "
"quadrant for the angle. For example, ``atan(1)`` and ``atan2(1, 1)`` are "
"both ``pi/4``, but ``atan2(-1, -1)`` is ``-3*pi/4``."
msgstr ""

#: ../Doc/library/math.rst:330
msgid "Return the cosine of *x* radians."
msgstr ""

#: ../Doc/library/math.rst:335
msgid ""
"Return the Euclidean norm, ``sqrt(x*x + y*y)``. This is the length of the"
" vector from the origin to point ``(x, y)``."
msgstr ""

#: ../Doc/library/math.rst:341
msgid "Return the sine of *x* radians."
msgstr ""

#: ../Doc/library/math.rst:346
msgid "Return the tangent of *x* radians."
msgstr ""

#: ../Doc/library/math.rst:350
msgid "Angular conversion"
msgstr ""

#: ../Doc/library/math.rst:354
msgid "Convert angle *x* from radians to degrees."
msgstr ""

#: ../Doc/library/math.rst:359
msgid "Convert angle *x* from degrees to radians."
msgstr ""

#: ../Doc/library/math.rst:363
msgid "Hyperbolic functions"
msgstr ""

#: ../Doc/library/math.rst:365
msgid ""
"`Hyperbolic functions "
"<https://en.wikipedia.org/wiki/Hyperbolic_function>`_ are analogs of "
"trigonometric functions that are based on hyperbolas instead of circles."
msgstr ""

#: ../Doc/library/math.rst:371
msgid "Return the inverse hyperbolic cosine of *x*."
msgstr ""

#: ../Doc/library/math.rst:376
msgid "Return the inverse hyperbolic sine of *x*."
msgstr ""

#: ../Doc/library/math.rst:381
msgid "Return the inverse hyperbolic tangent of *x*."
msgstr ""

#: ../Doc/library/math.rst:386
msgid "Return the hyperbolic cosine of *x*."
msgstr ""

#: ../Doc/library/math.rst:391
msgid "Return the hyperbolic sine of *x*."
msgstr ""

#: ../Doc/library/math.rst:396
msgid "Return the hyperbolic tangent of *x*."
msgstr ""

#: ../Doc/library/math.rst:400
msgid "Special functions"
msgstr ""

#: ../Doc/library/math.rst:404
msgid ""
"Return the `error function "
"<https://en.wikipedia.org/wiki/Error_function>`_ at *x*."
msgstr ""

#: ../Doc/library/math.rst:407
msgid ""
"The :func:`erf` function can be used to compute traditional statistical "
"functions such as the `cumulative standard normal distribution "
"<https://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function>`_::"
msgstr ""

#: ../Doc/library/math.rst:420
msgid ""
"Return the complementary error function at *x*.  The `complementary error"
" function <https://en.wikipedia.org/wiki/Error_function>`_ is defined as "
"``1.0 - erf(x)``.  It is used for large values of *x* where a subtraction"
" from one would cause a `loss of significance "
"<https://en.wikipedia.org/wiki/Loss_of_significance>`_\\."
msgstr ""

#: ../Doc/library/math.rst:431
msgid ""
"Return the `Gamma function "
"<https://en.wikipedia.org/wiki/Gamma_function>`_ at *x*."
msgstr ""

#: ../Doc/library/math.rst:439
msgid ""
"Return the natural logarithm of the absolute value of the Gamma function "
"at *x*."
msgstr ""

#: ../Doc/library/math.rst:446
msgid "Constants"
msgstr ""

#: ../Doc/library/math.rst:450
msgid "The mathematical constant *π* = 3.141592..., to available precision."
msgstr ""

#: ../Doc/library/math.rst:455
msgid "The mathematical constant *e* = 2.718281..., to available precision."
msgstr ""

#: ../Doc/library/math.rst:460
msgid ""
"The mathematical constant *τ* = 6.283185..., to available precision. Tau "
"is a circle constant equal to 2\\ *π*, the ratio of a circle's "
"circumference to its radius. To learn more about Tau, check out Vi Hart's"
" video `Pi is (still) Wrong "
"<https://www.youtube.com/watch?v=jG7vhMMXagQ>`_, and start celebrating "
"`Tau day <https://tauday.com/>`_ by eating twice as much pie!"
msgstr ""

#: ../Doc/library/math.rst:471
msgid ""
"A floating-point positive infinity.  (For negative infinity, use "
"``-math.inf``.)  Equivalent to the output of ``float('inf')``."
msgstr ""

#: ../Doc/library/math.rst:479
msgid ""
"A floating-point \"not a number\" (NaN) value.  Equivalent to the output "
"of ``float('nan')``."
msgstr ""

#: ../Doc/library/math.rst:487
msgid ""
"The :mod:`math` module consists mostly of thin wrappers around the "
"platform C math library functions.  Behavior in exceptional cases follows"
" Annex F of the C99 standard where appropriate.  The current "
"implementation will raise :exc:`ValueError` for invalid operations like "
"``sqrt(-1.0)`` or ``log(0.0)`` (where C99 Annex F recommends signaling "
"invalid operation or divide-by-zero), and :exc:`OverflowError` for "
"results that overflow (for example, ``exp(1000.0)``).  A NaN will not be "
"returned from any of the functions above unless one or more of the input "
"arguments was a NaN; in that case, most functions will return a NaN, but "
"(again following C99 Annex F) there are some exceptions to this rule, for"
" example ``pow(float('nan'), 0.0)`` or ``hypot(float('nan'), "
"float('inf'))``."
msgstr ""

#: ../Doc/library/math.rst:499
msgid ""
"Note that Python makes no effort to distinguish signaling NaNs from quiet"
" NaNs, and behavior for signaling NaNs remains unspecified. Typical "
"behavior is to treat all NaNs as though they were quiet."
msgstr ""

#: ../Doc/library/math.rst:506
msgid "Module :mod:`cmath`"
msgstr ""

#: ../Doc/library/math.rst:507
msgid "Complex number versions of many of these functions."
msgstr ""

#~ msgid ""
#~ "Return the :class:`~numbers.Real` value *x*"
#~ " truncated to an :class:`~numbers.Integral` "
#~ "(usually an integer). Delegates to "
#~ "``x.__trunc__()``."
#~ msgstr ""

#~ msgid "Return ``e**x``."
#~ msgstr ""

#~ msgid ""
#~ "Return ``e**x - 1``.  For small "
#~ "floats *x*, the subtraction in ``exp(x)"
#~ " - 1`` can result in a "
#~ "`significant loss of precision "
#~ "<https://en.wikipedia.org/wiki/Loss_of_significance>`_\\; the"
#~ " :func:`expm1` function provides a way "
#~ "to compute this quantity to full "
#~ "precision::"
#~ msgstr ""

#~ msgid "The mathematical constant π = 3.141592..., to available precision."
#~ msgstr ""

#~ msgid "The mathematical constant e = 2.718281..., to available precision."
#~ msgstr ""

#~ msgid ""
#~ "The mathematical constant τ = "
#~ "6.283185..., to available precision. Tau "
#~ "is a circle constant equal to 2π,"
#~ " the ratio of a circle's "
#~ "circumference to its radius. To learn"
#~ " more about Tau, check out Vi "
#~ "Hart's video `Pi is (still) Wrong "
#~ "<https://www.youtube.com/watch?v=jG7vhMMXagQ>`_, and start"
#~ " celebrating `Tau day <http://tauday.com/>`_ "
#~ "by eating twice as much pie!"
#~ msgstr ""

