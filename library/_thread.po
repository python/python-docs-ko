# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-30 09:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/_thread.rst:2
msgid ":mod:`_thread` --- Low-level threading API"
msgstr ""

#: ../Doc/library/_thread.rst:15
msgid ""
"This module provides low-level primitives for working with multiple "
"threads (also called :dfn:`light-weight processes` or :dfn:`tasks`) --- "
"multiple threads of control sharing their global data space.  For "
"synchronization, simple locks (also called :dfn:`mutexes` or :dfn:`binary"
" semaphores`) are provided. The :mod:`threading` module provides an "
"easier to use and higher-level threading API built on top of this module."
msgstr ""

#: ../Doc/library/_thread.rst:26
msgid "This module used to be optional, it is now always available."
msgstr ""

#: ../Doc/library/_thread.rst:29
msgid "This module defines the following constants and functions:"
msgstr ""

#: ../Doc/library/_thread.rst:33
msgid "Raised on thread-specific errors."
msgstr ""

#: ../Doc/library/_thread.rst:35
msgid "This is now a synonym of the built-in :exc:`RuntimeError`."
msgstr ""

#: ../Doc/library/_thread.rst:41
msgid "This is the type of lock objects."
msgstr ""

#: ../Doc/library/_thread.rst:46
msgid ""
"Start a new thread and return its identifier.  The thread executes the "
"function *function* with the argument list *args* (which must be a "
"tuple).  The optional *kwargs* argument specifies a dictionary of keyword"
" arguments. When the function returns, the thread silently exits.  When "
"the function terminates with an unhandled exception, a stack trace is "
"printed and then the thread exits (but other threads continue to run)."
msgstr ""

#: ../Doc/library/_thread.rst:56
msgid ""
"Raise a :exc:`KeyboardInterrupt` exception in the main thread.  A "
"subthread can use this function to interrupt the main thread."
msgstr ""

#: ../Doc/library/_thread.rst:62
msgid ""
"Raise the :exc:`SystemExit` exception.  When not caught, this will cause "
"the thread to exit silently."
msgstr ""

#: ../Doc/library/_thread.rst:76
msgid ""
"Return a new lock object.  Methods of locks are described below.  The "
"lock is initially unlocked."
msgstr ""

#: ../Doc/library/_thread.rst:82
msgid ""
"Return the 'thread identifier' of the current thread.  This is a nonzero "
"integer.  Its value has no direct meaning; it is intended as a magic "
"cookie to be used e.g. to index a dictionary of thread-specific data.  "
"Thread identifiers may be recycled when a thread exits and another thread"
" is created."
msgstr ""

#: ../Doc/library/_thread.rst:90
msgid ""
"Return the thread stack size used when creating new threads.  The "
"optional *size* argument specifies the stack size to be used for "
"subsequently created threads, and must be 0 (use platform or configured "
"default) or a positive integer value of at least 32,768 (32 KiB). If "
"*size* is not specified, 0 is used.  If changing the thread stack size is"
" unsupported, a :exc:`RuntimeError` is raised.  If the specified stack "
"size is invalid, a :exc:`ValueError` is raised and the stack size is "
"unmodified.  32 KiB is currently the minimum supported stack size value "
"to guarantee sufficient stack space for the interpreter itself.  Note "
"that some platforms may have particular restrictions on values for the "
"stack size, such as requiring a minimum stack size > 32 KiB or requiring "
"allocation in multiples of the system memory page size - platform "
"documentation should be referred to for more information (4 KiB pages are"
" common; using multiples of 4096 for the stack size is the suggested "
"approach in the absence of more specific information). Availability: "
"Windows, systems with POSIX threads."
msgstr ""

#: ../Doc/library/_thread.rst:109
msgid ""
"The maximum value allowed for the *timeout* parameter of "
":meth:`Lock.acquire`. Specifying a timeout greater than this value will "
"raise an :exc:`OverflowError`."
msgstr ""

#: ../Doc/library/_thread.rst:116
msgid "Lock objects have the following methods:"
msgstr ""

#: ../Doc/library/_thread.rst:121
msgid ""
"Without any optional argument, this method acquires the lock "
"unconditionally, if necessary waiting until it is released by another "
"thread (only one thread at a time can acquire a lock --- that's their "
"reason for existence)."
msgstr ""

#: ../Doc/library/_thread.rst:125
msgid ""
"If the integer *waitflag* argument is present, the action depends on its "
"value: if it is zero, the lock is only acquired if it can be acquired "
"immediately without waiting, while if it is nonzero, the lock is acquired"
" unconditionally as above."
msgstr ""

#: ../Doc/library/_thread.rst:130
msgid ""
"If the floating-point *timeout* argument is present and positive, it "
"specifies the maximum wait time in seconds before returning.  A negative "
"*timeout* argument specifies an unbounded wait.  You cannot specify a "
"*timeout* if *waitflag* is zero."
msgstr ""

#: ../Doc/library/_thread.rst:135
msgid ""
"The return value is ``True`` if the lock is acquired successfully, "
"``False`` if not."
msgstr ""

#: ../Doc/library/_thread.rst:138
msgid "The *timeout* parameter is new."
msgstr ""

#: ../Doc/library/_thread.rst:141
msgid "Lock acquires can now be interrupted by signals on POSIX."
msgstr ""

#: ../Doc/library/_thread.rst:147
msgid ""
"Releases the lock.  The lock must have been acquired earlier, but not "
"necessarily by the same thread."
msgstr ""

#: ../Doc/library/_thread.rst:153
msgid ""
"Return the status of the lock: ``True`` if it has been acquired by some "
"thread, ``False`` if not."
msgstr ""

#: ../Doc/library/_thread.rst:156
msgid ""
"In addition to these methods, lock objects can also be used via the "
":keyword:`with` statement, e.g.::"
msgstr ""

#: ../Doc/library/_thread.rst:166
msgid "**Caveats:**"
msgstr ""

#: ../Doc/library/_thread.rst:170
msgid ""
"Threads interact strangely with interrupts: the :exc:`KeyboardInterrupt` "
"exception will be received by an arbitrary thread.  (When the "
":mod:`signal` module is available, interrupts always go to the main "
"thread.)"
msgstr ""

#: ../Doc/library/_thread.rst:174
msgid ""
"Calling :func:`sys.exit` or raising the :exc:`SystemExit` exception is "
"equivalent to calling :func:`_thread.exit`."
msgstr ""

#: ../Doc/library/_thread.rst:177
msgid ""
"It is not possible to interrupt the :meth:`acquire` method on a lock --- "
"the :exc:`KeyboardInterrupt` exception will happen after the lock has "
"been acquired."
msgstr ""

#: ../Doc/library/_thread.rst:180
msgid ""
"When the main thread exits, it is system defined whether the other "
"threads survive.  On most systems, they are killed without executing "
":keyword:`try` ... :keyword:`finally` clauses or executing object "
"destructors."
msgstr ""

#: ../Doc/library/_thread.rst:185
msgid ""
"When the main thread exits, it does not do any of its usual cleanup "
"(except that :keyword:`try` ... :keyword:`finally` clauses are honored), "
"and the standard I/O files are not flushed."
msgstr ""

#~ msgid ""
#~ "The module is optional.  It is "
#~ "supported on Windows, Linux, SGI IRIX,"
#~ " Solaris 2.x, as well as on "
#~ "systems that have a POSIX thread "
#~ "(a.k.a. \"pthread\") implementation.  For "
#~ "systems lacking the :mod:`_thread` module, "
#~ "the :mod:`_dummy_thread` module is available."
#~ " It duplicates this module's interface "
#~ "and can be used as a drop-in"
#~ " replacement."
#~ msgstr ""

#~ msgid "It defines the following constants and functions:"
#~ msgstr ""

