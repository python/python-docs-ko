# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-30 09:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/dbm.rst:2
msgid ":mod:`dbm` --- Interfaces to Unix \"databases\""
msgstr ""

#: ../Doc/library/dbm.rst:7
msgid "**Source code:** :source:`Lib/dbm/__init__.py`"
msgstr ""

#: ../Doc/library/dbm.rst:11
msgid ""
":mod:`dbm` is a generic interface to variants of the DBM database --- "
":mod:`dbm.gnu` or :mod:`dbm.ndbm`.  If none of these modules is "
"installed, the slow-but-simple implementation in module :mod:`dbm.dumb` "
"will be used.  There is a `third party interface "
"<https://www.jcea.es/programacion/pybsddb.htm>`_ to the Oracle Berkeley "
"DB."
msgstr ""

#: ../Doc/library/dbm.rst:20
msgid ""
"A tuple containing the exceptions that can be raised by each of the "
"supported modules, with a unique exception also named :exc:`dbm.error` as"
" the first item --- the latter is used when :exc:`dbm.error` is raised."
msgstr ""

#: ../Doc/library/dbm.rst:27
msgid ""
"This function attempts to guess which of the several simple database "
"modules available --- :mod:`dbm.gnu`, :mod:`dbm.ndbm` or :mod:`dbm.dumb` "
"--- should be used to open a given file."
msgstr ""

#: ../Doc/library/dbm.rst:31
msgid ""
"Returns one of the following values: ``None`` if the file can't be opened"
" because it's unreadable or doesn't exist; the empty string (``''``) if "
"the file's format can't be guessed; or a string containing the required "
"module name, such as ``'dbm.ndbm'`` or ``'dbm.gnu'``."
msgstr ""

#: ../Doc/library/dbm.rst:39
msgid "Open the database file *file* and return a corresponding object."
msgstr ""

#: ../Doc/library/dbm.rst:41
msgid ""
"If the database file already exists, the :func:`whichdb` function is used"
" to determine its type and the appropriate module is used; if it does not"
" exist, the first module listed above that can be imported is used."
msgstr ""

#: ../Doc/library/dbm.rst:45 ../Doc/library/dbm.rst:157
msgid "The optional *flag* argument can be:"
msgstr ""

#: ../Doc/library/dbm.rst:48 ../Doc/library/dbm.rst:160
#: ../Doc/library/dbm.rst:179 ../Doc/library/dbm.rst:275
msgid "Value"
msgstr ""

#: ../Doc/library/dbm.rst:48 ../Doc/library/dbm.rst:160
#: ../Doc/library/dbm.rst:179 ../Doc/library/dbm.rst:275
msgid "Meaning"
msgstr ""

#: ../Doc/library/dbm.rst:50 ../Doc/library/dbm.rst:162
#: ../Doc/library/dbm.rst:277
msgid "``'r'``"
msgstr ""

#: ../Doc/library/dbm.rst:50 ../Doc/library/dbm.rst:162
#: ../Doc/library/dbm.rst:277
msgid "Open existing database for reading only (default)"
msgstr ""

#: ../Doc/library/dbm.rst:53 ../Doc/library/dbm.rst:165
#: ../Doc/library/dbm.rst:280
msgid "``'w'``"
msgstr ""

#: ../Doc/library/dbm.rst:53 ../Doc/library/dbm.rst:165
#: ../Doc/library/dbm.rst:280
msgid "Open existing database for reading and writing"
msgstr ""

#: ../Doc/library/dbm.rst:56 ../Doc/library/dbm.rst:168
#: ../Doc/library/dbm.rst:283
msgid "``'c'``"
msgstr ""

#: ../Doc/library/dbm.rst:56 ../Doc/library/dbm.rst:168
#: ../Doc/library/dbm.rst:283
msgid "Open database for reading and writing, creating it if it doesn't exist"
msgstr ""

#: ../Doc/library/dbm.rst:59 ../Doc/library/dbm.rst:171
#: ../Doc/library/dbm.rst:286
msgid "``'n'``"
msgstr ""

#: ../Doc/library/dbm.rst:59 ../Doc/library/dbm.rst:171
#: ../Doc/library/dbm.rst:286
msgid "Always create a new, empty database, open for reading and writing"
msgstr ""

#: ../Doc/library/dbm.rst:63 ../Doc/library/dbm.rst:290
#: ../Doc/library/dbm.rst:346
msgid ""
"The optional *mode* argument is the Unix mode of the file, used only when"
" the database has to be created.  It defaults to octal ``0o666`` (and "
"will be modified by the prevailing umask)."
msgstr ""

#: ../Doc/library/dbm.rst:68
msgid ""
"The object returned by :func:`.open` supports the same basic "
"functionality as dictionaries; keys and their corresponding values can be"
" stored, retrieved, and deleted, and the :keyword:`in` operator and the "
":meth:`keys` method are available, as well as :meth:`get` and "
":meth:`setdefault`."
msgstr ""

#: ../Doc/library/dbm.rst:73
msgid ""
":meth:`get` and :meth:`setdefault` are now available in all database "
"modules."
msgstr ""

#: ../Doc/library/dbm.rst:76
msgid ""
"Key and values are always stored as bytes. This means that when strings "
"are used they are implicitly converted to the default encoding before "
"being stored."
msgstr ""

#: ../Doc/library/dbm.rst:80
msgid ""
"These objects also support being used in a :keyword:`with` statement, "
"which will automatically close them when done."
msgstr ""

#: ../Doc/library/dbm.rst:83
msgid ""
"Added native support for the context management protocol to the objects "
"returned by :func:`.open`."
msgstr ""

#: ../Doc/library/dbm.rst:87
msgid ""
"The following example records some hostnames and a corresponding title,  "
"and then prints out the contents of the database::"
msgstr ""

#: ../Doc/library/dbm.rst:117
msgid "Module :mod:`shelve`"
msgstr ""

#: ../Doc/library/dbm.rst:118
msgid "Persistence module which stores non-string data."
msgstr ""

#: ../Doc/library/dbm.rst:121
msgid "The individual submodules are described in the following sections."
msgstr ""

#: ../Doc/library/dbm.rst:125
msgid ":mod:`dbm.gnu` --- GNU's reinterpretation of dbm"
msgstr ""

#: ../Doc/library/dbm.rst:131
msgid "**Source code:** :source:`Lib/dbm/gnu.py`"
msgstr ""

#: ../Doc/library/dbm.rst:135
msgid ""
"This module is quite similar to the :mod:`dbm` module, but uses the GNU "
"library ``gdbm`` instead to provide some additional functionality.  "
"Please note that the file formats created by :mod:`dbm.gnu` and "
":mod:`dbm.ndbm` are incompatible."
msgstr ""

#: ../Doc/library/dbm.rst:139
msgid ""
"The :mod:`dbm.gnu` module provides an interface to the GNU DBM library. "
"``dbm.gnu.gdbm`` objects behave like mappings (dictionaries), except that"
" keys and values are always converted to bytes before storing.  Printing "
"a ``gdbm`` object doesn't print the keys and values, and the "
":meth:`items` and :meth:`values` methods are not supported."
msgstr ""

#: ../Doc/library/dbm.rst:148
msgid ""
"Raised on :mod:`dbm.gnu`-specific errors, such as I/O errors. "
":exc:`KeyError` is raised for general mapping errors like specifying an "
"incorrect key."
msgstr ""

#: ../Doc/library/dbm.rst:154
msgid ""
"Open a ``gdbm`` database and return a :class:`gdbm` object.  The "
"*filename* argument is the name of the database file."
msgstr ""

#: ../Doc/library/dbm.rst:175
msgid ""
"The following additional characters may be appended to the flag to "
"control how the database is opened:"
msgstr ""

#: ../Doc/library/dbm.rst:181
msgid "``'f'``"
msgstr ""

#: ../Doc/library/dbm.rst:181
msgid ""
"Open the database in fast mode.  Writes to the database will not be "
"synchronized."
msgstr ""

#: ../Doc/library/dbm.rst:184
msgid "``'s'``"
msgstr ""

#: ../Doc/library/dbm.rst:184
msgid ""
"Synchronized mode. This will cause changes to the database to be "
"immediately written to the file."
msgstr ""

#: ../Doc/library/dbm.rst:188
msgid "``'u'``"
msgstr ""

#: ../Doc/library/dbm.rst:188
msgid "Do not lock database."
msgstr ""

#: ../Doc/library/dbm.rst:191
msgid ""
"Not all flags are valid for all versions of ``gdbm``.  The module "
"constant :const:`open_flags` is a string of supported flag characters.  "
"The exception :exc:`error` is raised if an invalid flag is specified."
msgstr ""

#: ../Doc/library/dbm.rst:195
msgid ""
"The optional *mode* argument is the Unix mode of the file, used only when"
" the database has to be created.  It defaults to octal ``0o666``."
msgstr ""

#: ../Doc/library/dbm.rst:198
msgid ""
"In addition to the dictionary-like methods, ``gdbm`` objects have the "
"following methods:"
msgstr ""

#: ../Doc/library/dbm.rst:203
msgid ""
"It's possible to loop over every key in the database using this method  "
"and the :meth:`nextkey` method.  The traversal is ordered by ``gdbm``'s "
"internal hash values, and won't be sorted by the key values.  This method"
" returns the starting key."
msgstr ""

#: ../Doc/library/dbm.rst:210
msgid ""
"Returns the key that follows *key* in the traversal.  The following code "
"prints every key in the database ``db``, without having to create a list "
"in memory that contains them all::"
msgstr ""

#: ../Doc/library/dbm.rst:221
msgid ""
"If you have carried out a lot of deletions and would like to shrink the "
"space used by the ``gdbm`` file, this routine will reorganize the "
"database.  ``gdbm`` objects will not shorten the length of a database "
"file except by using this reorganization; otherwise, deleted file space "
"will be kept and reused as new (key, value) pairs are added."
msgstr ""

#: ../Doc/library/dbm.rst:229
msgid ""
"When the database has been opened in fast mode, this method forces any "
"unwritten data to be written to the disk."
msgstr ""

#: ../Doc/library/dbm.rst:234
msgid "Close the ``gdbm`` database."
msgstr ""

#: ../Doc/library/dbm.rst:237
msgid ":mod:`dbm.ndbm` --- Interface based on ndbm"
msgstr ""

#: ../Doc/library/dbm.rst:243
msgid "**Source code:** :source:`Lib/dbm/ndbm.py`"
msgstr ""

#: ../Doc/library/dbm.rst:247
msgid ""
"The :mod:`dbm.ndbm` module provides an interface to the Unix \"(n)dbm\" "
"library. Dbm objects behave like mappings (dictionaries), except that "
"keys and values are always stored as bytes. Printing a ``dbm`` object "
"doesn't print the keys and values, and the :meth:`items` and "
":meth:`values` methods are not supported."
msgstr ""

#: ../Doc/library/dbm.rst:252
msgid ""
"This module can be used with the \"classic\" ndbm interface or the GNU "
"GDBM compatibility interface. On Unix, the :program:`configure` script "
"will attempt to locate the appropriate header file to simplify building "
"this module."
msgstr ""

#: ../Doc/library/dbm.rst:258
msgid ""
"Raised on :mod:`dbm.ndbm`-specific errors, such as I/O errors. "
":exc:`KeyError` is raised for general mapping errors like specifying an "
"incorrect key."
msgstr ""

#: ../Doc/library/dbm.rst:264
msgid "Name of the ``ndbm`` implementation library used."
msgstr ""

#: ../Doc/library/dbm.rst:269
msgid ""
"Open a dbm database and return a ``ndbm`` object.  The *filename* "
"argument is the name of the database file (without the :file:`.dir` or "
":file:`.pag` extensions)."
msgstr ""

#: ../Doc/library/dbm.rst:272
msgid "The optional *flag* argument must be one of these values:"
msgstr ""

#: ../Doc/library/dbm.rst:294
msgid ""
"In addition to the dictionary-like methods, ``ndbm`` objects provide the "
"following method:"
msgstr ""

#: ../Doc/library/dbm.rst:299
msgid "Close the ``ndbm`` database."
msgstr ""

#: ../Doc/library/dbm.rst:303
msgid ":mod:`dbm.dumb` --- Portable DBM implementation"
msgstr ""

#: ../Doc/library/dbm.rst:308
msgid "**Source code:** :source:`Lib/dbm/dumb.py`"
msgstr ""

#: ../Doc/library/dbm.rst:314
msgid ""
"The :mod:`dbm.dumb` module is intended as a last resort fallback for the "
":mod:`dbm` module when a more robust module is not available. The "
":mod:`dbm.dumb` module is not written for speed and is not nearly as "
"heavily used as the other database modules."
msgstr ""

#: ../Doc/library/dbm.rst:321
msgid ""
"The :mod:`dbm.dumb` module provides a persistent dictionary-like "
"interface which is written entirely in Python.  Unlike other modules such"
" as :mod:`dbm.gnu` no external library is required.  As with other "
"persistent mappings, the keys and values are always stored as bytes."
msgstr ""

#: ../Doc/library/dbm.rst:326
msgid "The module defines the following:"
msgstr ""

#: ../Doc/library/dbm.rst:331
msgid ""
"Raised on :mod:`dbm.dumb`-specific errors, such as I/O errors.  "
":exc:`KeyError` is raised for general mapping errors like specifying an "
"incorrect key."
msgstr ""

#: ../Doc/library/dbm.rst:337
msgid ""
"Open a ``dumbdbm`` database and return a dumbdbm object.  The *filename* "
"argument is the basename of the database file (without any specific "
"extensions).  When a dumbdbm database is created, files with :file:`.dat`"
" and :file:`.dir` extensions are created."
msgstr ""

#: ../Doc/library/dbm.rst:342
msgid ""
"The optional *flag* argument supports only the semantics of ``'c'`` and "
"``'n'`` values.  Other values will default to database being always "
"opened for update, and will be created if it does not exist."
msgstr ""

#: ../Doc/library/dbm.rst:351
msgid ""
"It is possible to crash the Python interpreter when loading a database "
"with a sufficiently large/complex entry due to stack depth limitations in"
" Python's AST compiler."
msgstr ""

#: ../Doc/library/dbm.rst:355
msgid ""
":func:`.open` always creates a new database when the flag has the value "
"``'n'``."
msgstr ""

#: ../Doc/library/dbm.rst:362
msgid ""
"Creating database in ``'r'`` and ``'w'`` modes.  Modifying database in "
"``'r'`` mode."
msgstr ""

#: ../Doc/library/dbm.rst:363
msgid ""
"In addition to the methods provided by the "
":class:`collections.abc.MutableMapping` class, :class:`dumbdbm` objects "
"provide the following methods:"
msgstr ""

#: ../Doc/library/dbm.rst:369
msgid ""
"Synchronize the on-disk directory and data files.  This method is called "
"by the :meth:`Shelve.sync` method."
msgstr ""

#: ../Doc/library/dbm.rst:374
msgid "Close the ``dumbdbm`` database."
msgstr ""

#~ msgid ""
#~ "Deprecated since version 3.6, will be"
#~ " removed in version 3.8: Creating "
#~ "database in 'r' and 'w' modes.  "
#~ "Modifying database in 'r' mode."
#~ msgstr ""

