# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-23 06:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Hyukhoon Kwon <unace2u@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/2to3.rst:4
msgid "2to3 - Automated Python 2 to 3 code translation"
msgstr "2to3 - 파이썬 2에서 파이썬 3으로 자동 코드 변환"

#: ../Doc/library/2to3.rst:8
msgid ""
"2to3 is a Python program that reads Python 2.x source code and applies a "
"series of *fixers* to transform it into valid Python 3.x code.  The "
"standard library contains a rich set of fixers that will handle almost "
"all code.  2to3 supporting library :mod:`lib2to3` is, however, a flexible"
" and generic library, so it is possible to write your own fixers for "
"2to3.  :mod:`lib2to3` could also be adapted to custom applications in "
"which Python code needs to be edited automatically."
msgstr ""
"2to3는 파이썬 2.x 소스 코드를 유효한 파이썬 3.x 코드로 변환하기 위해 일련의 *변환자(fixers)*\\를 적용하는 프로그램입니다. "
"표준 라이브러리는 많은 양의 변환자를 제공하고 있어 코드 대부분을 처리할 수 있을 것입니다. 2to3에서 사용하는 모듈인 "
":mod:`lib2to3` 는 유연하고 제네릭합니다. 따라서 2to3 프로그램을 위해 당신만의 변환자를 작성할 수 있습니다. "
"또한 :mod:`lib2to3` 는 파이썬 코드를 자동으로 수정해주는 커스텀 응용 프로그램에서도 사용할 수 있습니다."

#: ../Doc/library/2to3.rst:20
msgid "Using 2to3"
msgstr "2to3 사용법"

#: ../Doc/library/2to3.rst:22
msgid ""
"2to3 will usually be installed with the Python interpreter as a script.  "
"It is also located in the :file:`Tools/scripts` directory of the Python "
"root."
msgstr ""
"파이썬 인터프리터가 설치될 때, 보통 2to3 스크립트도 같이 설치됩니다. 2to3 스크립트 파일은 파이썬 "
"루트 디렉터리의 하위 디렉터리인 :file:`Tools/scripts` 에서 찾을 수 있습니다."

#: ../Doc/library/2to3.rst:25
msgid ""
"2to3's basic arguments are a list of files or directories to transform.  "
"The directories are recursively traversed for Python sources."
msgstr ""
"2to3의 기본 인자는 변환하고자 하는 파일이나 디렉터리 리스트입니다. 디렉터리의 경우 하위 폴더의 파이썬 소스까지 적용됩니다."

#: ../Doc/library/2to3.rst:28
msgid "Here is a sample Python 2.x source file, :file:`example.py`::"
msgstr "샘플 파이썬 2.x 코드가 여기 있습니다. :file:`example.py`::"

#: ../Doc/library/2to3.rst:36
msgid "It can be converted to Python 3.x code via 2to3 on the command line:"
msgstr "명령줄에서 2to3를 실행하면 이 코드를 파이썬 3.x 코드로 바꿀 수 있습니다:"

#: ../Doc/library/2to3.rst:42
msgid ""
"A diff against the original source file is printed.  2to3 can also write "
"the needed modifications right back to the source file.  (A backup of the"
" original file is made unless :option:`!-n` is also given.)  Writing the "
"changes back is enabled with the :option:`!-w` flag:"
msgstr ""
"원본 파일과 변환 결과를 비교한 차이점(diff)이 출력됩니다. 2to3은 원본 소스 파일에 필요한 수정사항을 바로 적용할 수도 있습니다. "
"(:option:`!-n` 옵션이 적용되지 않았다면 원본 파일에 대한 백업이 생성될 것입니다.) :option:`!-w` 옵션을 "
"사용하면 바로 원본 파일이 수정됩니다."

#: ../Doc/library/2to3.rst:51
msgid "After transformation, :file:`example.py` looks like this::"
msgstr ":file:`example.py` 를 변환한 결과는 다음과 같습니다."

#: ../Doc/library/2to3.rst:59
msgid ""
"Comments and exact indentation are preserved throughout the translation "
"process."
msgstr "변환 과정에서 들여쓰기와 주석은 그대로 보존됩니다."

#: ../Doc/library/2to3.rst:61
msgid ""
"By default, 2to3 runs a set of :ref:`predefined fixers <2to3-fixers>`.  "
"The :option:`!-l` flag lists all available fixers.  An explicit set of "
"fixers to run can be given with :option:`!-f`.  Likewise the "
":option:`!-x` explicitly disables a fixer.  The following example runs "
"only the ``imports`` and ``has_key`` fixers:"
msgstr ""
"기본적으로 2to3는 :ref:`미리 정의된 변환자 <2to3-fixers>` 를 사용하여 실행됩니다. :option:`!-l` 옵션을 사용하면 "
"사용 가능한 모든 변환자를 볼 수 있습니다. 특정 변환자만 명시적으로 설정하고 싶으시면 :option:`!-f` 를 사용하시면 됩니다. 마찬가지로 :option:`!-x` "
"옵션으로 특정 변환자를 비활성화할 수도 있습니다. 다음 예는 ``imports`` 와 ``has_key`` 변환자만 사용한 것입니다."

#: ../Doc/library/2to3.rst:70
msgid "This command runs every fixer except the ``apply`` fixer:"
msgstr "다음은 ``apply`` 변환자만 빼고 모든 변환자를 실행하는 명령어입니다."

#: ../Doc/library/2to3.rst:76
msgid ""
"Some fixers are *explicit*, meaning they aren't run by default and must "
"be listed on the command line to be run.  Here, in addition to the "
"default fixers, the ``idioms`` fixer is run:"
msgstr ""
"몇몇 변환자는 기본적으로 실행되지 않기 때문에 명시적으로 명령줄에서 설정해야 합니다. "
"기본 변환자에 ``idioms`` 변환자를 추가한 예시가 여기 있습니다."

#: ../Doc/library/2to3.rst:84
msgid "Notice how passing ``all`` enables all default fixers."
msgstr "모든 기본 변환자를 활성화하기 위해 ``all`` 값을 사용한 것을 주목해주세요."

#: ../Doc/library/2to3.rst:86
msgid ""
"Sometimes 2to3 will find a place in your source code that needs to be "
"changed, but 2to3 cannot fix automatically.  In this case, 2to3 will "
"print a warning beneath the diff for a file.  You should address the "
"warning in order to have compliant 3.x code."
msgstr ""
"때때로 2to3는 자동 변환을 하지 못하고 당신의 코드에서 수정이 필요한 부분을 찾을 수도 있습니다. 이러면 "
"파일의 비교 결과 아래에 경고 문구를 출력할 것입니다. 당신은 이 소스코드를 3.x 버전에 맞도록 경고 "
"사항을 수정해야 합니다."

#: ../Doc/library/2to3.rst:91
msgid ""
"2to3 can also refactor doctests.  To enable this mode, use the "
":option:`!-d` flag.  Note that *only* doctests will be refactored.  This "
"also doesn't require the module to be valid Python.  For example, doctest"
" like examples in a reST document could also be refactored with this "
"option."
msgstr ""
"2to3는 doctest도 수정할 수 있습니다. 이것을 활성화하기 위해서는 :option:`!-d` 옵션을 사용하세요. "
"이것은 *오직* doctest만 수정한다는 것을 명심하세요. 이것을 사용하기 위해서 꼭 적합한 파이썬 모듈이 필요한 것은 "
"아닙니다. 예를 들어 reST 문서에 있는 예와 같은 doctest도 이 옵션과 함께 수정할 수 있습니다."

#: ../Doc/library/2to3.rst:96
msgid ""
"The :option:`!-v` option enables output of more information on the "
"translation process."
msgstr ":option:`!-v` 옵션은 변환 과정 동안 더 자세한 정보를 출력하게 해줍니다."

#: ../Doc/library/2to3.rst:99
msgid ""
"Since some print statements can be parsed as function calls or "
"statements, 2to3 cannot always read files containing the print function."
"  When 2to3 detects the presence of the ``from __future__ import "
"print_function`` compiler directive, it modifies its internal grammar to "
"interpret :func:`print` as a function.  This change can also be enabled "
"manually with the :option:`!-p` flag.  Use :option:`!-p` to run fixers on"
" code that already has had its print statements converted."
msgstr ""
"어떤 print 문장의 경우는 문장 또는 함수 호출로 파싱될 수 있기 때문에 2to3이 print 함수를 포함한 파일을 항상 처리할 "
"수 있는 것은 아닙니다. 2to3이 ``from __future__ import print_function`` 이란 컴파일러 지시어를 찾았다면 "
"2to3는 :func:`print` 를 함수로 처리하도록 내부 처리 문법을 변경할 것입니다. 이러한 변경은 :option:`!-p` "
"옵션을 가지고 직접 활성화할 수도 있습니다. 출력 문장이 이미 변경된 코드에 변환자를 실행하기 위해 :option:`!-p` "
"옵션을 사용하세요."

#: ../Doc/library/2to3.rst:107
msgid ""
"The :option:`!-o` or :option:`!--output-dir` option allows specification "
"of an alternate directory for processed output files to be written to.  "
"The :option:`!-n` flag is required when using this as backup files do not"
" make sense when not overwriting the input files."
msgstr ""
":option:`!-o` 또는 :option:`!--output-dir` 옵션을 사용하면 출력 파일이 쓰일 디렉터리를 설정할 수 있습니다."
":option:`!-n` 옵션은 입력 파일을 덮어쓰지 않아 백업 파일이 필요 없을 때 사용할 수 있습니다."

#: ../Doc/library/2to3.rst:112
msgid "The :option:`!-o` option was added."
msgstr ":option:`!-o` 옵션이 추가되었습니다."

#: ../Doc/library/2to3.rst:115
msgid ""
"The :option:`!-W` or :option:`!--write-unchanged-files` flag tells 2to3 "
"to always write output files even if no changes were required to the "
"file.  This is most useful with :option:`!-o` so that an entire Python "
"source tree is copied with translation from one directory to another. "
"This option implies the :option:`!-w` flag as it would not make sense "
"otherwise."
msgstr ""
":option:`!-W` 또는 :option:`!--write-unchanged-files` 옵션은 변경 사항이 없더라도 항상 "
"출력 파일을 쓰도록 합니다. 이것을 :option:`!-o` 옵션과 함께 쓰면 한 디렉터리에 있는 전체 파이썬 "
"소스 트리를 파이썬 3.x로 변환해서 다른 디렉터리로 복사할 때 유용하게 사용할 수 있습니다. 이치에 맞게 하기 위해 "
"이 옵션은 :option:`!-w` 옵션을 포함하고 있습니다. "

#: ../Doc/library/2to3.rst:121
msgid "The :option:`!-W` flag was added."
msgstr ":option:`!-W` 옵션이 추가되었습니다."

#: ../Doc/library/2to3.rst:124
msgid ""
"The :option:`!--add-suffix` option specifies a string to append to all "
"output filenames.  The :option:`!-n` flag is required when specifying "
"this as backups are not necessary when writing to different filenames.  "
"Example:"
msgstr ""
":option:`!--add-suffix` 옵션은 모든 출력 파일 이름 뒤에 추가할 문자열을 지정합니다. 다른 파일 이름으로 저장할 때 "
"백업 파일이 필요하지 않다면 :option:`!-n` 옵션을 같이 사용해야 합니다."
" 예시:"

#: ../Doc/library/2to3.rst:132
msgid "Will cause a converted file named ``example.py3`` to be written."
msgstr "이 명령어는 출력 파일의 이름을 ``example.py3`` 로 만들어 줍니다."

#: ../Doc/library/2to3.rst:134
msgid "The :option:`!--add-suffix` option was added."
msgstr ":option:`!--add-suffix` 옵션이 추가되었습니다."

#: ../Doc/library/2to3.rst:137
msgid "To translate an entire project from one directory tree to another use:"
msgstr "한 디렉터리에서 다른 디렉터리로 전체 프로젝트를 변환하고 싶을 때는 다음과 같이 하면 됩니다."

#: ../Doc/library/2to3.rst:147
msgid "Fixers"
msgstr "변환자 목록"

#: ../Doc/library/2to3.rst:149
msgid ""
"Each step of transforming code is encapsulated in a fixer.  The command "
"``2to3 -l`` lists them.  As :ref:`documented above <2to3-using>`, each "
"can be turned on and off individually.  They are described here in more "
"detail."
msgstr ""
"변환되는 코드의 각각 단계는 변환자 안에 캡슐화되어 있습니다. ``2to3 -l`` 명령어를 실행하면 변환자 목록을 "
"보실 수 있습니다. :ref:`위에 적어놓은 것 <2to3-using>` 과 같이, 각 변환자는 개별적으로 활성화/비활성화를 "
"할 수 있습니다. 변환자들에 대한 자세한 설명이 아래에 있습니다."

#: ../Doc/library/2to3.rst:156
msgid ""
"Removes usage of :func:`apply`.  For example ``apply(function, *args, "
"**kwargs)`` is converted to ``function(*args, **kwargs)``."
msgstr ""
":func:`apply` 사용을 제거합니다. 예를 들어 ``apply(function, *args, **kwargs)`` 를 "
"``function(*args, **kwargs)`` 로 변경합니다."

#: ../Doc/library/2to3.rst:161
msgid "Replaces deprecated :mod:`unittest` method names with the correct ones."
msgstr "폐지된 :mod:`unittest` 메서드 이름을 올바른 것으로 변경합니다."

#: ../Doc/library/2to3.rst:164 ../Doc/library/2to3.rst:352
msgid "From"
msgstr "변경 전"

#: ../Doc/library/2to3.rst:164 ../Doc/library/2to3.rst:352
msgid "To"
msgstr "변경 후"

#: ../Doc/library/2to3.rst:166
msgid "``failUnlessEqual(a, b)``"
msgstr "``failUnlessEqual(a, b)``"

#: ../Doc/library/2to3.rst:166 ../Doc/library/2to3.rst:168
msgid ":meth:`assertEqual(a, b) <unittest.TestCase.assertEqual>`"
msgstr ":meth:`assertEqual(a, b) <unittest.TestCase.assertEqual>`"

#: ../Doc/library/2to3.rst:168
msgid "``assertEquals(a, b)``"
msgstr "``assertEquals(a, b)``"

#: ../Doc/library/2to3.rst:170
msgid "``failIfEqual(a, b)``"
msgstr "``failIfEqual(a, b)``"

#: ../Doc/library/2to3.rst:170 ../Doc/library/2to3.rst:172
msgid ":meth:`assertNotEqual(a, b) <unittest.TestCase.assertNotEqual>`"
msgstr ":meth:`assertNotEqual(a, b) <unittest.TestCase.assertNotEqual>`"

#: ../Doc/library/2to3.rst:172
msgid "``assertNotEquals(a, b)``"
msgstr "``assertNotEquals(a, b)``"

#: ../Doc/library/2to3.rst:174
msgid "``failUnless(a)``"
msgstr "``failUnless(a)``"

#: ../Doc/library/2to3.rst:174 ../Doc/library/2to3.rst:176
msgid ":meth:`assertTrue(a) <unittest.TestCase.assertTrue>`"
msgstr ":meth:`assertTrue(a) <unittest.TestCase.assertTrue>`"

#: ../Doc/library/2to3.rst:176
msgid "``assert_(a)``"
msgstr "``assert_(a)``"

#: ../Doc/library/2to3.rst:178
msgid "``failIf(a)``"
msgstr "``failIf(a)``"

#: ../Doc/library/2to3.rst:178
msgid ":meth:`assertFalse(a) <unittest.TestCase.assertFalse>`"
msgstr ":meth:`assertFalse(a) <unittest.TestCase.assertFalse>`"

#: ../Doc/library/2to3.rst:180
msgid "``failUnlessRaises(exc, cal)``"
msgstr "``failUnlessRaises(exc, cal)``"

#: ../Doc/library/2to3.rst:180
msgid ":meth:`assertRaises(exc, cal) <unittest.TestCase.assertRaises>`"
msgstr ":meth:`assertRaises(exc, cal) <unittest.TestCase.assertRaises>`"

#: ../Doc/library/2to3.rst:182
msgid "``failUnlessAlmostEqual(a, b)``"
msgstr "``failUnlessAlmostEqual(a, b)``"

#: ../Doc/library/2to3.rst:182 ../Doc/library/2to3.rst:184
msgid ":meth:`assertAlmostEqual(a, b) <unittest.TestCase.assertAlmostEqual>`"
msgstr ":meth:`assertAlmostEqual(a, b) <unittest.TestCase.assertAlmostEqual>`"

#: ../Doc/library/2to3.rst:184
msgid "``assertAlmostEquals(a, b)``"
msgstr "``assertAlmostEquals(a, b)``"

#: ../Doc/library/2to3.rst:186
msgid "``failIfAlmostEqual(a, b)``"
msgstr "``failIfAlmostEqual(a, b)``"

#: ../Doc/library/2to3.rst:186 ../Doc/library/2to3.rst:188
msgid ""
":meth:`assertNotAlmostEqual(a, b) "
"<unittest.TestCase.assertNotAlmostEqual>`"
msgstr ""
":meth:`assertNotAlmostEqual(a, b) <unittest.TestCase.assertNotAlmostEqual>`"

#: ../Doc/library/2to3.rst:188
msgid "``assertNotAlmostEquals(a, b)``"
msgstr "``assertNotAlmostEquals(a, b)``"

#: ../Doc/library/2to3.rst:194
msgid "Converts :class:`basestring` to :class:`str`."
msgstr ":class:`basestring` 을 :class:`str` 로 변환합니다."

#: ../Doc/library/2to3.rst:198
msgid ""
"Converts :class:`buffer` to :class:`memoryview`.  This fixer is optional "
"because the :class:`memoryview` API is similar but not exactly the same "
"as that of :class:`buffer`."
msgstr ""
":class:`buffer` 를 :class:`memoryview` 로 변환합니다. :class:`memoryview` API가 "
":class:`buffer` API와 비슷하긴 하지만 완전히 같진 않아서 이 변환자는 선택적으로 실행됩니다."

#: ../Doc/library/2to3.rst:204
msgid ""
"Fixes dictionary iteration methods.  :meth:`dict.iteritems` is converted "
"to :meth:`dict.items`, :meth:`dict.iterkeys` to :meth:`dict.keys`, and "
":meth:`dict.itervalues` to :meth:`dict.values`.  Similarly, "
":meth:`dict.viewitems`, :meth:`dict.viewkeys` and :meth:`dict.viewvalues`"
" are converted respectively to :meth:`dict.items`, :meth:`dict.keys` and "
":meth:`dict.values`.  It also wraps existing usages of "
":meth:`dict.items`, :meth:`dict.keys`, and :meth:`dict.values` in a call "
"to :class:`list`."
msgstr ""
"딕셔너리 이터레이션 메서드를 변환합니다. :meth:`dict.iteritems` 를 :meth:`dict.items` 로, "
":meth:`dict.iterkeys` 를 :meth:`dict.keys` 로, :meth:`dict.itervalues` 를 :meth:`dict.values` "
"로 변경합니다. 마찬가지로 :meth:`dict.viewitems`, :meth:`dict.viewkeys`, :meth:`dict.viewvalues` 를 "
"각각 :meth:`dict.items`, :meth:`dict.keys`, :meth:`dict.values` 로 변경합니다. "
"기존의 :meth:`dict.items`, :meth:`dict.keys`, :meth:`dict.values` 의 사용을 :class:`list` "
"로 감싸도록 바꿉니다."

#: ../Doc/library/2to3.rst:214
msgid "Converts ``except X, T`` to ``except X as T``."
msgstr "``except X, T`` 를 ``except X as T`` 로 변환합니다."

#: ../Doc/library/2to3.rst:218
msgid "Converts the ``exec`` statement to the :func:`exec` function."
msgstr "``exec`` 문장을 :func:`exec` 함수로 변환합니다."

#: ../Doc/library/2to3.rst:222
msgid ""
"Removes usage of :func:`execfile`.  The argument to :func:`execfile` is "
"wrapped in calls to :func:`open`, :func:`compile`, and :func:`exec`."
msgstr ""
":func:`execfile` 사용을 제거합니다. :func:`execfile` 에 사용되는 인자는 :func:`open`, :func:`compile`, "
":func:`exec` 을 사용하도록 바뀝니다."

#: ../Doc/library/2to3.rst:227
msgid ""
"Changes assignment of :attr:`sys.exitfunc` to use of the :mod:`atexit` "
"module."
msgstr ":attr:`sys.exitfunc` 대입이 :mod:`atexit` 모듈을 사용하도록 바뀝니다."

#: ../Doc/library/2to3.rst:232
msgid "Wraps :func:`filter` usage in a :class:`list` call."
msgstr ":func:`filter` 함수 사용을 :class:`list` 로 감싸도록 바꿉니다."

#: ../Doc/library/2to3.rst:236
msgid ""
"Fixes function attributes that have been renamed.  For example, "
"``my_function.func_closure`` is converted to ``my_function.__closure__``."
msgstr ""
"이름이 변경된 함수 어트리뷰트를 변환합니다. 예를 들어 ``my_function.func_closure`` 를 "
"``my_function.__closure__`` 로 변경합니다. "

#: ../Doc/library/2to3.rst:241
msgid "Removes ``from __future__ import new_feature`` statements."
msgstr "``from __future__ import new_feature`` 구문을 제거합니다."

#: ../Doc/library/2to3.rst:245
msgid "Renames :func:`os.getcwdu` to :func:`os.getcwd`."
msgstr ":func:`os.getcwdu` 를 :func:`os.getcwd` 로 변경합니다."

#: ../Doc/library/2to3.rst:249
msgid "Changes ``dict.has_key(key)`` to ``key in dict``."
msgstr "``dict.has_key(key)`` 를 ``key in dict`` 로 바꿉니다."

#: ../Doc/library/2to3.rst:253
msgid ""
"This optional fixer performs several transformations that make Python "
"code more idiomatic.  Type comparisons like ``type(x) is SomeClass`` and "
"``type(x) == SomeClass`` are converted to ``isinstance(x, SomeClass)``. "
"``while 1`` becomes ``while True``.  This fixer also tries to make use of"
" :func:`sorted` in appropriate places.  For example, this block ::"
msgstr ""
"이 선택적인 변환자는 이디엄을 더 사용하도록 파이썬 코드를 변환해줍니다. ``type(x) is SomeClass`` 나 ``type(x) == SomeClass`` "
"같은 형 비교는 ``isinstance(x, SomeClass)`` 로 변환합니다. ``while 1`` 는 ``while True`` 로 변환합니다. "
"또한 이 변환자는 :func:`sorted` 가 올바른 위치에 사용될 수 있도록 수정합니다. 예를 들어 다음 코드는 ::"

#: ../Doc/library/2to3.rst:262
msgid "is changed to ::"
msgstr "아래와 같이 변경됩니다. ::"

#: ../Doc/library/2to3.rst:268
msgid "Detects sibling imports and converts them to relative imports."
msgstr "같은 단계 경로의 임포트를 찾아 상대 경로 임포트로 변경합니다."

#: ../Doc/library/2to3.rst:272
msgid "Handles module renames in the standard library."
msgstr "표준 라이브러리에 있는 모듈의 이름 변경 사항을 처리합니다."

#: ../Doc/library/2to3.rst:276
msgid ""
"Handles other modules renames in the standard library.  It is separate "
"from the :2to3fixer:`imports` fixer only because of technical "
"limitations."
msgstr ""
"표준 라이브러리에 있는 또 다른 모듈의 이름 변경 사항을 처리합니다. 기술적인 제한 사항 때문에 :2to3fixer:`imports` "
"변환자와 분리했습니다."

#: ../Doc/library/2to3.rst:281
msgid "Converts ``input(prompt)`` to ``eval(input(prompt))``."
msgstr "``input(prompt)`` 를 ``eval(input(prompt))`` 로 변경합니다."

#: ../Doc/library/2to3.rst:285
msgid "Converts :func:`intern` to :func:`sys.intern`."
msgstr ":func:`intern` 를 :func:`sys.intern` 로 변경합니다."

#: ../Doc/library/2to3.rst:289
msgid ""
"Fixes duplicate types in the second argument of :func:`isinstance`.  For "
"example, ``isinstance(x, (int, int))`` is converted to ``isinstance(x, "
"int)`` and ``isinstance(x, (int, float, int))`` is converted to "
"``isinstance(x, (int, float))``."
msgstr ""
":func:`isinstance` 의 두 번째 인자에서 중복된 형을 수정합니다. 예를 들어 ``isinstance(x, (int, int))`` "
"를 ``isinstance(x, int)`` 로, ``isinstance(x, (int, float, int))`` 를 ``isinstance(x, (int, float))`` "
"로 변경합니다."

#: ../Doc/library/2to3.rst:296
msgid ""
"Removes imports of :func:`itertools.ifilter`, :func:`itertools.izip`, and"
" :func:`itertools.imap`.  Imports of :func:`itertools.ifilterfalse` are "
"also changed to :func:`itertools.filterfalse`."
msgstr ""
":func:`itertools.ifilter`,  :func:`itertools.izip`, :func:`itertools.imap` "
"임포트를 제거합니다. :func:`itertools.ifilterfalse` 임포트를 :func:`itertools.filterfalse` 로 바꿉니다."

#: ../Doc/library/2to3.rst:302
msgid ""
"Changes usage of :func:`itertools.ifilter`, :func:`itertools.izip`, and "
":func:`itertools.imap` to their built-in equivalents. "
":func:`itertools.ifilterfalse` is changed to "
":func:`itertools.filterfalse`."
msgstr ""
":func:`itertools.ifilter`, :func:`itertools.izip`, :func:`itertools.imap` 를 "
"각각 그것에 맞는 내장 함수로 변경합니다. :func:`itertools.ifilterfalse` 를 :func:`itertools.filterfalse` "
"로 변경합니다."

#: ../Doc/library/2to3.rst:308
msgid "Renames :class:`long` to :class:`int`."
msgstr ":class:`long` 을 :class:`int` 로 바꿉니다."

#: ../Doc/library/2to3.rst:312
msgid ""
"Wraps :func:`map` in a :class:`list` call.  It also changes ``map(None, "
"x)`` to ``list(x)``.  Using ``from future_builtins import map`` disables "
"this fixer."
msgstr ""
":func:`map` 을 :class:`list` 로 감싸도록 바꿉니다. ``map(None, x)`` 를 ``list(x)`` 로 "
"바꿉니다. ``from future_builtins import map`` 를 사용하면 이 변환자가 비활성화됩니다."

#: ../Doc/library/2to3.rst:318
msgid ""
"Converts the old metaclass syntax (``__metaclass__ = Meta`` in the class "
"body) to the new (``class X(metaclass=Meta)``)."
msgstr ""
"구식의 메타 클래스 문법(클래스 바디에 ``__metaclass__ = Meta`` 를 사용)을 새로운 문법(``class X(metaclass=Meta)``)"
"으로 변경합니다."

#: ../Doc/library/2to3.rst:323
msgid ""
"Fixes old method attribute names.  For example, ``meth.im_func`` is "
"converted to ``meth.__func__``."
msgstr ""
"구식의 메서드 어트리뷰트 이름을 수정합니다. 예를 들어 ``meth.im_func`` 를 ``meth.__func__`` "
"로 변경합니다."

#: ../Doc/library/2to3.rst:328
msgid "Converts the old not-equal syntax, ``<>``, to ``!=``."
msgstr "구식의 부등호 문법인 ``<>`` 을 ``!=`` 로 변경합니다. "

#: ../Doc/library/2to3.rst:332
msgid ""
"Converts the use of iterator's :meth:`~iterator.next` methods to the "
":func:`next` function.  It also renames :meth:`next` methods to "
":meth:`~iterator.__next__`."
msgstr ""
"이터레이터의 :meth:`~iterator.next` 메서드 사용을 :func:`next` 함수로 변경합니다. "
"또한 :meth:`next` 메서드를 :meth:`~iterator.__next__` 로 바꿉니다."

#: ../Doc/library/2to3.rst:338
msgid "Renames :meth:`__nonzero__` to :meth:`~object.__bool__`."
msgstr ":meth:`__nonzero__` 를 :meth:`~object.__bool__` 로 변경합니다."

#: ../Doc/library/2to3.rst:342
msgid "Converts octal literals into the new syntax."
msgstr "8진수 리터럴을 새 문법으로 변경합니다."

#: ../Doc/library/2to3.rst:346
msgid ""
"Converts calls to various functions in the :mod:`operator` module to "
"other, but equivalent, function calls.  When needed, the appropriate "
"``import`` statements are added, e.g. ``import collections.abc``.  The "
"following mapping are made:"
msgstr ""
":mod:`operator` 모듈에 있는 다양한 함수 호출을 그것에 대응하는 다른 함수 호출로 변경합니다. "
"``import collections.abc`` 와 같이 필요하다면 ``import`` 구문도 추가됩니다. 다음과 같이 변경합니다."

#: ../Doc/library/2to3.rst:354
msgid "``operator.isCallable(obj)``"
msgstr "``operator.isCallable(obj)``"

#: ../Doc/library/2to3.rst:354
msgid "``callable(obj)``"
msgstr "``callable(obj)``"

#: ../Doc/library/2to3.rst:355
msgid "``operator.sequenceIncludes(obj)``"
msgstr "``operator.sequenceIncludes(obj)``"

#: ../Doc/library/2to3.rst:355
msgid "``operator.contains(obj)``"
msgstr "``operator.contains(obj)``"

#: ../Doc/library/2to3.rst:356
msgid "``operator.isSequenceType(obj)``"
msgstr "``operator.isSequenceType(obj)``"

#: ../Doc/library/2to3.rst:356
msgid "``isinstance(obj, collections.abc.Sequence)``"
msgstr "``isinstance(obj, collections.abc.Sequence)``"

#: ../Doc/library/2to3.rst:357
msgid "``operator.isMappingType(obj)``"
msgstr "``operator.isMappingType(obj)``"

#: ../Doc/library/2to3.rst:357
msgid "``isinstance(obj, collections.abc.Mapping)``"
msgstr "``isinstance(obj, collections.abc.Mapping)``"

#: ../Doc/library/2to3.rst:358
msgid "``operator.isNumberType(obj)``"
msgstr "``operator.isNumberType(obj)``"

#: ../Doc/library/2to3.rst:358
msgid "``isinstance(obj, numbers.Number)``"
msgstr "``isinstance(obj, numbers.Number)``"

#: ../Doc/library/2to3.rst:359
msgid "``operator.repeat(obj, n)``"
msgstr "``operator.repeat(obj, n)``"

#: ../Doc/library/2to3.rst:359
msgid "``operator.mul(obj, n)``"
msgstr "``operator.mul(obj, n)``"

#: ../Doc/library/2to3.rst:360
msgid "``operator.irepeat(obj, n)``"
msgstr "``operator.irepeat(obj, n)``"

#: ../Doc/library/2to3.rst:360
msgid "``operator.imul(obj, n)``"
msgstr "``operator.imul(obj, n)``"

#: ../Doc/library/2to3.rst:365
msgid ""
"Add extra parenthesis where they are required in list comprehensions.  "
"For example, ``[x for x in 1, 2]`` becomes ``[x for x in (1, 2)]``."
msgstr ""
"리스트 컴프리헨션 안에 괄호가 필요한 경우 추가합니다. 예를 들어 ``[x for x in 1, 2]`` 를 "
"``[x for x in (1, 2)]`` 로 변경합니다."

#: ../Doc/library/2to3.rst:370
msgid "Converts the ``print`` statement to the :func:`print` function."
msgstr "``print`` 구문을 :func:`print` 함수로 변경합니다."

#: ../Doc/library/2to3.rst:374
msgid ""
"Converts ``raise E, V`` to ``raise E(V)``, and ``raise E, V, T`` to "
"``raise E(V).with_traceback(T)``.  If ``E`` is a tuple, the translation "
"will be incorrect because substituting tuples for exceptions has been "
"removed in 3.0."
msgstr ""
"``raise E, V`` 를 ``raise E(V)`` 로, ``raise E, V, T`` 를 ``raise E(V).with_traceback(T)`` "
"로 변경합니다. 만약 ``E`` 가 튜플인 경우, 변환된 결과물은 동작하지 않을 것입니다. 왜냐하면 튜플이 예외를 대체하는 "
"것은 3.0부터 사라졌기 때문입니다. "

#: ../Doc/library/2to3.rst:380
msgid "Converts :func:`raw_input` to :func:`input`."
msgstr ":func:`raw_input` 를 :func:`input` 로 변경합니다."

#: ../Doc/library/2to3.rst:384
msgid "Handles the move of :func:`reduce` to :func:`functools.reduce`."
msgstr ":func:`reduce` 를 :func:`functools.reduce` 로 변경합니다."

#: ../Doc/library/2to3.rst:388
msgid "Converts :func:`reload` to :func:`importlib.reload`."
msgstr ":func:`reload` 를 :func:`importlib.reload` 로 변경합니다."

#: ../Doc/library/2to3.rst:392
msgid "Changes :data:`sys.maxint` to :data:`sys.maxsize`."
msgstr ":data:`sys.maxint` 를 :data:`sys.maxsize` 로 변경합니다."

#: ../Doc/library/2to3.rst:396
msgid "Replaces backtick repr with the :func:`repr` function."
msgstr "백틱 repr을 :func:`repr` 함수로 바꿉니다."

#: ../Doc/library/2to3.rst:400
msgid ""
"Replaces use of the :class:`set` constructor with set literals.  This "
"fixer is optional."
msgstr ":class:`set` 생성자를 집합 리터럴로 바꿉니다. 이 변환자는 선택적입니다."

#: ../Doc/library/2to3.rst:405
msgid "Renames :exc:`StandardError` to :exc:`Exception`."
msgstr ":exc:`StandardError` 를 :exc:`Exception` 로 바꿉니다."

#: ../Doc/library/2to3.rst:409
msgid ""
"Changes the deprecated :data:`sys.exc_value`, :data:`sys.exc_type`, "
":data:`sys.exc_traceback` to use :func:`sys.exc_info`."
msgstr ""
"더 사용되지 않을 :data:`sys.exc_value`, :data:`sys.exc_type`, :data:`sys.exc_traceback` "
"를 :func:`sys.exc_info` 로 변경합니다."

#: ../Doc/library/2to3.rst:414
msgid "Fixes the API change in generator's :meth:`throw` method."
msgstr "제너레이터 :meth:`throw` 메서드의 API 변경 사항을 반영합니다."

#: ../Doc/library/2to3.rst:418
msgid ""
"Removes implicit tuple parameter unpacking.  This fixer inserts temporary"
" variables."
msgstr "묵시적으로 튜플 매개 변수를 언패킹하는 것을 제거합니다. 이로 인해 이 변환자는 임시 변수를 추가합니다."

#: ../Doc/library/2to3.rst:423
msgid ""
"Fixes code broken from the removal of some members in the :mod:`types` "
"module."
msgstr ":mod:`types` 모듈에서 몇몇 멤버가 삭제되어 코드가 동작하지 않던 것을 수정합니다."

#: ../Doc/library/2to3.rst:428
msgid "Renames :class:`unicode` to :class:`str`."
msgstr ":class:`unicode` 를 :class:`str` 로 변경합니다."

#: ../Doc/library/2to3.rst:432
msgid ""
"Handles the rename of :mod:`urllib` and :mod:`urllib2` to the "
":mod:`urllib` package."
msgstr ":mod:`urllib` 와 :mod:`urllib2` 를 :mod:`urllib` 패키지로 변경합니다."

#: ../Doc/library/2to3.rst:437
msgid ""
"Removes excess whitespace from comma separated items.  This fixer is "
"optional."
msgstr "쉼표로 구분뒨 아이템 목록에서 필요 이상의 공백을 제거합니다. 이 변경자는 선택적입니다."

#: ../Doc/library/2to3.rst:442
msgid ""
"Renames :func:`xrange` to :func:`range` and wraps existing :func:`range` "
"calls with :class:`list`."
msgstr ""
":func:`xrange` 를 :func:`range` 로 바꿉니다. 기존 :func:`range` 를 :class:`list` 로 "
"감쌉니다."

#: ../Doc/library/2to3.rst:447
msgid "Changes ``for x in file.xreadlines()`` to ``for x in file``."
msgstr "``for x in file.xreadlines()`` 를 ``for x in file`` 로 변경합니다."

#: ../Doc/library/2to3.rst:451
msgid ""
"Wraps :func:`zip` usage in a :class:`list` call.  This is disabled when "
"``from future_builtins import zip`` appears."
msgstr ""
":func:`zip` 를 :class:`list` 로 감쌉니다. 이 변환자는 ``from future_builtins import zip`` "
"가 있을 때는 비활성화됩니다."

#: ../Doc/library/2to3.rst:456
msgid ":mod:`lib2to3` - 2to3's library"
msgstr ":mod:`lib2to3` - 2to3 라이브러리"

#: ../Doc/library/2to3.rst:465
msgid "**Source code:** :source:`Lib/lib2to3/`"
msgstr "**소스 코드:** :source:`Lib/lib2to3/`"

#: ../Doc/library/2to3.rst:471
msgid ""
"The :mod:`lib2to3` API should be considered unstable and may change "
"drastically in the future."
msgstr ":mod:`lib2to3` API는 미래에 크게 바뀔 수 있기 때문에 안정적이지 않다고 생각해야 합니다."
