# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-26 18:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/__main__.rst:3
msgid ":mod:`__main__` --- Top-level script environment"
msgstr ":mod:`__main__` --- 최상위 스크립트 환경"

#: ../Doc/library/__main__.rst:10
msgid ""
"``'__main__'`` is the name of the scope in which top-level code executes."
" A module's __name__ is set equal to ``'__main__'`` when read from "
"standard input, a script, or from an interactive prompt."
msgstr ""
"``'__main__'`` 은 최상위 코드가 실행되는 스코프의 이름입니다. 모듈의 __name__ 은 표준 입력, 스크립트 또는 대화식 "
"프롬프트에서 읽힐 때 ``'__main__'`` 으로 설정됩니다."

#: ../Doc/library/__main__.rst:14
msgid ""
"A module can discover whether or not it is running in the main scope by "
"checking its own ``__name__``, which allows a common idiom for "
"conditionally executing code in a module when it is run as a script or "
"with ``python -m`` but not when it is imported::"
msgstr ""
"모듈은 자신의 ``__name__`` 을 검사하여 메인 스코프에서 실행 중인지를 확인할 수 있습니다. 이 때문에 임포트될 때는 실행되지 "
"않지만, 스크립트로 실행되거나 ``python -m`` 으로 실행될 때 조건부로 동작하는 공통 관용구를 사용할 수 있습니다::"

#: ../Doc/library/__main__.rst:23
msgid ""
"For a package, the same effect can be achieved by including a "
"``__main__.py`` module, the contents of which will be executed when the "
"module is run with ``-m``."
msgstr ""
"패키지의 경우, ``__main__.py`` 모듈을 포함 시키면 같은 효과를 얻을 수 있습니다. 모듈의 내용은 모듈이 ``-m`` 으로 "
"실행될 때 실행됩니다."
