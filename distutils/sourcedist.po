# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-30 09:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/distutils/sourcedist.rst:5
msgid "Creating a Source Distribution"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:7
msgid ""
"As shown in section :ref:`distutils-simple-example`, you use the "
":command:`sdist` command to create a source distribution.  In the "
"simplest case, ::"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:12
msgid ""
"(assuming you haven't specified any :command:`sdist` options in the setup"
" script or config file), :command:`sdist` creates the archive of the "
"default format for the current platform.  The default format is a gzip'ed"
" tar file (:file:`.tar.gz`) on Unix, and ZIP file on Windows."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:17
msgid ""
"You can specify as many formats as you like using the :option:`!--"
"formats` option, for example::"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:22
msgid "to create a gzipped tarball and a zip file.  The available formats are:"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:25
msgid "Format"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:25
msgid "Description"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:25
msgid "Notes"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:27
msgid "``zip``"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:27
msgid "zip file (:file:`.zip`)"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:27
msgid "(1),(3)"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:29
msgid "``gztar``"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:29
msgid "gzip'ed tar file (:file:`.tar.gz`)"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:29
msgid "\\(2)"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:32
msgid "``bztar``"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:32
msgid "bzip2'ed tar file (:file:`.tar.bz2`)"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:35
msgid "``xztar``"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:35
msgid "xz'ed tar file (:file:`.tar.xz`)"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:38
msgid "``ztar``"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:38
msgid "compressed tar file (:file:`.tar.Z`)"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:38
msgid "\\(4)"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:41
msgid "``tar``"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:41
msgid "tar file (:file:`.tar`)"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:44
msgid "Added support for the ``xztar`` format."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:47
msgid "Notes:"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:50
msgid "default on Windows"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:53
msgid "default on Unix"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:56
msgid ""
"requires either external :program:`zip` utility or :mod:`zipfile` module "
"(part of the standard Python library since Python 1.6)"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:60
msgid ""
"requires the :program:`compress` program. Notice that this format is now "
"pending for deprecation and will be removed in the future versions of "
"Python."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:63
msgid ""
"When using any ``tar`` format (``gztar``, ``bztar``, ``xztar``, ``ztar`` "
"or ``tar``), under Unix you can specify the ``owner`` and ``group`` names"
" that will be set for each member of the archive."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:67
msgid "For example, if you want all files of the archive to be owned by root::"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:75
msgid "Specifying the files to distribute"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:77
msgid ""
"If you don't supply an explicit list of files (or instructions on how to "
"generate one), the :command:`sdist` command puts a minimal default set "
"into the source distribution:"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:81
msgid ""
"all Python source files implied by the ``py_modules`` and ``packages`` "
"options"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:84
msgid ""
"all C source files mentioned in the ``ext_modules`` or ``libraries`` "
"options"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:90
msgid ""
"scripts identified by the ``scripts`` option See :ref:`distutils-"
"installing-scripts`."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:93
msgid ""
"anything that looks like a test script: :file:`test/test\\*.py` "
"(currently, the Distutils don't do anything with test scripts except "
"include them in source distributions, but in the future there will be a "
"standard for testing Python module distributions)"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:98
msgid ""
"Any of the standard README files (:file:`README`, :file:`README.txt`, or "
":file:`README.rst`), :file:`setup.py` (or whatever you called your setup "
"script), and :file:`setup.cfg`."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:102
msgid ""
"all files that matches the ``package_data`` metadata. See :ref"
":`distutils-installing-package-data`."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:105
msgid ""
"all files that matches the ``data_files`` metadata. See :ref:`distutils-"
"additional-files`."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:108
msgid ""
"Sometimes this is enough, but usually you will want to specify additional"
" files to distribute.  The typical way to do this is to write a *manifest"
" template*, called :file:`MANIFEST.in` by default.  The manifest template"
" is just a list of instructions for how to generate your manifest file, "
":file:`MANIFEST`, which is the exact list of files to include in your "
"source distribution.  The :command:`sdist` command processes this "
"template and generates a manifest based on its instructions and what it "
"finds in the filesystem."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:116
msgid ""
"If you prefer to roll your own manifest file, the format is simple: one "
"filename per line, regular files (or symlinks to them) only.  If you do "
"supply your own :file:`MANIFEST`, you must specify everything: the "
"default set of files described above does not apply in this case."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:121
msgid ""
"An existing generated :file:`MANIFEST` will be regenerated without "
":command:`sdist` comparing its modification time to the one of "
":file:`MANIFEST.in` or :file:`setup.py`."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:126
msgid ""
":file:`MANIFEST` files start with a comment indicating they are "
"generated. Files without this comment are not overwritten or removed."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:130
msgid ""
":command:`sdist` will read a :file:`MANIFEST` file if no "
":file:`MANIFEST.in` exists, like it used to do."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:134
msgid ""
":file:`README.rst` is now included in the list of distutils standard "
"READMEs."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:138
msgid ""
"The manifest template has one command per line, where each command "
"specifies a set of files to include or exclude from the source "
"distribution.  For an example, again we turn to the Distutils' own "
"manifest template:"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:148
msgid ""
"The meanings should be fairly clear: include all files in the "
"distribution root matching :file:`\\*.txt`, all files anywhere under the "
":file:`examples` directory matching :file:`\\*.txt` or :file:`\\*.py`, "
"and exclude all directories matching :file:`examples/sample?/build`.  All"
" of this is done *after* the standard include set, so you can exclude "
"files from the standard set with explicit instructions in the manifest "
"template.  (Or, you can use the :option:`!--no-defaults` option to "
"disable the standard set entirely.)  There are several other commands "
"available in the manifest template mini-language; see section :ref"
":`sdist-cmd`."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:158
msgid ""
"The order of commands in the manifest template matters: initially, we "
"have the list of default files as described above, and each command in "
"the template adds to or removes from that list of files.  Once we have "
"fully processed the manifest template, we remove files that should not be"
" included in the source distribution:"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:164
msgid "all files in the Distutils \"build\" tree (default :file:`build/`)"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:166
msgid ""
"all files in directories named :file:`RCS`, :file:`CVS`, :file:`.svn`, "
":file:`.hg`, :file:`.git`, :file:`.bzr` or :file:`_darcs`"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:169
msgid ""
"Now we have our complete list of files, which is written to the manifest "
"for future reference, and then used to build the source distribution "
"archive(s)."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:172
msgid ""
"You can disable the default set of included files with the :option"
":`!--no-defaults` option, and you can disable the standard exclude set "
"with :option:`!--no-prune`."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:176
msgid ""
"Following the Distutils' own manifest template, let's trace how the "
":command:`sdist` command builds the list of files to include in the "
"Distutils source distribution:"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:180
msgid ""
"include all Python source files in the :file:`distutils` and "
":file:`distutils/command` subdirectories (because packages corresponding "
"to those two directories were mentioned in the ``packages`` option in the"
" setup script---see section :ref:`setup-script`)"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:185
msgid ""
"include :file:`README.txt`, :file:`setup.py`, and :file:`setup.cfg` "
"(standard files)"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:188
msgid "include :file:`test/test\\*.py` (standard files)"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:190
msgid ""
"include :file:`\\*.txt` in the distribution root (this will find "
":file:`README.txt` a second time, but such redundancies are weeded out "
"later)"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:193
msgid ""
"include anything matching :file:`\\*.txt` or :file:`\\*.py` in the sub-"
"tree under :file:`examples`,"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:196
msgid ""
"exclude all files in the sub-trees starting at directories matching "
":file:`examples/sample?/build`\\ ---this may exclude files included by "
"the previous two steps, so it's important that the ``prune`` command in "
"the manifest template comes after the ``recursive-include`` command"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:201
msgid ""
"exclude the entire :file:`build` tree, and any :file:`RCS`, :file:`CVS`, "
":file:`.svn`, :file:`.hg`, :file:`.git`, :file:`.bzr` and :file:`_darcs` "
"directories"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:205
msgid ""
"Just like in the setup script, file and directory names in the manifest "
"template should always be slash-separated; the Distutils will take care "
"of converting them to the standard representation on your platform. That "
"way, the manifest template is portable across operating systems."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:214
msgid "Manifest-related options"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:216
msgid ""
"The normal course of operations for the :command:`sdist` command is as "
"follows:"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:218
msgid ""
"if the manifest file (:file:`MANIFEST` by default) exists and the first "
"line does not have a comment indicating it is generated from "
":file:`MANIFEST.in`, then it is used as is, unaltered"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:222
msgid ""
"if the manifest file doesn't exist or has been previously automatically "
"generated, read :file:`MANIFEST.in` and create the manifest"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:225
msgid ""
"if neither :file:`MANIFEST` nor :file:`MANIFEST.in` exist, create a "
"manifest with just the default file set"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:228
msgid ""
"use the list of files now in :file:`MANIFEST` (either just generated or "
"read in) to create the source distribution archive(s)"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:231
msgid ""
"There are a couple of options that modify this behaviour.  First, use the"
" :option:`!--no-defaults` and :option:`!--no-prune` to disable the "
"standard \"include\" and \"exclude\" sets."
msgstr ""

#: ../Doc/distutils/sourcedist.rst:235
msgid ""
"Second, you might just want to (re)generate the manifest, but not create "
"a source distribution::"
msgstr ""

#: ../Doc/distutils/sourcedist.rst:240
msgid ":option:`!-o` is a shortcut for :option:`!--manifest-only`."
msgstr ""

#~ msgid ""
#~ ":file:`README.txt` (or :file:`README`), "
#~ ":file:`setup.py` (or whatever  you called "
#~ "your setup script), and :file:`setup.cfg`"
#~ msgstr ""

