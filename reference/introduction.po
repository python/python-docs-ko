# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-26 18:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/reference/introduction.rst:6
msgid "Introduction"
msgstr "개요"

#: ../Doc/reference/introduction.rst:8
msgid ""
"This reference manual describes the Python programming language. It is "
"not intended as a tutorial."
msgstr ""
"이 레퍼런스 설명서는 파이썬 프로그래밍 언어를 설명합니다. 자습서를 목표로 하고 있지 않습니다."

#: ../Doc/reference/introduction.rst:11
msgid ""
"While I am trying to be as precise as possible, I chose to use English "
"rather than formal specifications for everything except syntax and "
"lexical analysis. This should make the document more understandable to "
"the average reader, but will leave room for ambiguities. Consequently, if"
" you were coming from Mars and tried to re-implement Python from this "
"document alone, you might have to guess things and in fact you would "
"probably end up implementing quite a different language. On the other "
"hand, if you are using Python and wonder what the precise rules about a "
"particular area of the language are, you should definitely be able to "
"find them here. If you would like to see a more formal definition of the "
"language, maybe you could volunteer your time --- or invent a cloning "
"machine :-)."
msgstr ""
"가능한 한 정확하려고 노력하고 있지만, 문법과 어휘 분석 이외의 모든 것에는 형식 규격보다는 자연어를 "
"사용합니다. 이 선택이 평균적인 독자들이 문서를 좀 더 잘 이해하도록 만들지만, 동시에 모호해질 "
"가능성 역시 만듭니다. 결과적으로, 만약 여러분이 화성에서 왔고 이 문서만으로 파이썬을 다시 구현"
"하려고 하면, 아마도 여러 가지를 짐작해야 할 것이고 결국 많이 다른 언어를 만드는 것으로 "
"끝날 것입니다. 반면에, 여러분이 파이썬을 사용하고 있고 언어의 특정 영역에 대한 정확한 규칙에 대해 "
"궁금해하고 있다면 거의 확실히 이곳에서 답을 찾을 수 있습니다. 좀 더 형식화된 정의를 보고 싶다면, "
"아마도 여러분의 시간을 기부하는 편이 좋습니다 --- 그렇지 않으면 클로닝 기계를 발명하거나 :-)."

#: ../Doc/reference/introduction.rst:23
msgid ""
"It is dangerous to add too many implementation details to a language "
"reference document --- the implementation may change, and other "
"implementations of the same language may work differently.  On the other "
"hand, CPython is the one Python implementation in widespread use "
"(although alternate implementations continue to gain support), and its "
"particular quirks are sometimes worth being mentioned, especially where "
"the implementation imposes additional limitations. Therefore, you'll find"
" short \"implementation notes\" sprinkled throughout the text."
msgstr ""
"참조 문서에 너무 많은 구현 세부 사항을 넣는 것은 위험합니다. 구현은 변경될 것이고 같은 언어의 다른 "
"구현도 좀 다른 방식으로 동작할 수 있습니다. 반면에 (대안 구현이 점차 지지도를 높여가고 있기는 하지만) "
"CPython 은 가장 널리 사용되는 파이썬 구현이고, 그것의 특별한 경우 들은 때로 언급할 가치가 있습니다. "
"구현이 추가의 제약을 내포하고 있는 경우는 특히 그렇습니다. 그래서, 텍스트 중간중간 짧은 "
"\"구현 노트\" 가 튀어나오는 것을 보게 될 것입니다."

#: ../Doc/reference/introduction.rst:32
msgid ""
"Every Python implementation comes with a number of built-in and standard "
"modules.  These are documented in :ref:`library-index`.  A few built-in "
"modules are mentioned when they interact in a significant way with the "
"language definition."
msgstr ""
"모든 파이썬 구현에는 많은 내장 표준 모듈들이 따라옵니다. 이것들은 :ref:`library-index` "
"에 기술되어 있습니다. 언어 정의에 주목할 만한 방식으로 관계될 경우 몇몇 내장 모듈들은 따로 언급됩니다."

#: ../Doc/reference/introduction.rst:41
msgid "Alternate Implementations"
msgstr "대안 구현들"

#: ../Doc/reference/introduction.rst:43
msgid ""
"Though there is one Python implementation which is by far the most "
"popular, there are some alternate implementations which are of particular"
" interest to different audiences."
msgstr ""
"눈에 띄게 널리 사용되는 파이썬 구현이 존재하기는 하지만, 특정한 관심사를 가진 대상들에게 "
"호소력을 가진 여러 대안 구현들이 존재합니다."

#: ../Doc/reference/introduction.rst:47
msgid "Known implementations include:"
msgstr "알려진 구현들은:"

#: ../Doc/reference/introduction.rst:51
msgid "CPython"
msgstr "CPython"

#: ../Doc/reference/introduction.rst:50
msgid ""
"This is the original and most-maintained implementation of Python, "
"written in C. New language features generally appear here first."
msgstr ""
"원조이기도 하고 가장 잘 관리되고 있는 C로 작성된 파이썬 구현입니다. 언어의 새로운 기능은 보통 "
"여기에서 처음 등장합니다."

#: ../Doc/reference/introduction.rst:57
msgid "Jython"
msgstr "Jython"

#: ../Doc/reference/introduction.rst:54
msgid ""
"Python implemented in Java.  This implementation can be used as a "
"scripting language for Java applications, or can be used to create "
"applications using the Java class libraries.  It is also often used to "
"create tests for Java libraries. More information can be found at `the "
"Jython website <http://www.jython.org/>`_."
msgstr ""
"파이썬 자바구현. 이 구현은 자바 응용 프로그램을 위한 스크립트 언어로 사용되거나, 자바 클래스 라이브러리를 "
"활용하는 응용 프로그램을 만드는데 사용될 수 있습니다. 종종 자바 라이브러리의 테스트를 만드는 데 사용되기도 합니다. "
"더 자세한 정보는 `Jython 웹사이트 <http://www.jython.org/>`_ 에서 찾을 수 있습니다."

#: ../Doc/reference/introduction.rst:63
msgid "Python for .NET"
msgstr "Python for .NET"

#: ../Doc/reference/introduction.rst:60
msgid ""
"This implementation actually uses the CPython implementation, but is a "
"managed .NET application and makes .NET libraries available.  It was "
"created by Brian Lloyd.  For more information, see the `Python for .NET "
"home page <https://pythonnet.github.io/>`_."
msgstr ""
"이 구현은 실제로는 CPython 구현을 사용하지만, 매니지드(managed) .NET 응용 프로그램이고 .NET "
"라이브러리를 제공합니다. Bryan Lloyd가 만들었습니다다. 더 자세한 정보는 `Python for .NET "
"홈페이지 <https://pythonnet.github.io/>`_ 에서 제공됩니다."

#: ../Doc/reference/introduction.rst:69
msgid "IronPython"
msgstr "IronPython"

#: ../Doc/reference/introduction.rst:66
msgid ""
"An alternate Python for .NET.  Unlike Python.NET, this is a complete "
"Python implementation that generates IL, and compiles Python code "
"directly to .NET assemblies.  It was created by Jim Hugunin, the original"
" creator of Jython.  For more information, see `the IronPython website "
"<http://ironpython.net/>`_."
msgstr ""
".NET을 위한 대안 파이썬. Python.NET 과는 달리 이것은 IL을 생성하고, 파이썬 코드를 .NET "
"어셈블리로 직접 컴파일하는 완전한 파이썬 구현입니다. Jim Hugunin 이 만들었는데, Jython 의 "
"원저자이기도 합니다. 자세한 정보는 `IronPython 웹사이트 <http://ironpython.net/>`_ 에서 "
"얻을 수 있습니다."

#: ../Doc/reference/introduction.rst:77
msgid "PyPy"
msgstr "PyPy"

#: ../Doc/reference/introduction.rst:72
msgid ""
"An implementation of Python written completely in Python. It supports "
"several advanced features not found in other implementations like "
"stackless support and a Just in Time compiler. One of the goals of the "
"project is to encourage experimentation with the language itself by "
"making it easier to modify the interpreter (since it is written in "
"Python).  Additional information is available on `the PyPy project's home"
" page <http://pypy.org/>`_."
msgstr ""
"완전히 파이썬으로 작성된 파이썬 구현. 스택 리스(stackless) 지원이나 JIT 컴파일러와 같이 다른 "
"구현에서는 찾을 수 없는 고급 기능을 제공합니다. 이 프로젝트의 목표 중 하나는 (파이썬으로 쓰였기 "
"때문에) 인터프리터 수정을 쉽게 만들어서 언어 자체에 대한 실험을 북돋는 것입니다. 자세한 정보는 "
"`PyPy 프로젝트의 홈페이지 <http://pypy.org/>`_ 에서 찾을 수 있습니다."

#: ../Doc/reference/introduction.rst:79
msgid ""
"Each of these implementations varies in some way from the language as "
"documented in this manual, or introduces specific information beyond "
"what's covered in the standard Python documentation.  Please refer to the"
" implementation-specific documentation to determine what else you need to"
" know about the specific implementation you're using."
msgstr ""
"각 구현은 이 설명서에서 설명되는 언어와 조금씩 각기 다른 방법으로 벗어나거나, 표준 파이썬 문서에서 "
"다루는 범위 밖의 특별한 정보들을 소개합니다. 여러분이 사용 중인 구현에 대해 어떤 것을 더 알아야 하는지 "
"판단하기 위해서는 구현 별로 제공되는 문서를 참조할 필요가 있습니다."

#: ../Doc/reference/introduction.rst:89
msgid "Notation"
msgstr "표기법"

#: ../Doc/reference/introduction.rst:93
msgid ""
"The descriptions of lexical analysis and syntax use a modified BNF "
"grammar notation.  This uses the following style of definition:"
msgstr ""
"어휘 분석과 문법의 기술은 수정된 BNF 문법 표기법을 사용합니다. 이것은 다음과 같은 정의 스타일을 "
"사용합니다."

#: ../Doc/reference/introduction.rst:100
msgid ""
"The first line says that a ``name`` is an ``lc_letter`` followed by a "
"sequence of zero or more ``lc_letter``\\ s and underscores.  An "
"``lc_letter`` in turn is any of the single characters ``'a'`` through "
"``'z'``.  (This rule is actually adhered to for the names defined in "
"lexical and grammar rules in this document.)"
msgstr ""
"첫 줄은 ``name`` 이 ``lc_letter`` 로 시작하고, 없거나 하나 이상의 ``lc_letter`` 나 "
"밑줄이 뒤따르는 형태로 구성된다고 말합니다. 한편 ``lc_letter`` 는 ``'a'`` 와 ``'z'`` "
"사이의 문자 하나입니다. (사실 이 규칙은 이 문서에서 어휘와 문법 규칙에서 정의되는 이름들에 대한 "
"규칙입니다.)"

#: ../Doc/reference/introduction.rst:105
msgid ""
"Each rule begins with a name (which is the name defined by the rule) and "
"``::=``.  A vertical bar (``|``) is used to separate alternatives; it is "
"the least binding operator in this notation.  A star (``*``) means zero "
"or more repetitions of the preceding item; likewise, a plus (``+``) means"
" one or more repetitions, and a phrase enclosed in square brackets (``[ "
"]``) means zero or one occurrences (in other words, the enclosed phrase "
"is optional).  The ``*`` and ``+`` operators bind as tightly as possible;"
" parentheses are used for grouping.  Literal strings are enclosed in "
"quotes.  White space is only meaningful to separate tokens. Rules are "
"normally contained on a single line; rules with many alternatives may be "
"formatted alternatively with each line after the first beginning with a "
"vertical bar."
msgstr ""
"개별 규칙은 이름 (위 규칙에 등장하는 ``name``)과 ``::=`` 로 시작합니다. 세로막대(``|``)는 "
"대안들을 분리하는 데 사용됩니다; 이 표기법에서 우선순위가 가장 낮은 연산자입니다. 별표(``*``)는 앞에 "
"나오는 항목이 생략되거나 한 번 이상 반복될 수 있다는 의미입니다; 비슷하게, 더하기(``+``)는 한 번 "
"이상 반복될 수 있지만 생략할 수는 없다는 뜻이고, 꺾쇠괄호(``[]``)로 둘러싸인 것은 최대 한 번 "
"나올 수 있고, 생략 가능하다는 뜻입니다. ``*`` 와 ``+`` 연산자는 최대한 엄격하게 연결됩니다; "
"우선순위가 가장 높습니다; 괄호는 덩어리로 묶는 데 사용됩니다. 문자열 리터럴은 따옴표로 둘러싸입니다. "
"공백은 토큰을 분리하는 용도로만 사용됩니다. 규칙은 보통 한 줄로 표현됩니다; 대안이 많은 규칙은 "
"여러 줄로 표현될 수도 있는데, 뒤따르는 줄들이 세로막대로 시작되게 만듭니다."

#: ../Doc/reference/introduction.rst:119
msgid ""
"In lexical definitions (as the example above), two more conventions are "
"used: Two literal characters separated by three dots mean a choice of any"
" single character in the given (inclusive) range of ASCII characters.  A "
"phrase between angular brackets (``<...>``) gives an informal description"
" of the symbol defined; e.g., this could be used to describe the notion "
"of 'control character' if needed."
msgstr ""
"어휘 정의 (위에서 든 예와 같이) 에서는, 두 가지 추가 관례가 사용됩니다: 두 개의 리터럴 문자가 세 개의 "
"점으로 분리되어 있으면 주어진 (끝의 두 문자 모두 포함하는) 범위의 ASCII 문자 중 어느 하나라는 "
"뜻입니다. 홑화살괄호(``<...>``) 안에 들어있는 구문은, 정의되는 기호에 대한 비형식적 설명을 "
"제공합니다. 즉 필요한 경우 '제어 문자'를 설명하는데 사용될 수 있습니다."

#: ../Doc/reference/introduction.rst:126
msgid ""
"Even though the notation used is almost the same, there is a big "
"difference between the meaning of lexical and syntactic definitions: a "
"lexical definition operates on the individual characters of the input "
"source, while a syntax definition operates on the stream of tokens "
"generated by the lexical analysis. All uses of BNF in the next chapter "
"(\"Lexical Analysis\") are lexical definitions; uses in subsequent "
"chapters are syntactic definitions."
msgstr ""
"사용되는 표기법이 거의 같다고 하더라도, 어휘와 문법 정의 간에는 커다란 차이가 있습니다: "
"어휘 정의는 입력의 개별 문자에 적용되는 반면, 문법 정의는 어휘 분석기가 만들어내는 토큰들에 "
"적용됩니다. 다음 장 (\"어휘 분석(Lexical Analysis)\")에서 사용되는 모든 BNF는 어휘 "
"정의입니다; 그 이후의 장에서는 문법 정의입니다."
