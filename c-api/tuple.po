# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-30 09:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/c-api/tuple.rst:6
msgid "Tuple Objects"
msgstr ""

#: ../Doc/c-api/tuple.rst:13
msgid "This subtype of :c:type:`PyObject` represents a Python tuple object."
msgstr ""

#: ../Doc/c-api/tuple.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python tuple type;"
" it is the same object as :class:`tuple` in the Python layer."
msgstr ""

#: ../Doc/c-api/tuple.rst:24
msgid ""
"Return true if *p* is a tuple object or an instance of a subtype of the "
"tuple type."
msgstr ""

#: ../Doc/c-api/tuple.rst:30
msgid ""
"Return true if *p* is a tuple object, but not an instance of a subtype of"
" the tuple type."
msgstr ""

#: ../Doc/c-api/tuple.rst:36
msgid "Return a new tuple object of size *len*, or *NULL* on failure."
msgstr ""

#: ../Doc/c-api/tuple.rst:41
msgid ""
"Return a new tuple object of size *n*, or *NULL* on failure. The tuple "
"values are initialized to the subsequent *n* C arguments pointing to "
"Python objects. ``PyTuple_Pack(2, a, b)`` is equivalent to "
"``Py_BuildValue(\"(OO)\", a, b)``."
msgstr ""

#: ../Doc/c-api/tuple.rst:48
msgid "Take a pointer to a tuple object, and return the size of that tuple."
msgstr ""

#: ../Doc/c-api/tuple.rst:53
msgid ""
"Return the size of the tuple *p*, which must be non-*NULL* and point to a"
" tuple; no error checking is performed."
msgstr ""

#: ../Doc/c-api/tuple.rst:59
msgid ""
"Return the object at position *pos* in the tuple pointed to by *p*.  If "
"*pos* is out of bounds, return *NULL* and sets an :exc:`IndexError` "
"exception."
msgstr ""

#: ../Doc/c-api/tuple.rst:65
msgid "Like :c:func:`PyTuple_GetItem`, but does no checking of its arguments."
msgstr ""

#: ../Doc/c-api/tuple.rst:70
msgid ""
"Take a slice of the tuple pointed to by *p* from *low* to *high* and "
"return it as a new tuple."
msgstr ""

#: ../Doc/c-api/tuple.rst:76
msgid ""
"Insert a reference to object *o* at position *pos* of the tuple pointed "
"to by *p*. Return ``0`` on success."
msgstr ""

#: ../Doc/c-api/tuple.rst:81 ../Doc/c-api/tuple.rst:91
#: ../Doc/c-api/tuple.rst:209 ../Doc/c-api/tuple.rst:218
msgid "This function \"steals\" a reference to *o*."
msgstr ""

#: ../Doc/c-api/tuple.rst:86
msgid ""
"Like :c:func:`PyTuple_SetItem`, but does no error checking, and should "
"*only* be used to fill in brand new tuples."
msgstr ""

#: ../Doc/c-api/tuple.rst:96
msgid ""
"Can be used to resize a tuple.  *newsize* will be the new length of the "
"tuple. Because tuples are *supposed* to be immutable, this should only be"
" used if there is only one reference to the object.  Do *not* use this if"
" the tuple may already be known to some other part of the code.  The "
"tuple will always grow or shrink at the end.  Think of this as destroying"
" the old tuple and creating a new one, only more efficiently.  Returns "
"``0`` on success. Client code should never assume that the resulting "
"value of ``*p`` will be the same as before calling this function. If the "
"object referenced by ``*p`` is replaced, the original ``*p`` is "
"destroyed.  On failure, returns ``-1`` and sets ``*p`` to *NULL*, and "
"raises :exc:`MemoryError` or :exc:`SystemError`."
msgstr ""

#: ../Doc/c-api/tuple.rst:110
msgid "Clear the free list. Return the total number of freed items."
msgstr ""

#: ../Doc/c-api/tuple.rst:114
msgid "Struct Sequence Objects"
msgstr ""

#: ../Doc/c-api/tuple.rst:116
msgid ""
"Struct sequence objects are the C equivalent of "
":func:`~collections.namedtuple` objects, i.e. a sequence whose items can "
"also be accessed through attributes. To create a struct sequence, you "
"first have to create a specific struct sequence type."
msgstr ""

#: ../Doc/c-api/tuple.rst:123
msgid ""
"Create a new struct sequence type from the data in *desc*, described "
"below. Instances of the resulting type can be created with "
":c:func:`PyStructSequence_New`."
msgstr ""

#: ../Doc/c-api/tuple.rst:129
msgid "Initializes a struct sequence type *type* from *desc* in place."
msgstr ""

#: ../Doc/c-api/tuple.rst:134
msgid ""
"The same as ``PyStructSequence_InitType``, but returns ``0`` on success "
"and ``-1`` on failure."
msgstr ""

#: ../Doc/c-api/tuple.rst:142
msgid "Contains the meta information of a struct sequence type to create."
msgstr ""

#: ../Doc/c-api/tuple.rst:145 ../Doc/c-api/tuple.rst:168
msgid "Field"
msgstr ""

#: ../Doc/c-api/tuple.rst:145 ../Doc/c-api/tuple.rst:168
msgid "C Type"
msgstr ""

#: ../Doc/c-api/tuple.rst:145 ../Doc/c-api/tuple.rst:168
msgid "Meaning"
msgstr ""

#: ../Doc/c-api/tuple.rst:147 ../Doc/c-api/tuple.rst:170
msgid "``name``"
msgstr ""

#: ../Doc/c-api/tuple.rst:147 ../Doc/c-api/tuple.rst:149
#: ../Doc/c-api/tuple.rst:170 ../Doc/c-api/tuple.rst:175
msgid "``const char *``"
msgstr ""

#: ../Doc/c-api/tuple.rst:147
msgid "name of the struct sequence type"
msgstr ""

#: ../Doc/c-api/tuple.rst:149 ../Doc/c-api/tuple.rst:175
msgid "``doc``"
msgstr ""

#: ../Doc/c-api/tuple.rst:149
msgid "pointer to docstring for the type or NULL to omit"
msgstr ""

#: ../Doc/c-api/tuple.rst:152
msgid "``fields``"
msgstr ""

#: ../Doc/c-api/tuple.rst:152
msgid "``PyStructSequence_Field *``"
msgstr ""

#: ../Doc/c-api/tuple.rst:152
msgid "pointer to *NULL*-terminated array with field names of the new type"
msgstr ""

#: ../Doc/c-api/tuple.rst:155
msgid "``n_in_sequence``"
msgstr ""

#: ../Doc/c-api/tuple.rst:155
msgid "``int``"
msgstr ""

#: ../Doc/c-api/tuple.rst:155
msgid "number of fields visible to the Python side (if used as tuple)"
msgstr ""

#: ../Doc/c-api/tuple.rst:162
msgid ""
"Describes a field of a struct sequence. As a struct sequence is modeled "
"as a tuple, all fields are typed as :c:type:`PyObject\\*`.  The index in "
"the :attr:`fields` array of the :c:type:`PyStructSequence_Desc` "
"determines which field of the struct sequence is described."
msgstr ""

#: ../Doc/c-api/tuple.rst:170
msgid ""
"name for the field or *NULL* to end the list of named fields, set to "
"PyStructSequence_UnnamedField to leave unnamed"
msgstr ""

#: ../Doc/c-api/tuple.rst:175
msgid "field docstring or *NULL* to omit"
msgstr ""

#: ../Doc/c-api/tuple.rst:181
msgid "Special value for a field name to leave it unnamed."
msgstr ""

#: ../Doc/c-api/tuple.rst:186
msgid ""
"Creates an instance of *type*, which must have been created with "
":c:func:`PyStructSequence_NewType`."
msgstr ""

#: ../Doc/c-api/tuple.rst:192
msgid ""
"Return the object at position *pos* in the struct sequence pointed to by "
"*p*. No bounds checking is performed."
msgstr ""

#: ../Doc/c-api/tuple.rst:198
msgid "Macro equivalent of :c:func:`PyStructSequence_GetItem`."
msgstr ""

#: ../Doc/c-api/tuple.rst:203
msgid ""
"Sets the field at index *pos* of the struct sequence *p* to value *o*.  "
"Like :c:func:`PyTuple_SET_ITEM`, this should only be used to fill in "
"brand new instances."
msgstr ""

#: ../Doc/c-api/tuple.rst:214
msgid "Macro equivalent of :c:func:`PyStructSequence_SetItem`."
msgstr ""

#~ msgid "``char *``"
#~ msgstr ""

