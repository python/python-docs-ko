# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-30 09:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/c-api/datetime.rst:6
msgid "DateTime Objects"
msgstr ""

#: ../Doc/c-api/datetime.rst:8
msgid ""
"Various date and time objects are supplied by the :mod:`datetime` module."
" Before using any of these functions, the header file :file:`datetime.h` "
"must be included in your source (note that this is not included by "
":file:`Python.h`), and the macro :c:macro:`PyDateTime_IMPORT` must be "
"invoked, usually as part of the module initialisation function.  The "
"macro puts a pointer to a C structure into a static variable, "
":c:data:`PyDateTimeAPI`, that is used by the following macros."
msgstr ""

#: ../Doc/c-api/datetime.rst:16
msgid "Macro for access to the UTC singleton:"
msgstr ""

#: ../Doc/c-api/datetime.rst:20
msgid ""
"Returns the time zone singleton representing UTC, the same object as "
":attr:`datetime.timezone.utc`."
msgstr ""

#: ../Doc/c-api/datetime.rst:26
msgid "Type-check macros:"
msgstr ""

#: ../Doc/c-api/datetime.rst:30
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType` or a subtype"
" of :c:data:`PyDateTime_DateType`.  *ob* must not be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:36
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType`. *ob* must "
"not be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:42
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType` or a "
"subtype of :c:data:`PyDateTime_DateTimeType`.  *ob* must not be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:48
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType`. *ob* "
"must not be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:54
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType` or a subtype"
" of :c:data:`PyDateTime_TimeType`.  *ob* must not be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:60
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType`. *ob* must "
"not be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:66
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType` or a "
"subtype of :c:data:`PyDateTime_DeltaType`.  *ob* must not be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:72
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType`. *ob* must "
"not be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:78
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType` or a "
"subtype of :c:data:`PyDateTime_TZInfoType`.  *ob* must not be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:84
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType`. *ob* must"
" not be *NULL*."
msgstr ""

#: ../Doc/c-api/datetime.rst:88
msgid "Macros to create objects:"
msgstr ""

#: ../Doc/c-api/datetime.rst:92
msgid ""
"Return a :class:`datetime.date` object with the specified year, month and"
" day."
msgstr ""

#: ../Doc/c-api/datetime.rst:97
msgid ""
"Return a :class:`datetime.datetime` object with the specified year, "
"month, day, hour, minute, second and microsecond."
msgstr ""

#: ../Doc/c-api/datetime.rst:103
msgid ""
"Return a :class:`datetime.time` object with the specified hour, minute, "
"second and microsecond."
msgstr ""

#: ../Doc/c-api/datetime.rst:109
msgid ""
"Return a :class:`datetime.timedelta` object representing the given number"
" of days, seconds and microseconds.  Normalization is performed so that "
"the resulting number of microseconds and seconds lie in the ranges "
"documented for :class:`datetime.timedelta` objects."
msgstr ""

#: ../Doc/c-api/datetime.rst:116
msgid ""
"Return a :class:`datetime.timezone` object with an unnamed fixed offset "
"represented by the *offset* argument."
msgstr ""

#: ../Doc/c-api/datetime.rst:123
msgid ""
"Return a :class:`datetime.timezone` object with a fixed offset "
"represented by the *offset* argument and with tzname *name*."
msgstr ""

#: ../Doc/c-api/datetime.rst:129
msgid ""
"Macros to extract fields from date objects.  The argument must be an "
"instance of :c:data:`PyDateTime_Date`, including subclasses (such as "
":c:data:`PyDateTime_DateTime`).  The argument must not be *NULL*, and the"
" type is not checked:"
msgstr ""

#: ../Doc/c-api/datetime.rst:136
msgid "Return the year, as a positive int."
msgstr ""

#: ../Doc/c-api/datetime.rst:141
msgid "Return the month, as an int from 1 through 12."
msgstr ""

#: ../Doc/c-api/datetime.rst:146
msgid "Return the day, as an int from 1 through 31."
msgstr ""

#: ../Doc/c-api/datetime.rst:149
msgid ""
"Macros to extract fields from datetime objects.  The argument must be an "
"instance of :c:data:`PyDateTime_DateTime`, including subclasses. The "
"argument must not be *NULL*, and the type is not checked:"
msgstr ""

#: ../Doc/c-api/datetime.rst:155 ../Doc/c-api/datetime.rst:179
msgid "Return the hour, as an int from 0 through 23."
msgstr ""

#: ../Doc/c-api/datetime.rst:160 ../Doc/c-api/datetime.rst:184
msgid "Return the minute, as an int from 0 through 59."
msgstr ""

#: ../Doc/c-api/datetime.rst:165 ../Doc/c-api/datetime.rst:189
msgid "Return the second, as an int from 0 through 59."
msgstr ""

#: ../Doc/c-api/datetime.rst:170 ../Doc/c-api/datetime.rst:194
msgid "Return the microsecond, as an int from 0 through 999999."
msgstr ""

#: ../Doc/c-api/datetime.rst:173
msgid ""
"Macros to extract fields from time objects.  The argument must be an "
"instance of :c:data:`PyDateTime_Time`, including subclasses. The argument"
" must not be *NULL*, and the type is not checked:"
msgstr ""

#: ../Doc/c-api/datetime.rst:197
msgid ""
"Macros to extract fields from time delta objects.  The argument must be "
"an instance of :c:data:`PyDateTime_Delta`, including subclasses. The "
"argument must not be *NULL*, and the type is not checked:"
msgstr ""

#: ../Doc/c-api/datetime.rst:203
msgid "Return the number of days, as an int from -999999999 to 999999999."
msgstr ""

#: ../Doc/c-api/datetime.rst:210
msgid "Return the number of seconds, as an int from 0 through 86399."
msgstr ""

#: ../Doc/c-api/datetime.rst:217
msgid "Return the number of microseconds, as an int from 0 through 999999."
msgstr ""

#: ../Doc/c-api/datetime.rst:222
msgid "Macros for the convenience of modules implementing the DB API:"
msgstr ""

#: ../Doc/c-api/datetime.rst:226
msgid ""
"Create and return a new :class:`datetime.datetime` object given an "
"argument tuple suitable for passing to "
":meth:`datetime.datetime.fromtimestamp()`."
msgstr ""

#: ../Doc/c-api/datetime.rst:232
msgid ""
"Create and return a new :class:`datetime.date` object given an argument "
"tuple suitable for passing to :meth:`datetime.date.fromtimestamp()`."
msgstr ""

#~ msgid ""
#~ "Return a ``datetime.date`` object with "
#~ "the specified year, month and day."
#~ msgstr ""

#~ msgid ""
#~ "Return a ``datetime.datetime`` object with "
#~ "the specified year, month, day, hour,"
#~ " minute, second and microsecond."
#~ msgstr ""

#~ msgid ""
#~ "Return a ``datetime.time`` object with "
#~ "the specified hour, minute, second and"
#~ " microsecond."
#~ msgstr ""

#~ msgid ""
#~ "Return a ``datetime.timedelta`` object "
#~ "representing the given number of days,"
#~ " seconds and microseconds.  Normalization "
#~ "is performed so that the resulting "
#~ "number of microseconds and seconds lie"
#~ " in the ranges documented for "
#~ "``datetime.timedelta`` objects."
#~ msgstr ""

#~ msgid ""
#~ "Create and return a new "
#~ "``datetime.datetime`` object given an argument"
#~ " tuple suitable for passing to "
#~ "``datetime.datetime.fromtimestamp()``."
#~ msgstr ""

#~ msgid ""
#~ "Create and return a new "
#~ "``datetime.date`` object given an argument "
#~ "tuple suitable for passing to "
#~ "``datetime.date.fromtimestamp()``."
#~ msgstr ""

