# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-26 18:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/c-api/file.rst:6
msgid "File Objects"
msgstr ""

#: ../Doc/c-api/file.rst:10
msgid ""
"These APIs are a minimal emulation of the Python 2 C API for built-in "
"file objects, which used to rely on the buffered I/O (:c:type:`FILE\\*`) "
"support from the C standard library.  In Python 3, files and streams use "
"the new :mod:`io` module, which defines several layers over the low-level"
" unbuffered I/O of the operating system.  The functions described below "
"are convenience C wrappers over these new APIs, and meant mostly for "
"internal error reporting in the interpreter; third-party code is advised "
"to access the :mod:`io` APIs instead."
msgstr ""

#: ../Doc/c-api/file.rst:22
msgid ""
"Create a Python file object from the file descriptor of an already opened"
" file *fd*.  The arguments *name*, *encoding*, *errors* and *newline* can"
" be *NULL* to use the defaults; *buffering* can be *-1* to use the "
"default. *name* is ignored and kept for backward compatibility. Return "
"*NULL* on failure. For a more comprehensive description of the arguments,"
" please refer to the :func:`io.open` function documentation."
msgstr ""

#: ../Doc/c-api/file.rst:31
msgid ""
"Since Python streams have their own buffering layer, mixing them with OS-"
"level file descriptors can produce various issues (such as unexpected "
"ordering of data)."
msgstr ""

#: ../Doc/c-api/file.rst:35
msgid "Ignore *name* attribute."
msgstr ""

#: ../Doc/c-api/file.rst:41
msgid ""
"Return the file descriptor associated with *p* as an :c:type:`int`.  If "
"the object is an integer, its value is returned.  If not, the object's "
":meth:`~io.IOBase.fileno` method is called if it exists; the method must "
"return an integer, which is returned as the file descriptor value.  Sets "
"an exception and returns ``-1`` on failure."
msgstr ""

#: ../Doc/c-api/file.rst:52
msgid ""
"Equivalent to ``p.readline([n])``, this function reads one line from the "
"object *p*.  *p* may be a file object or any object with a "
":meth:`~io.IOBase.readline` method.  If *n* is ``0``, exactly one line is"
" read, regardless of the length of the line.  If *n* is greater than "
"``0``, no more than *n* bytes will be read from the file; a partial line "
"can be returned.  In both cases, an empty string is returned if the end "
"of the file is reached immediately.  If *n* is less than ``0``, however, "
"one line is read regardless of length, but :exc:`EOFError` is raised if "
"the end of the file is reached immediately."
msgstr ""

#: ../Doc/c-api/file.rst:67
msgid ""
"Write object *obj* to file object *p*.  The only supported flag for "
"*flags* is :const:`Py_PRINT_RAW`; if given, the :func:`str` of the object"
" is written instead of the :func:`repr`.  Return ``0`` on success or "
"``-1`` on failure; the appropriate exception will be set."
msgstr ""

#: ../Doc/c-api/file.rst:75
msgid ""
"Write string *s* to file object *p*.  Return ``0`` on success or ``-1`` "
"on failure; the appropriate exception will be set."
msgstr ""

