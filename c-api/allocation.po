# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-11-26 18:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr ""

#: ../Doc/c-api/allocation.rst:17
msgid ""
"Initialize a newly-allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  If *type* indicates that the"
" object participates in the cyclic garbage detector, it is added to the "
"detector's set of observed objects. Other fields of the object are not "
"affected."
msgstr ""

#: ../Doc/c-api/allocation.rst:26
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes "
"the length information for a variable-size object."
msgstr ""

#: ../Doc/c-api/allocation.rst:32
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object "
"header are not initialized; the object's reference count will be one.  "
"The size of the memory allocation is determined from the "
":c:member:`~PyTypeObject.tp_basicsize` field of the type object."
msgstr ""

#: ../Doc/c-api/allocation.rst:41
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object "
"header are not initialized.  The allocated memory allows for the *TYPE* "
"structure plus *size* fields of the size given by the "
":c:member:`~PyTypeObject.tp_itemsize` field of *type*.  This is useful "
"for implementing objects like tuples, which are able to determine their "
"size at construction time.  Embedding the array of fields into the same "
"allocation decreases the number of allocations, improving the memory "
"management efficiency."
msgstr ""

#: ../Doc/c-api/allocation.rst:53
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_New` or "
":c:func:`PyObject_NewVar`.  This is normally called from the "
":c:member:`~PyTypeObject.tp_dealloc` handler specified in the object's "
"type.  The fields of the object should not be accessed after this call as"
" the memory is no longer a valid Python object."
msgstr ""

#: ../Doc/c-api/allocation.rst:62
msgid ""
"Object which is visible in Python as ``None``.  This should only be "
"accessed using the :c:macro:`Py_None` macro, which evaluates to a pointer"
" to this object."
msgstr ""

#: ../Doc/c-api/allocation.rst:69
msgid ":c:func:`PyModule_Create`"
msgstr ""

#: ../Doc/c-api/allocation.rst:70
msgid "To allocate and create extension modules."
msgstr ""

