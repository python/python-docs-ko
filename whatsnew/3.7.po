# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-08 11:36+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/whatsnew/3.7.rst:3
msgid "What's New In Python 3.7"
msgstr "파이썬 3.7의 새로운 기능"

#: ../Doc/whatsnew/3.7.rst
msgid "Editor"
msgstr "편집자"

#: ../Doc/whatsnew/3.7.rst:5
msgid "Elvis Pranskevichus <elvis@magic.io>"
msgstr "Elvis Pranskevichus <elvis@magic.io>"

#: ../Doc/whatsnew/3.7.rst:47
msgid ""
"This article explains the new features in Python 3.7, compared to 3.6. "
"Python 3.7 was released on June 27, 2018. For full details, see the "
":ref:`changelog <changelog>`."
msgstr ""
"이 기사에서는 파이썬 3.6과 비교하여 3.7의 새로운 기능에 관해 설명합니다. 파이썬 3.7은 2018년 6월 27일에 배포되었습니다."
" 자세한 내용은 :ref:`changelog <changelog>` 를 참조하세요."

#: ../Doc/whatsnew/3.7.rst:53
msgid "Summary -- Release Highlights"
msgstr "요약 -- 배포 주요 사항"

#: ../Doc/whatsnew/3.7.rst:58
msgid "New syntax features:"
msgstr "새로운 문법 기능:"

#: ../Doc/whatsnew/3.7.rst:60
msgid ""
":ref:`PEP 563 <whatsnew37-pep563>`, postponed evaluation of type "
"annotations."
msgstr ":ref:`PEP 563 <whatsnew37-pep563>`, 형 어노테이션의 지연된 평가."

#: ../Doc/whatsnew/3.7.rst:62
msgid "Backwards incompatible syntax changes:"
msgstr "이전 버전과 호환되지 않는 문법 변경:"

#: ../Doc/whatsnew/3.7.rst:64
msgid ":keyword:`async` and :keyword:`await` are now reserved keywords."
msgstr ":keyword:`async`\\와 :keyword:`await` 는 이제 예약 키워드입니다."

#: ../Doc/whatsnew/3.7.rst:66
msgid "New library modules:"
msgstr "새 라이브러리 모듈:"

#: ../Doc/whatsnew/3.7.rst:68
msgid ""
":mod:`contextvars`: :ref:`PEP 567 -- Context Variables "
"<whatsnew37-pep567>`"
msgstr ":mod:`contextvars`: :ref:`PEP 567 -- 컨텍스트 변수 <whatsnew37-pep567>`"

#: ../Doc/whatsnew/3.7.rst:69
msgid ":mod:`dataclasses`: :ref:`PEP 557 -- Data Classes <whatsnew37-pep557>`"
msgstr ":mod:`dataclasses`: :ref:`PEP 557 -- 데이터 클래스 <whatsnew37-pep557>`"

#: ../Doc/whatsnew/3.7.rst:70
msgid ":ref:`whatsnew37_importlib_resources`"
msgstr ":ref:`whatsnew37_importlib_resources`"

#: ../Doc/whatsnew/3.7.rst:72
msgid "New built-in features:"
msgstr "새로운 내장 기능:"

#: ../Doc/whatsnew/3.7.rst:74
msgid ":ref:`PEP 553 <whatsnew37-pep553>`, the new :func:`breakpoint` function."
msgstr ":ref:`PEP 553 <whatsnew37-pep553>`, 새로운 :func:`breakpoint` 함수."

#: ../Doc/whatsnew/3.7.rst:76
msgid "Python data model improvements:"
msgstr "파이썬 데이터 모델 개선:"

#: ../Doc/whatsnew/3.7.rst:78
msgid ""
":ref:`PEP 562 <whatsnew37-pep562>`, customization of access to module "
"attributes."
msgstr ":ref:`PEP 562 <whatsnew37-pep562>`, 모듈 어트리뷰트에 대한 액세스의 사용자 정의."

#: ../Doc/whatsnew/3.7.rst:81
msgid ""
":ref:`PEP 560 <whatsnew37-pep560>`, core support for typing module and "
"generic types."
msgstr ":ref:`PEP 560 <whatsnew37-pep560>`, typing 모듈과 제네릭 형을 위한 코어 지원."

#: ../Doc/whatsnew/3.7.rst:84
msgid ""
"the insertion-order preservation nature of :ref:`dict <typesmapping>` "
"objects `has been declared`_ to be an official part of the Python "
"language spec."
msgstr ""
":ref:`dict <typesmapping>` 객체의 삽입 순서 보존 특성을 파이썬 언어 규격의 공식적인 일부로 `선언했습니다 "
"<has been declared_>`_."

#: ../Doc/whatsnew/3.7.rst:90
msgid "Significant improvements in the standard library:"
msgstr "표준 라이브러리의 현저한 개선:"

#: ../Doc/whatsnew/3.7.rst:92
msgid ""
"The :mod:`asyncio` module has received new features, significant "
":ref:`usability and performance improvements <whatsnew37_asyncio>`."
msgstr ""
":mod:`asyncio` 모듈에 새 기능과 현저한 :ref:`사용성 및 성능 개선 <whatsnew37_asyncio>` 이 "
"추가되었습니다."

#: ../Doc/whatsnew/3.7.rst:95
msgid ""
"The :mod:`time` module gained support for :ref:`functions with nanosecond"
" resolution <whatsnew37-pep564>`."
msgstr ":mod:`time` 모듈은 :ref:`나노초 해상도의 함수 <whatsnew37-pep564>` 지원을 얻었습니다."

#: ../Doc/whatsnew/3.7.rst:98
msgid "CPython implementation improvements:"
msgstr "CPython 구현 개선:"

#: ../Doc/whatsnew/3.7.rst:100
msgid "Avoiding the use of ASCII as a default text encoding:"
msgstr "ASCII를 기본 텍스트 인코딩으로 사용하지 않기:"

#: ../Doc/whatsnew/3.7.rst:102
msgid ":ref:`PEP 538 <whatsnew37-pep538>`, legacy C locale coercion"
msgstr ":ref:`PEP 538 <whatsnew37-pep538>`, 레거시 C 로케일 강제 변경"

#: ../Doc/whatsnew/3.7.rst:103
msgid ":ref:`PEP 540 <whatsnew37-pep540>`, forced UTF-8 runtime mode"
msgstr ":ref:`PEP 540 <whatsnew37-pep540>`, 강제 UTF-8 실행시간 모드"

#: ../Doc/whatsnew/3.7.rst:104
msgid ":ref:`PEP 552 <whatsnew37-pep552>`, deterministic .pycs"
msgstr ":ref:`PEP 552 <whatsnew37-pep552>`, 결정적 .pycs"

#: ../Doc/whatsnew/3.7.rst:105
msgid ":ref:`the new development runtime mode <whatsnew37-devmode>`"
msgstr ":ref:`새로운 개발 실행시간 모드 <whatsnew37-devmode>`"

#: ../Doc/whatsnew/3.7.rst:106
msgid ""
":ref:`PEP 565 <whatsnew37-pep565>`, improved :exc:`DeprecationWarning` "
"handling"
msgstr ":ref:`PEP 565 <whatsnew37-pep565>`, 개선된 :exc:`DeprecationWarning` 처리"

#: ../Doc/whatsnew/3.7.rst:109
msgid "C API improvements:"
msgstr "C API 개선 사항:"

#: ../Doc/whatsnew/3.7.rst:111
msgid ":ref:`PEP 539 <whatsnew37-pep539>`, new C API for thread-local storage"
msgstr ":ref:`PEP 539 <whatsnew37-pep539>`, 스레드-로컬 저장소를 위한 새로운 C API"

#: ../Doc/whatsnew/3.7.rst:113
msgid "Documentation improvements:"
msgstr "설명서 개선 사항:"

#: ../Doc/whatsnew/3.7.rst:115
msgid ":ref:`PEP 545 <whatsnew37-pep545>`, Python documentation translations"
msgstr ":ref:`PEP 545 <whatsnew37-pep545>`, 파이썬 설명서 번역"

#: ../Doc/whatsnew/3.7.rst:116
msgid ""
"New documentation translations: `Japanese "
"<https://docs.python.org/ja/>`_, `French <https://docs.python.org/fr/>`_,"
" and `Korean <https://docs.python.org/ko/>`_."
msgstr ""
"새로운 설명서 번역: `일본어 <https://docs.python.org/ja/>`_, `프랑스어 "
"<https://docs.python.org/fr/>`_, `한국어 <https://docs.python.org/ko/>`_."

#: ../Doc/whatsnew/3.7.rst:120
msgid ""
"This release features notable performance improvements in many areas. The"
" :ref:`whatsnew37-perf` section lists them in detail."
msgstr ""
"이 배포는 많은 영역에서 주목할만한 성능 향상을 제공합니다. :ref:`whatsnew37-perf` 섹션에 자세히 나와 있습니다."

#: ../Doc/whatsnew/3.7.rst:123
msgid ""
"For a list of changes that may affect compatibility with previous Python "
"releases please refer to the :ref:`porting-to-python-37` section."
msgstr ""
"이전 파이썬 배포와의 호환성에 영향을 줄 수 있는 변경 사항 목록은 :ref:`porting-to-python-37` 섹션을 "
"참조하십시오."

#: ../Doc/whatsnew/3.7.rst:128
msgid "New Features"
msgstr "새로운 기능"

#: ../Doc/whatsnew/3.7.rst:133
msgid "PEP 563: Postponed Evaluation of Annotations"
msgstr "PEP 563 : 어노테이션의 지연된 평가"

#: ../Doc/whatsnew/3.7.rst:135
msgid ""
"The advent of type hints in Python uncovered two glaring usability issues"
" with the functionality of annotations added in :pep:`3107` and refined "
"further in :pep:`526`:"
msgstr ""
"파이썬에서 형 힌트의 출현은 :pep:`3107`\\에서 추가되고 :pep:`526`\\에서 더욱 다듬어진 어노테이션의 두 가지 "
"사용성 문제를 드러냈습니다:"

#: ../Doc/whatsnew/3.7.rst:139
msgid ""
"annotations could only use names which were already available in the "
"current scope, in other words they didn't support forward references of "
"any kind; and"
msgstr ""
"어노테이션은 현재 스코프에서 이미 사용 가능한 이름 만 사용할 수 있습니다. 즉, 어떤 종류의 전방 참조도 지원하지 않았습니다; "
"그리고"

#: ../Doc/whatsnew/3.7.rst:143
msgid ""
"annotating source code had adverse effects on startup time of Python "
"programs."
msgstr "소스 코드에 어노테이션을 붙이는 것은 파이썬 프로그램의 시작 시간에 악영향을 미쳤습니다."

#: ../Doc/whatsnew/3.7.rst:146
msgid ""
"Both of these issues are fixed by postponing the evaluation of "
"annotations.  Instead of compiling code which executes expressions in "
"annotations at their definition time, the compiler stores the annotation "
"in a string form equivalent to the AST of the expression in question. If "
"needed, annotations can be resolved at runtime using "
":func:`typing.get_type_hints`.  In the common case where this is not "
"required, the annotations are cheaper to store (since short strings are "
"interned by the interpreter) and make startup time faster."
msgstr ""
"이 두 가지 문제는 어노테이션 평가를 지연시키는 것으로 해결됩니다. 정의 시간에 어노테이션의 표현식을 실행하는 코드를 컴파일하는 "
"대신, 컴파일러는 해당 표현식의 AST와 동등한 문자열 형식으로 어노테이션을 저장합니다. 필요하다면, 실행시간에 "
":func:`typing.get_type_hints` 를 사용하여 어노테이션을 해석 할 수 있습니다. 이것이 필수적이지 않은 "
"일반적인 경우에는, 어노테이션을 싸게 저장할 수 있고 (짧은 문자열은 인터프리터에 의해 한 번만 만들어지기 때문입니다), 시작 "
"시간을 더 빠르게 할 수 있습니다."

#: ../Doc/whatsnew/3.7.rst:155
msgid ""
"Usability-wise, annotations now support forward references, making the "
"following syntax valid::"
msgstr "사용성 측면에서, 이제 어노테이션이 전방 참조를 지원하므로 다음 문법이 유효합니다::"

#: ../Doc/whatsnew/3.7.rst:169
msgid ""
"Since this change breaks compatibility, the new behavior needs to be "
"enabled on a per-module basis in Python 3.7 using a :mod:`__future__` "
"import::"
msgstr ""
"이 변경으로 인해 호환성이 깨지기 때문에, 파이썬 3.7에서 새 동작은 :mod:`__future__` 임포트를 사용하여 모듈별로 "
"새로운 동작을 활성화해야 합니다::"

#: ../Doc/whatsnew/3.7.rst:174
msgid "It will become the default in Python 4.0."
msgstr "파이썬 4.0에서는 기본값이 됩니다."

#: ../Doc/whatsnew/3.7.rst:178
msgid ":pep:`563` -- Postponed evaluation of annotations"
msgstr ":pep:`563` -- 어노테이션의 지연된 평가"

#: ../Doc/whatsnew/3.7.rst:179
msgid "PEP written and implemented by Łukasz Langa."
msgstr "Łukasz Langa가 작성하고 구현한 PEP."

#: ../Doc/whatsnew/3.7.rst:185
msgid "PEP 538: Legacy C Locale Coercion"
msgstr "PEP 538: 레거시 C 로케일 강제 변경"

#: ../Doc/whatsnew/3.7.rst:187
msgid ""
"An ongoing challenge within the Python 3 series has been determining a "
"sensible default strategy for handling the \"7-bit ASCII\" text encoding "
"assumption currently implied by the use of the default C or POSIX locale "
"on non-Windows platforms."
msgstr ""
"파이썬 3시리즈에서 진행 중인 과제는, 윈도우 이외의 플랫폼에서 기본 C 또는 POSIX 로케일 사용으로 인해 묵시적으로 가정되는 "
"\"7-비트 ASCII\" 텍스트 인코딩을 처리하기 위한 적절한 기본 전략을 결정하는 것입니다."

#: ../Doc/whatsnew/3.7.rst:192
msgid ""
":pep:`538` updates the default interpreter command line interface to "
"automatically coerce that locale to an available UTF-8 based locale as "
"described in the documentation of the new :envvar:`PYTHONCOERCECLOCALE` "
"environment variable. Automatically setting ``LC_CTYPE`` this way means "
"that both the core interpreter and locale-aware C extensions (such as "
":mod:`readline`) will assume the use of UTF-8 as the default text "
"encoding, rather than ASCII."
msgstr ""
"새 :envvar:`PYTHONCOERCECLOCALE` 환경 변수의 설명서에 설명되어있듯이, :pep:`538` 은 기본 "
"인터프리터 명령행 인터페이스를 갱신하여, 사용 가능한 UTF-8 기반 로케일로 자동으로 강제 변경합니다. 이런 식으로 "
"``LC_CTYPE`` 을 자동 설정하는 것은, 핵심 인터프리터와 로케일을 인식하는 C 확장 (가령 :mod:`readline`) "
"모두 기본 텍스트 인코딩으로 ASCII 대신 UTF-8을 가정하게 된다는 뜻입니다."

#: ../Doc/whatsnew/3.7.rst:200
msgid ""
"The platform support definition in :pep:`11` has also been updated to "
"limit full text handling support to suitably configured non-ASCII based "
"locales."
msgstr ""
":pep:`11` 의 플랫폼 지원 정의 역시 전체 텍스트 처리 지원을 적절히 구성된 비 ASCII 기반 로케일로 제한하도록 "
"갱신되었습니다."

#: ../Doc/whatsnew/3.7.rst:203
msgid ""
"As part of this change, the default error handler for :data:`~sys.stdin` "
"and :data:`~sys.stdout` is now ``surrogateescape`` (rather than "
"``strict``) when using any of the defined coercion target locales "
"(currently ``C.UTF-8``, ``C.utf8``, and ``UTF-8``).  The default error "
"handler for :data:`~sys.stderr` continues to be ``backslashreplace``, "
"regardless of locale."
msgstr ""
"이 변경의 일부로, 이제 정의된 강제 변경 대상 로케일(현재 ``C.UTF-8``, ``C.utf8``, ``UTF-8``)을 "
"사용할 때, :data:`~sys.stdin` 과 :data:`~sys.stdout` 의 기본 에러 처리기는 (``strict`` "
"대신) ``surrogateescape`` 입니다. :data:`~sys.stderr` 의 기본 에러 처리기는 로케일에 관계없이 "
"계속 ``backslashreplace`` 입니다."

#: ../Doc/whatsnew/3.7.rst:209
msgid ""
"Locale coercion is silent by default, but to assist in debugging "
"potentially locale related integration problems, explicit warnings "
"(emitted directly on :data:`~sys.stderr`) can be requested by setting "
"``PYTHONCOERCECLOCALE=warn``. This setting will also cause the Python "
"runtime to emit a warning if the legacy C locale remains active when the "
"core interpreter is initialized."
msgstr ""
"로케일 강제 변경은 기본적으로 조용히 일어나지만, 로케일 관련 통합 문제를 디버깅하는 데 도움을 주기 위해 "
"``PYTHONCOERCECLOCALE=warn`` 를 설정해서 (:data:`~sys.stderr` 로 직접 출력되는) 명시적 "
"경고를 요청할 수 있습니다. 또한, 이 설정은 핵심 인터프리터가 초기화될 때 레거시 C 로케일이 활성 상태로 남아 있으면 파이썬 "
"런타임이 경고를 하도록 만듭니다."

#: ../Doc/whatsnew/3.7.rst:215
msgid ""
"While :pep:`538`'s locale coercion has the benefit of also affecting "
"extension modules (such as GNU ``readline``), as well as child processes "
"(including those running non-Python applications and older versions of "
"Python), it has the downside of requiring that a suitable target locale "
"be present on the running system. To better handle the case where no "
"suitable target locale is available (as occurs on RHEL/CentOS 7, for "
"example), Python 3.7 also implements :ref:`whatsnew37-pep540`."
msgstr ""
":pep:`538` 의 로케일 강제 변환이 (비 파이썬 응용 프로그램과 이전 버전의 파이썬을 실행하는 경우를 포함하는) 자식 프로세스뿐만"
" 아니라 (GNU ``readline`` 같은) 확장 모듈에도 영향을 주는 장점이 있지만, 실행 중인 시스템에 적절한 대상 로케일이 "
"있어야 한다는 단점이 있습니다. 적절한 대상 로케일을 사용할 수 없는 경우(예를 들어, RHEL/CentOS 7에서 발생하듯이)를 더 잘"
" 처리하기 위해, 파이썬 3.7은 :ref:`whatsnew37-pep540` 또한 구현합니다."

#: ../Doc/whatsnew/3.7.rst:225
msgid ":pep:`538` -- Coercing the legacy C locale to a UTF-8 based locale"
msgstr ":pep:`538` -- 레거시 C 로케일을 UTF-8 기반 로케일로 강제 변경"

#: ../Doc/whatsnew/3.7.rst:226
msgid "PEP written and implemented by Nick Coghlan."
msgstr "Nick Coghlan 이 작성하고 구현한 PEP."

#: ../Doc/whatsnew/3.7.rst:232
msgid "PEP 540: Forced UTF-8 Runtime Mode"
msgstr "PEP 540: 강제 UTF-8 실행시간 모드"

#: ../Doc/whatsnew/3.7.rst:234
msgid ""
"The new :option:`-X` ``utf8`` command line option and "
":envvar:`PYTHONUTF8` environment variable can be used to enable the "
"CPython *UTF-8 mode*."
msgstr ""
"새로운 :option:`-X` ``utf8`` 명령행 옵션과 :envvar:`PYTHONUTF8` 환경 변수를 사용하여 "
"CPython *UTF-8 모드* 를 활성화할 수 있습니다."

#: ../Doc/whatsnew/3.7.rst:237
msgid ""
"When in UTF-8 mode, CPython ignores the locale settings, and uses the "
"UTF-8 encoding by default.  The error handlers for :data:`sys.stdin` and "
":data:`sys.stdout` streams are set to ``surrogateescape``."
msgstr ""
"UTF-8 모드에서, CPython은 로케일 설정을 무시하고 기본적으로 UTF-8 인코딩을 사용합니다. "
":data:`sys.stdin` 과 :data:`sys.stdout` 스트림의 에러 처리기는 ``surrogateescape`` 로"
" 설정됩니다."

#: ../Doc/whatsnew/3.7.rst:241
msgid ""
"The forced UTF-8 mode can be used to change the text handling behavior in"
" an embedded Python interpreter without changing the locale settings of "
"an embedding application."
msgstr ""
"강제 UTF-8 모드는 임베디드 응용 프로그램의 로케일 설정을 변경하지 않고 임베디드 파이썬 인터프리터의 텍스트 처리 동작을 "
"변경하는 데 사용할 수 있습니다."

#: ../Doc/whatsnew/3.7.rst:245
msgid ""
"While :pep:`540`'s UTF-8 mode has the benefit of working regardless of "
"which locales are available on the running system, it has the downside of"
" having no effect on extension modules (such as GNU ``readline``), child "
"processes running non-Python applications, and child processes running "
"older versions of Python. To reduce the risk of corrupting text data when"
" communicating with such components, Python 3.7 also implements "
":ref:`whatsnew37-pep540`)."
msgstr ""
":pep:`540` 의 UTF-8 모드는 실행 중인 시스템에서 사용할 수 있는 로케일에 관계없이 작동하는 이점이 있지만, (GNU "
"``readline`` 과 같은) 확장 모듈, 비 파이썬 응용 프로그램을 실행하는 자식 프로세스, 이전 버전의 파이썬을 실행하는 자식 "
"프로세스에 영향을 주지 못하는 단점이 있습니다. 이러한 구성 요소와 통신 할 때 텍스트 데이터가 손상될 위험을 줄이기 위해 파이썬 "
"3.7은 :ref:`whatsnew37-pep540` 또한 구현합니다."

#: ../Doc/whatsnew/3.7.rst:252
msgid ""
"The UTF-8 mode is enabled by default when the locale is ``C`` or "
"``POSIX``, and the :pep:`538` locale coercion feature fails to change it "
"to a UTF-8 based alternative (whether that failure is due to "
"``PYTHONCOERCECLOCALE=0`` being set, ``LC_ALL`` being set, or the lack of"
" a suitable target locale)."
msgstr ""
"UTF-8 모드는 로케일이 ``C`` 또는 ``POSIX`` 이고, :pep:`538` 로케일 강제 변환이 UTF-8 기반 대안으로의 "
"변경에 실패할 때 (그 실패가 ``PYTHONCOERCECLOCALE=0`` 설정 때문이든, ``LC_ALL`` 설정 때문이든, 적절한 "
"대상 로케일이 없기 때문이든 무관하게) 기본적으로 활성화됩니다."

#: ../Doc/whatsnew/3.7.rst:259
msgid ":pep:`540` -- Add a new UTF-8 mode"
msgstr ":pep:`540` -- 새로운 UTF-8 모드 추가"

#: ../Doc/whatsnew/3.7.rst:260 ../Doc/whatsnew/3.7.rst:362
msgid "PEP written and implemented by Victor Stinner"
msgstr "Victor Stinner가 작성하고 구현한 PEP"

#: ../Doc/whatsnew/3.7.rst:266
msgid "PEP 553: Built-in ``breakpoint()``"
msgstr "PEP 553: 내장 ``breakpoint()``"

#: ../Doc/whatsnew/3.7.rst:268
msgid ""
"Python 3.7 includes the new built-in :func:`breakpoint` function as an "
"easy and consistent way to enter the Python debugger."
msgstr ""
"파이썬 3.7에는 파이썬 디버거에 진입하는 쉽고 일관된 방식을 제공하는 새로운 내장 :func:`breakpoint` 함수가 "
"포함되어 있습니다."

#: ../Doc/whatsnew/3.7.rst:271
msgid ""
"Built-in ``breakpoint()`` calls :func:`sys.breakpointhook`.  By default, "
"the latter imports :mod:`pdb` and then calls ``pdb.set_trace()``, but by "
"binding ``sys.breakpointhook()`` to the function of your choosing, "
"``breakpoint()`` can enter any debugger. Additionally, the environment "
"variable :envvar:`PYTHONBREAKPOINT` can be set to the callable of your "
"debugger of choice.  Set ``PYTHONBREAKPOINT=0`` to completely disable "
"built-in ``breakpoint()``."
msgstr ""
"내장 ``breakpoint()`` 는 :func:`sys.breakpointhook` 을 호출합니다. 기본적으로, 후자는 "
":mod:`pdb`\\를 임포트 한 다음 ``pdb.set_trace()`` 를 호출합니다. 하지만, "
"``sys.breakpointhook()`` 을 여러분이 선택한 함수에 연결하면, ``breakpoint()`` 는 임의의 디버거에"
" 진입할 수 있습니다. 또한, 환경 변수 :envvar:`PYTHONBREAKPOINT` 를 여러분이 선택한 디버거의 콜러블로 "
"설정할 수 있습니다. 내장 `breakpoint()`` 를 완전히 비활성화하려면 ``PYTHONBREAKPOINT=0`` 를 "
"설정하십시오."

#: ../Doc/whatsnew/3.7.rst:281
msgid ":pep:`553` -- Built-in breakpoint()"
msgstr ":pep:`553` -- 내장 breakpoint()"

#: ../Doc/whatsnew/3.7.rst:282
msgid "PEP written and implemented by Barry Warsaw"
msgstr "Barry Warsaw가 작성하고 구현한 PEP"

#: ../Doc/whatsnew/3.7.rst:288
msgid "PEP 539: New C API for Thread-Local Storage"
msgstr "PEP 539: 스레드-로컬 저장소를 위한 새로운 C API"

#: ../Doc/whatsnew/3.7.rst:290
msgid ""
"While Python provides a C API for thread-local storage support; the "
"existing :ref:`Thread Local Storage (TLS) API <thread-local-storage-api>`"
" has used :c:type:`int` to represent TLS keys across all platforms.  This"
" has not generally been a problem for officially-support platforms, but "
"that is neither POSIX-compliant, nor portable in any practical sense."
msgstr ""
"파이썬은 스레드 로컬 저장소 지원을 위한 C API를 제공하지만; 기존 :ref:`스레드 로컬 저장소 (TLS) API "
"<thread-local-storage-api>` 는 모든 플랫폼에서 TLS 키로 :c:type:`int`\\를 사용합니다. 이것은"
" 공식적으로 지원되는 플랫폼에서는 일반적으로 문제가 되지 않지만, POSIX를 준수하지도 실용적인 의미에서 이식성이 있지도 "
"않습니다."

#: ../Doc/whatsnew/3.7.rst:296
msgid ""
":pep:`539` changes this by providing a new :ref:`Thread Specific Storage "
"(TSS) API <thread-specific-storage-api>` to CPython which supersedes use "
"of the existing TLS API within the CPython interpreter, while deprecating"
" the existing API.  The TSS API uses a new type :c:type:`Py_tss_t` "
"instead of :c:type:`int` to represent TSS keys--an opaque type the "
"definition of which may depend on the underlying TLS implementation.  "
"Therefore, this will allow to build CPython on platforms where the native"
" TLS key is defined in a way that cannot be safely cast to :c:type:`int`."
msgstr ""
":pep:`539` 는 CPython에 새로운 :ref:`스레드 특정 저장소 (TSS) API <thread-specific-"
"storage-api>` 를 제공해서 이를 변경하는데, CPython 인터프리터 내에서 기존 TLS API의 사용을 대체하는 동시에"
" 기존 API를 폐지합니다. TSS API는 TSS 키를 나타내는데 :c:type:`int` 대신 "
":c:type:`Py_tss_t`\\라는 새로운 형을 사용합니다. 이 형은 하부 TLS 구현에 따라 달라질 수 있는 불투명 한 "
"형입니다. 그래서 네이티브 TLS 키가 :c:type:`int`\\로 안전하게 캐스팅될 수 없는 방식으로 정의된 플랫폼에서 "
"CPython을 빌드 할 수 있게 합니다."

#: ../Doc/whatsnew/3.7.rst:305
msgid ""
"Note that on platforms where the native TLS key is defined in a way that "
"cannot be safely cast to :c:type:`int`, all functions of the existing TLS"
" API will be no-op and immediately return failure. This indicates clearly"
" that the old API is not supported on platforms where it cannot be used "
"reliably, and that no effort will be made to add such support."
msgstr ""
"네이티브 TLS 키가 :c:type:`int`\\로 안전하게 캐스팅될 수 없는 방식으로 정의된 플랫폼에서는, 기존 TLS API의 "
"모든 함수는 작동하지 않고 즉시 실패를 반환합니다. 이는 이전 API가 신뢰성 있게 사용될 수 없는 플랫폼에서 지원되지 않으며, "
"이러한 지원을 추가하기 위한 노력이 없을 것을 분명하게 나타냅니다."

#: ../Doc/whatsnew/3.7.rst:313
msgid ":pep:`539` -- A New C-API for Thread-Local Storage in CPython"
msgstr ":pep:`539` -- CPython의 스레드-로컬 저장소를 위한 새로운 C-API"

#: ../Doc/whatsnew/3.7.rst:314
msgid "PEP written by Erik M. Bray; implementation by Masayuki Yamamoto."
msgstr "Erik M. Bray가 작성하고 Masayuki Yamamoto가 구현한 PEP."

#: ../Doc/whatsnew/3.7.rst:320
msgid "PEP 562: Customization of Access to Module Attributes"
msgstr "PEP 562: 모듈 어트리뷰트에 대한 액세스 사용자 정의"

#: ../Doc/whatsnew/3.7.rst:322
msgid ""
"Python 3.7 allows defining :meth:`__getattr__` on modules and will call "
"it whenever a module attribute is otherwise not found.  Defining "
":meth:`__dir__` on modules is now also allowed."
msgstr ""
"파이썬 3.7은 모듈에, 발견되지 않는 어트리뷰트마다 호출되는 :meth:`__getattr__` 을 정의할 수 있도록 합니다. 이제 "
"모듈에 :meth:`__dir__` 도 정의할 수 있게 되었습니다."

#: ../Doc/whatsnew/3.7.rst:326
msgid ""
"A typical example of where this may be useful is module attribute "
"deprecation and lazy loading."
msgstr "이것이 유용한 전형적인 예는 모듈 어트리뷰트 폐지와 지연 로딩입니다."

#: ../Doc/whatsnew/3.7.rst:331
msgid ":pep:`562` -- Module ``__getattr__`` and ``__dir__``"
msgstr ":pep:`562` -- 모듈 ``__getattr__`` 과 ``__dir__``"

#: ../Doc/whatsnew/3.7.rst:332 ../Doc/whatsnew/3.7.rst:421
msgid "PEP written and implemented by Ivan Levkivskyi"
msgstr "Ivan Levkivskyi가 작성하고 구현한 PEP"

#: ../Doc/whatsnew/3.7.rst:338
msgid "PEP 564: New Time Functions With Nanosecond Resolution"
msgstr "PEP 564: 나노초 해상도의 새로운 시간 함수"

#: ../Doc/whatsnew/3.7.rst:340
msgid ""
"The resolution of clocks in modern systems can exceed the limited "
"precision of a floating point number returned by the :func:`time.time` "
"function and its variants.  To avoid loss of precision, :pep:`564` adds "
"six new \"nanosecond\" variants of the existing timer functions to the "
":mod:`time` module:"
msgstr ""
"현대 시스템의 시계 해상도는 :func:`time.time` 함수와 그 변형이 반환하는 부동 소수점 숫자의 제한된 정밀도를 초과 할 수 "
"있습니다. :pep:`564` 는 기존 타이머 함수의 새로운 \"나노 초\" 변형을 :mod:`time` 모듈에 추가합니다:"

#: ../Doc/whatsnew/3.7.rst:346 ../Doc/whatsnew/3.7.rst:1417
msgid ":func:`time.clock_gettime_ns`"
msgstr ":func:`time.clock_gettime_ns`"

#: ../Doc/whatsnew/3.7.rst:347 ../Doc/whatsnew/3.7.rst:1418
msgid ":func:`time.clock_settime_ns`"
msgstr ":func:`time.clock_settime_ns`"

#: ../Doc/whatsnew/3.7.rst:348 ../Doc/whatsnew/3.7.rst:1419
msgid ":func:`time.monotonic_ns`"
msgstr ":func:`time.monotonic_ns`"

#: ../Doc/whatsnew/3.7.rst:349 ../Doc/whatsnew/3.7.rst:1420
msgid ":func:`time.perf_counter_ns`"
msgstr ":func:`time.perf_counter_ns`"

#: ../Doc/whatsnew/3.7.rst:350 ../Doc/whatsnew/3.7.rst:1421
msgid ":func:`time.process_time_ns`"
msgstr ":func:`time.process_time_ns`"

#: ../Doc/whatsnew/3.7.rst:351 ../Doc/whatsnew/3.7.rst:1422
msgid ":func:`time.time_ns`"
msgstr ":func:`time.time_ns`"

#: ../Doc/whatsnew/3.7.rst:353
msgid "The new functions return the number of nanoseconds as an integer value."
msgstr "새로운 함수는 나노초의 수를 정숫값으로 반환합니다."

#: ../Doc/whatsnew/3.7.rst:355
msgid ""
"`Measurements <https://www.python.org/dev/peps/pep-0564/#annex-clocks-"
"resolution-in-python>`_ show that on Linux and Windows the resolution of "
":func:`time.time_ns` is approximately 3 times better than that of "
":func:`time.time`."
msgstr ""
"<https://www.python.org/dev/peps/pep-0564/#annex-clocks-resolution-in-"
"python>`_ 의 측정에 의하면 리눅스와 윈도우에서 :func:`time.time_ns` 의 해상도는 :func:`time.time`"
" 보다 약 3배 정밀합니다."

#: ../Doc/whatsnew/3.7.rst:361
msgid ":pep:`564` -- Add new time functions with nanosecond resolution"
msgstr ":pep:`564` -- 나노초 해상도의 새로운 시간 함수 추가"

#: ../Doc/whatsnew/3.7.rst:368
msgid "PEP 565: Show DeprecationWarning in ``__main__``"
msgstr "PEP 565: ``__main__`` 의 DeprecationWarning 표시"

#: ../Doc/whatsnew/3.7.rst:370
msgid ""
"The default handling of :exc:`DeprecationWarning` has been changed such "
"that these warnings are once more shown by default, but only when the "
"code triggering them is running directly in the :mod:`__main__` module.  "
"As a result, developers of single file scripts and those using Python "
"interactively should once again start seeing deprecation warnings for the"
" APIs they use, but deprecation warnings triggered by imported "
"application, library and framework modules will continue to be hidden by "
"default."
msgstr ""
":exc:`DeprecationWarning` 의 기본 처리 방식이 변경되어, 이러한 경고가 다시 한번 기본적으로 표시됩니다. "
"하지만, 이를 발생시킨 코드가 :mod:`__main__` 모듈에서 직접 실행될 때만 표시됩니다. 결과적으로, 단일 파일 스크립트 "
"개발자와 파이썬을 대화식으로 사용하는 개발자는 사용하는 API에 대한 폐지 경고를 다시 보게 되지만, 임포트되는 응용 프로그램, "
"라이브러리, 프레임웍 모듈에서 발생하는 폐지 경고는 계속 기본적으로 숨겨집니다."

#: ../Doc/whatsnew/3.7.rst:378
msgid ""
"As a result of this change, the standard library now allows developers to"
" choose between three different deprecation warning behaviours:"
msgstr "이 변경으로 인해, 이제 표준 라이브러리는 개발자가 세 가지 다른 폐지 경고 동작 중 하나를 선택할 수 있도록 합니다:"

#: ../Doc/whatsnew/3.7.rst:381
msgid ""
":exc:`FutureWarning`: always displayed by default, recommended for "
"warnings intended to be seen by application end users (e.g. for "
"deprecated application configuration settings)."
msgstr ""
":exc:`FutureWarning`: 기본적으로 항상 표시됩니다. 응용 프로그램 최종 사용자를 대상으로 하는 경고로 권장됩니다 "
"(예, 폐지된 응용 프로그램 구성 설정)."

#: ../Doc/whatsnew/3.7.rst:384
msgid ""
":exc:`DeprecationWarning`: displayed by default only in :mod:`__main__` "
"and when running tests, recommended for warnings intended to be seen by "
"other Python developers where a version upgrade may result in changed "
"behaviour or an error."
msgstr ""
":exc:`DeprecationWarning`: 기본적으로 :mod:`__main__` 과 테스트 실행 시에 표시됩니다. 버전 "
"업그레이드가 동작 변경이나 에러를 일으킬 수 있어서, 다른 파이썬 개발자를 대상으로 하는 경고로 권장됩니다."

#: ../Doc/whatsnew/3.7.rst:388
msgid ""
":exc:`PendingDeprecationWarning`: displayed by default only when running "
"tests, intended for cases where a future version upgrade will change the "
"warning category to :exc:`DeprecationWarning` or :exc:`FutureWarning`."
msgstr ""
":exc:`PendingDeprecationWarning`: 기본적으로 테스트 실행 시에만 표시됩니다. 향후 버전 업그레이드가 경고"
" 범주를 :exc:`DeprecationWarning` 이나 :exc:`FutureWarning`\\으로 변경하게 될 경우를 위한 "
"것입니다."

#: ../Doc/whatsnew/3.7.rst:392
msgid ""
"Previously both :exc:`DeprecationWarning` and "
":exc:`PendingDeprecationWarning` were only visible when running tests, "
"which meant that developers primarily writing single file scripts or "
"using Python interactively could be surprised by breaking changes in the "
"APIs they used."
msgstr ""
"이전에는 :exc:`DeprecationWarning` 과 :exc:`PendingDeprecationWarning` 둘 다 "
"테스트를 실행할 때만 볼 수 있었습니다. 주로 단일 파일 스크립트를 작성하거나 대화식으로 파이썬을 사용하는 개발자는 사용된 API가"
" 호환되지 않는 방식으로 변경된 것을 보고 놀랄 수 있었습니다."

#: ../Doc/whatsnew/3.7.rst:399
msgid ":pep:`565` -- Show DeprecationWarning in ``__main__``"
msgstr ":pep:`565` -- ``__main__`` 의 DeprecationWarning 표시"

#: ../Doc/whatsnew/3.7.rst:400
msgid "PEP written and implemented by Nick Coghlan"
msgstr "Nick Coghlan이 작성하고 구현한 PEP"

#: ../Doc/whatsnew/3.7.rst:406
msgid "PEP 560: Core Support for ``typing`` module and Generic Types"
msgstr "PEP 560: ``typing`` 모듈과 제네릭 형에 대한 핵심 지원"

#: ../Doc/whatsnew/3.7.rst:408
msgid ""
"Initially :pep:`484` was designed in such way that it would not introduce"
" *any* changes to the core CPython interpreter. Now type hints and the "
":mod:`typing` module are extensively used by the community, so this "
"restriction is removed. The PEP introduces two special methods "
":meth:`__class_getitem__` and ``__mro_entries__``, these methods are now "
"used by most classes and special constructs in :mod:`typing`. As a "
"result, the speed of various operations with types increased up to 7 "
"times, the generic types can be used without metaclass conflicts, and "
"several long standing bugs in :mod:`typing` module are fixed."
msgstr ""
"처음에는 :pep:`484` 가 핵심 CPython 인터프리터의 *어떤* 변경도 도입하지 않도록 설계되었습니다. 이제 형 힌트와 "
":mod:`typing` 모듈이 커뮤니티에서 광범위하게 사용되므로, 이 제한이 제거됩니다. PEP는 두 개의 특수 메서드 "
":meth:`__class_getitem__` 과 ``__mro_entries__`` 를 소개합니다. 이 메서드는 이제 "
":mod:`typing` 에 있는 대부분 클래스와 특수 구조물에서 사용됩니다. 그 결과로, 형과 관련된 여러 연산의 속도가 최대 "
"7배까지 증가했고, 제네릭 형은 메타 클래스 충돌 없이 사용할 수 있으며, :mod:`typing` 모듈의 몇 가지 오랜 버그가 "
"해결되었습니다."

#: ../Doc/whatsnew/3.7.rst:420
msgid ":pep:`560` -- Core support for typing module and generic types"
msgstr ":pep:`560` -- typing 모듈과 제네릭 형의 핵심 지원"

#: ../Doc/whatsnew/3.7.rst:427
msgid "PEP 552: Hash-based .pyc Files"
msgstr "PEP 552: 해시 기반 .pyc 파일"

#: ../Doc/whatsnew/3.7.rst:429
msgid ""
"Python has traditionally checked the up-to-dateness of bytecode cache "
"files (i.e., ``.pyc`` files) by comparing the source metadata (last-"
"modified timestamp and size) with source metadata saved in the cache file"
" header when it was generated. While effective, this invalidation method "
"has its drawbacks.  When filesystem timestamps are too coarse, Python can"
" miss source updates, leading to user confusion. Additionally, having a "
"timestamp in the cache file is problematic for `build reproduciblity "
"<https://reproducible-builds.org/>`_ and content-based build systems."
msgstr ""
"파이썬은 전통적으로 바이트 코드 캐시 파일(즉, ``.pyc`` 파일)의 최신성을 검사하기 위해, 소스 메타 데이터(최종 수정 "
"타임스탬프와 크기)를 캐시 파일이 만들어질 때 헤더에 저장된 소스 메타 데이터와 비교했습니다. 효과적이지만, 이 무효화 방법에는 "
"단점이 있습니다. 파일 시스템 타임스탬프가 너무 거친 경우, 파이썬은 소스 변경을 놓칠 수 있어 사용자 혼란을 낳을 수 있습니다. "
"또한, 캐시 파일에 타임스탬프를 갖는 것은 `빌드 재현성 <https://reproducible-builds.org/>`_ 과 "
"콘텐츠 기반 빌드 시스템에서 문제가 됩니다."

#: ../Doc/whatsnew/3.7.rst:438
msgid ""
":pep:`552` extends the pyc format to allow the hash of the source file to"
" be used for invalidation instead of the source timestamp. Such ``.pyc`` "
"files are called \"hash-based\". By default, Python still uses timestamp-"
"based invalidation and does not generate hash-based ``.pyc`` files at "
"runtime. Hash-based ``.pyc`` files may be generated with "
":mod:`py_compile` or :mod:`compileall`."
msgstr ""
":pep:`552` 는 소스 타임스탬프 대신 소스 파일의 해시가 소스 타임스탬프 대신 무효화에 사용될 수 있도록 pyc 형식을 "
"확장합니다. 이러한 ``.pyc`` 파일을 \"해시 기반\"이라고 합니다. 기본적으로, 파이썬은 여전히 ​​타임스탬프 기반 무효화를"
" 사용하며 실행시간에 해시 기반 ``.pyc`` 파일을 생성하지 않습니다. 해시 기반 ``.pyc`` 파일은 "
":mod:`py_compile` 또는 :mod:`compileall`\\로 만들 수 있습니다."

#: ../Doc/whatsnew/3.7.rst:444
msgid ""
"Hash-based ``.pyc`` files come in two variants: checked and unchecked. "
"Python validates checked hash-based ``.pyc`` files against the "
"corresponding source files at runtime but doesn't do so for unchecked "
"hash-based pycs. Unchecked hash-based ``.pyc`` files are a useful "
"performance optimization for environments where a system external to "
"Python (e.g., the build system) is responsible for keeping ``.pyc`` files"
" up-to-date."
msgstr ""
"해시 기반 ``.pyc`` 파일에는 두 가지 변형이 있습니다: 검사형(checked)과 비검사형(unchecked). 파이썬은 "
"검사형 해시 기반 ``.pyc`` 파일을 실행시간에 해당 소스 파일에 대해 유효성을 검사하지만, 비검사형 해시 기반 pyc에 "
"대해서는 확인하지 않습니다. 비검사형 해시 기반 ``.pyc`` 파일은 파이썬 외부의 시스템(가령 빌드 시스템)이 ``.pyc`` "
"파일을 최신 상태로 유지하는 책임을 지는 환경에서 유용한 성능 최적화입니다."

#: ../Doc/whatsnew/3.7.rst:451
msgid "See :ref:`pyc-invalidation` for more information."
msgstr "자세한 정보는 :ref:`pyc-invalidation` 를 보십시오."

#: ../Doc/whatsnew/3.7.rst:455
msgid ":pep:`552` -- Deterministic pycs"
msgstr ":pep:`552` -- 결정적 pycs"

#: ../Doc/whatsnew/3.7.rst:456
msgid "PEP written and implemented by Benjamin Peterson"
msgstr "Benjamin Peterson이 작성하고 구현한 PEP"

#: ../Doc/whatsnew/3.7.rst:462
msgid "PEP 545: Python Documentation Translations"
msgstr "PEP 545: 파이썬 설명서 번역"

#: ../Doc/whatsnew/3.7.rst:464
msgid ""
":pep:`545` describes the process of creating and maintaining Python "
"documentation translations."
msgstr ":pep:`545` 는 파이썬 설명서 번역을 만들고 유지하는 과정을 설명합니다."

#: ../Doc/whatsnew/3.7.rst:467
msgid "Three new translations have been added:"
msgstr "세 가지 새로운 번역이 추가되었습니다:"

#: ../Doc/whatsnew/3.7.rst:469
msgid "Japanese: https://docs.python.org/ja/"
msgstr "일본어: https://docs.python.org/ja/"

#: ../Doc/whatsnew/3.7.rst:470
msgid "French: https://docs.python.org/fr/"
msgstr "프랑스어: https://docs.python.org/fr/"

#: ../Doc/whatsnew/3.7.rst:471
msgid "Korean: https://docs.python.org/ko/"
msgstr "한국어: https://docs.python.org/ko/"

#: ../Doc/whatsnew/3.7.rst:476
msgid ":pep:`545` -- Python Documentation Translations"
msgstr ":pep:`545` -- 파이썬 설명서 번역"

#: ../Doc/whatsnew/3.7.rst:476
msgid ""
"PEP written and implemented by Julien Palard, Inada Naoki, and Victor "
"Stinner."
msgstr "Julien Palard, Inada Naoki 및 Victor Stinner가 작성하고 구현한 PEP."

#: ../Doc/whatsnew/3.7.rst:483
msgid "Development Runtime Mode: -X dev"
msgstr "개발 실행시간 모드: -X dev"

#: ../Doc/whatsnew/3.7.rst:485
msgid ""
"The new :option:`-X` ``dev`` command line option or the new "
":envvar:`PYTHONDEVMODE` environment variable can be used to enable "
"CPython's *development mode*.  When in development mode, CPython performs"
" additional runtime checks that are too expensive to be enabled by "
"default. See :option:`-X` ``dev`` documentation for the full description "
"of the effects of this mode."
msgstr ""
"새 :option:`-X` ``dev`` 명령행 옵션이나 새 :envvar:`PYTHONDEVMODE` 환경 변수를 사용하여 "
"CPython의 *개발 모드* 를 활성화할 수 있습니다. 개발 모드에 있을 때, CPython은 기본적으로 활성화되기에는 너무 비싼"
" 추가적인 실행시간 검사를 수행합니다. 이 모드의 효과에 대한 자세한 설명은 :option:`-X` ``dev`` 설명서를 "
"보십시오."

#: ../Doc/whatsnew/3.7.rst:494
msgid "Other Language Changes"
msgstr "기타 언어 변경"

#: ../Doc/whatsnew/3.7.rst:496
msgid ""
"More than 255 arguments can now be passed to a function, and a function "
"can now have more than 255 parameters. (Contributed by Serhiy Storchaka "
"in :issue:`12844` and :issue:`18896`.)"
msgstr ""
"이제 함수에 255개 이상의 인자를 전달할 수 있고, 함수는 255개 이상의 매개변수를 가질 수 있습니다. (Contributed "
"by Serhiy Storchaka in :issue:`12844` and :issue:`18896`.)"

#: ../Doc/whatsnew/3.7.rst:500
msgid ""
":meth:`bytes.fromhex` and :meth:`bytearray.fromhex` now ignore all ASCII "
"whitespace, not only spaces. (Contributed by Robert Xiao in "
":issue:`28927`.)"
msgstr ""
"이제 :meth:`bytes.fromhex` 와 :meth:`bytearray.fromhex` 는 스페이스뿐만 아니라 모든 "
"ASCII 공백을 무시합니다. (Contributed by Robert Xiao in :issue:`28927`.)"

#: ../Doc/whatsnew/3.7.rst:503
msgid ""
":class:`str`, :class:`bytes`, and :class:`bytearray` gained support for "
"the new :meth:`isascii() <str.isascii>` method, which can be used to test"
" if a string or bytes contain only the ASCII characters. (Contributed by "
"INADA Naoki in :issue:`32677`.)"
msgstr ""
":class:`str`, :class:`bytes`, :class:`bytearray` 는 새 :meth:`isascii() "
"<str.isascii>` 메서드에 대한 지원을 얻었습니다. 이 메서드를 사용하여 문자열이나 바이트열에 오직 ASCII 문자만 들어"
" 있는지 검사할 수 있습니다. (Contributed by INADA Naoki in :issue:`32677`.)"

#: ../Doc/whatsnew/3.7.rst:508
msgid ""
":exc:`ImportError` now displays module name and module ``__file__`` path "
"when ``from ... import ...`` fails. (Contributed by Matthias Bussonnier "
"in :issue:`29546`.)"
msgstr ""
"이제 :exc:`ImportError` 는 ``from ... import ...`` 가 실패할 때 모듈 이름과 모듈 "
"``__file__`` 경로를 출력합니다. (Contributed by Matthias Bussonnier in "
":issue:`29546`.)"

#: ../Doc/whatsnew/3.7.rst:512
msgid ""
"Circular imports involving absolute imports with binding a submodule to a"
" name are now supported. (Contributed by Serhiy Storchaka in "
":issue:`30024`.)"
msgstr ""
"이제 하위 모듈을 이름에 연결하는 절대 임포트가 수반되는 순환 임포트가 지원됩니다. (Contributed by Serhiy "
"Storchaka in :issue:`30024`.)"

#: ../Doc/whatsnew/3.7.rst:516
msgid ""
"``object.__format__(x, '')`` is now equivalent to ``str(x)`` rather than "
"``format(str(self), '')``. (Contributed by Serhiy Storchaka in "
":issue:`28974`.)"
msgstr ""
"이제 ``object.__format__(x, '')`` 는 ``format(str(self), '')`` 대신에 "
"``str(x)`` 과 동등합니다. (Contributed by Serhiy Storchaka in :issue:`28974`.)"

#: ../Doc/whatsnew/3.7.rst:520
msgid ""
"In order to better support dynamic creation of stack traces, "
":class:`types.TracebackType` can now be instantiated from Python code, "
"and the ``tb_next`` attribute on :ref:`tracebacks <traceback-objects>` is"
" now writable. (Contributed by Nathaniel J. Smith in :issue:`30579`.)"
msgstr ""
"이제 스택 트레이스의 동적 생성을 더욱 잘 지원하기 위해, 파이썬 코드에서 :class:`types.TracebackType` 의 "
"인스턴스를 만들 수 있고, :ref:`트레이스백 <traceback-objects>` 의 ``tb_next`` 어트리뷰트에 쓸 수 "
"있습니다. (Contributed by Nathaniel J. Smith in :issue:`30579`.)"

#: ../Doc/whatsnew/3.7.rst:526
msgid ""
"When using the :option:`-m` switch, ``sys.path[0]`` is now eagerly "
"expanded to the full starting directory path, rather than being left as "
"the empty directory (which allows imports from the *current* working "
"directory at the time when an import occurs) (Contributed by Nick Coghlan"
" in :issue:`33053`.)"
msgstr ""
":option:`-m` 스위치를 사용할 때, 이제 ``sys.path[0]`` 를 빈 디렉터리로 남겨두기보다는 전체 시작 디렉터리 "
"경로로 확장됩니다 (빈 디렉터리를 남겨두면, 임포트가 일어날 때의 *현재* 작업 디렉터리로부터의 임포트가 가능해집니다) "
"(Contributed by Nick Coghlan in :issue:`33053`.)"

#: ../Doc/whatsnew/3.7.rst:532
msgid ""
"The new :option:`-X` ``importtime`` option or the "
":envvar:`PYTHONPROFILEIMPORTTIME` environment variable can be used to "
"show the timing of each module import. (Contributed by Victor Stinner in "
":issue:`31415`.)"
msgstr ""
"새 :option:`-X` ``importtime`` 옵션 또는 :envvar:`PYTHONPROFILEIMPORTTIME` 환경 "
"변수는 각 모듈 임포트의 타이밍을 보여주기 위해 사용될 수 있습니다. (Contributed by Victor Stinner in "
":issue:`31415`.)"

#: ../Doc/whatsnew/3.7.rst:539
msgid "New Modules"
msgstr "새 모듈"

#: ../Doc/whatsnew/3.7.rst:544
msgid "contextvars"
msgstr "contextvars"

#: ../Doc/whatsnew/3.7.rst:546
msgid ""
"The new :mod:`contextvars` module and a set of :ref:`new C APIs "
"<contextvarsobjects>` introduce support for *context variables*.  Context"
" variables are conceptually similar to thread-local variables.  Unlike "
"TLS, context variables support asynchronous code correctly."
msgstr ""
"새 :mod:`contextvars` 모듈과 :ref:`새 C API <contextvarsobjects>` 집합은 *컨텍스트 "
"변수* 에 대한 지원을 도입합니다. 컨텍스트 변수는 개념적으로 스레드-로컬 변수와 유사합니다. TLS와 달리, 컨텍스트 변수는 "
"비동기 코드를 올바르게 지원합니다."

#: ../Doc/whatsnew/3.7.rst:552
msgid ""
"The :mod:`asyncio` and :mod:`decimal` modules have been updated to use "
"and support context variables out of the box.  Particularly the active "
"decimal context is now stored in a context variable, which allows decimal"
" operations to work with the correct context in asynchronous code."
msgstr ""
":mod:`asyncio`\\와 :mod:`decimal` 모듈은 바로 사용할 수 있도록 컨텍스트 변수를 사용하고 지원하도록 "
"업데이트되었습니다. 특히 활성 십진 컨텍스트는 이제 컨텍스트 변수에 저장되므로, 십진수 연산이 비동기 코드에서 올바른 컨텍스트에서 "
"작동 할 수 있습니다."

#: ../Doc/whatsnew/3.7.rst:559
msgid ":pep:`567` -- Context Variables"
msgstr ":pep:`567` -- 컨텍스트 변수"

#: ../Doc/whatsnew/3.7.rst:560
msgid "PEP written and implemented by Yury Selivanov"
msgstr "Yury Selivanov가 작성하고 구현한 PEP"

#: ../Doc/whatsnew/3.7.rst:566
msgid "dataclasses"
msgstr "dataclasses"

#: ../Doc/whatsnew/3.7.rst:568
msgid ""
"The new :func:`~dataclasses.dataclass` decorator provides a way to "
"declare *data classes*.  A data class describes its attributes using "
"class variable annotations.  Its constructor and other magic methods, "
"such as :meth:`~object.__repr__`, :meth:`~object.__eq__`, and "
":meth:`~object.__hash__` are generated automatically."
msgstr ""
"새 :func:`~dataclasses.dataclass` 데코레이터는 *데이터 클래스* 를 선언하는 방법을 제공합니다. 데이터 "
"클래스는 클래스 변수 어노테이션을 사용하여 어트리뷰트를 기술합니다. 생성자와 :meth:`~object.__repr__`, "
":meth:`~object.__eq__`, :meth:`~object.__hash__` 와 같은 다른 매직 메서드가 자동으로 "
"생성됩니다."

#: ../Doc/whatsnew/3.7.rst:574
msgid "Example::"
msgstr "예::"

#: ../Doc/whatsnew/3.7.rst:587
msgid ":pep:`557` -- Data Classes"
msgstr ":pep:`557` -- 데이터 클래스"

#: ../Doc/whatsnew/3.7.rst:588
msgid "PEP written and implemented by Eric V. Smith"
msgstr "Eric V. Smith가 작성하고 구현한 PEP"

#: ../Doc/whatsnew/3.7.rst:594
msgid "importlib.resources"
msgstr "importlib.resources"

#: ../Doc/whatsnew/3.7.rst:596
msgid ""
"The new :mod:`importlib.resources` module provides several new APIs and "
"one new ABC for access to, opening, and reading *resources* inside "
"packages. Resources are roughly similar to files inside packages, but "
"they needn't be actual files on the physical file system.  Module loaders"
" can provide a :meth:`get_resource_reader()` function which returns a "
":class:`importlib.abc.ResourceReader` instance to support this new API.  "
"Built-in file path loaders and zip file loaders both support this."
msgstr ""
"새 :mod:`importlib.resources` 모듈은 여러 개의 새로운 API와 하나의 새로운 ABC를 제공하여, 패키지 "
"내부의 *리소스* 에 접근하고 읽는 것을 지원합니다. 리소스는 대략 패키지 안의 파일과 비슷하지만, 물리적인 파일 시스템에 있는 "
"실제 파일 일 필요는 없습니다. 모듈 로더는 이 새로운 API를 지원하기 위해 "
":class:`importlib.abc.ResourceReader` 인스턴스를 반환하는 "
":meth:`get_resource_reader()` 함수를 제공 할 수 있습니다. 내장 파일 경로 로더와 zip 파일 로더는 모두"
" 이것을 지원합니다."

#: ../Doc/whatsnew/3.7.rst:604
msgid "Contributed by Barry Warsaw and Brett Cannon in :issue:`32248`."
msgstr "Contributed by Barry Warsaw and Brett Cannon in :issue:`32248`."

#: ../Doc/whatsnew/3.7.rst:608
msgid ""
"`importlib_resources <http://importlib-"
"resources.readthedocs.io/en/latest/>`_ -- a PyPI backport for earlier "
"Python versions."
msgstr ""
"`importlib_resources <http://importlib-"
"resources.readthedocs.io/en/latest/>`_ -- 이전 파이썬 버전을 위한 PyPI 백 포트."

#: ../Doc/whatsnew/3.7.rst:613
msgid "Improved Modules"
msgstr "개선된 모듈"

#: ../Doc/whatsnew/3.7.rst:617
msgid "argparse"
msgstr "argparse"

#: ../Doc/whatsnew/3.7.rst:619
msgid ""
"The new :meth:`ArgumentParser.parse_intermixed_args() "
"<argparse.ArgumentParser.parse_intermixed_args>` method allows "
"intermixing options and positional arguments. (Contributed by paul.j3 in "
":issue:`14191`.)"
msgstr ""
"새로운 :meth:`ArgumentParser.parse_intermixed_args() "
"<argparse.ArgumentParser.parse_intermixed_args>` 메서드는 옵션과 위치 인자의 혼합을 "
"허용합니다. (Contributed by paul.j3 in :issue:`14191`.)"

#: ../Doc/whatsnew/3.7.rst:628 ../Doc/whatsnew/3.7.rst:1921
msgid "asyncio"
msgstr "asyncio"

#: ../Doc/whatsnew/3.7.rst:630
msgid ""
"The :mod:`asyncio` module has received many new features, usability and "
":ref:`performance improvements <whatsnew37-asyncio-perf>`.  Notable "
"changes include:"
msgstr ""
":mod:`asyncio` 모듈은 많은 새로운 기능과 사용성 및 :ref:`성능 개선 <whatsnew37-asyncio-"
"perf>`\\이 추가되었습니다. 주목할만한 변경 사항은 다음과 같습니다:"

#: ../Doc/whatsnew/3.7.rst:634
msgid ""
"The new :term:`provisional <provisional api>` :func:`asyncio.run` "
"function can be used to run a coroutine from synchronous code by "
"automatically creating and destroying the event loop. (Contributed by "
"Yury Selivanov in :issue:`32314`.)"
msgstr ""
"새로운 :term:`잠정 <provisional api>` :func:`asyncio.run` 함수는 자동으로 이벤트 루프를 "
"생성하고 파괴함으로써 동기 코드에서 코루틴을 실행하는 데 사용될 수 있습니다. (Contributed by Yury "
"Selivanov in :issue:`32314`.)"

#: ../Doc/whatsnew/3.7.rst:639
msgid ""
"asyncio gained support for :mod:`contextvars`. :meth:`loop.call_soon() "
"<asyncio.AbstractEventLoop.call_soon>`, "
":meth:`loop.call_soon_threadsafe() "
"<asyncio.AbstractEventLoop.call_soon_threadsafe>`, "
":meth:`loop.call_later() <asyncio.AbstractEventLoop.call_later>`, "
":meth:`loop.call_at() <asyncio.AbstractEventLoop.call_at>`, and "
":meth:`Future.add_done_callback() <asyncio.Future.add_done_callback>` "
"have a new optional keyword-only *context* parameter. :class:`Tasks "
"<asyncio.Task>` now track their context automatically. See :pep:`567` for"
" more details. (Contributed by Yury Selivanov in :issue:`32436`.)"
msgstr ""
"asyncio는 :mod:`contextvars` 에 대한 지원을 얻었습니다. :meth:`loop.call_soon() "
"<asyncio.AbstractEventLoop.call_soon>`, "
":meth:`loop.call_soon_threadsafe() "
"<asyncio.AbstractEventLoop.call_soon_threadsafe>`, "
":meth:`loop.call_later() <asyncio.AbstractEventLoop.call_later>`, "
":meth:`loop.call_at() <asyncio.AbstractEventLoop.call_at>` 및 "
":meth:`Future.add_done_callback() <asyncio.Future.add_done_callback>` 은 "
"새로운 선택적 키워드-전용 *context* 매개 변수를 갖습니다. :class:`Tasks <asyncio.Task>` 는 이제 "
"자신의 컨텍스트를 자동으로 추적합니다. 자세한 정보는 :pep:`567`\\을 보십시오. (Contributed by Yury "
"Selivanov in :issue:`32436`.)"

#: ../Doc/whatsnew/3.7.rst:650
msgid ""
"The new :func:`asyncio.create_task` function has been added as a shortcut"
" to ``asyncio.get_event_loop().create_task()``. (Contributed by Andrew "
"Svetlov in :issue:`32311`.)"
msgstr ""
"새로운 :func:`asyncio.create_task` 함수가 "
"``asyncio.get_event_loop().create_task()`` 의 손쉬운 방법으로 추가되었습니다. "
"(Contributed by Andrew Svetlov in :issue:`32311`.)"

#: ../Doc/whatsnew/3.7.rst:654
msgid ""
"The new :meth:`loop.start_tls() <asyncio.AbstractEventLoop.start_tls>` "
"method can be used to upgrade an existing connection to TLS. (Contributed"
" by Yury Selivanov in :issue:`23749`.)"
msgstr ""
"새로운 :meth:`loop.start_tls() <asyncio.AbstractEventLoop.start_tls>` 메서드를 "
"사용하여 기존 연결을 TLS로 업그레이드 할 수 있습니다. (Contributed by Yury Selivanov in "
":issue:`23749`.)"

#: ../Doc/whatsnew/3.7.rst:658
msgid ""
"The new :meth:`loop.sock_recv_into() "
"<asyncio.AbstractEventLoop.sock_recv_into>` method allows reading data "
"from a socket directly into a provided buffer making it possible to "
"reduce data copies. (Contributed by Antoine Pitrou in :issue:`31819`.)"
msgstr ""
"새로운 :meth:`loop.sock_recv_into() "
"<asyncio.AbstractEventLoop.sock_recv_into>` 메서드는 데이터를 직접 소켓에서 제공된 버퍼로 읽어 "
"들여 데이터 복사를 줄일 수 있게 합니다. (Contributed by Antoine Pitrou in "
":issue:`31819`.)"

#: ../Doc/whatsnew/3.7.rst:663
msgid ""
"The new :func:`asyncio.current_task` function returns the currently "
"running :class:`~asyncio.Task` instance, and the new "
":func:`asyncio.all_tasks` function returns a set of all existing ``Task``"
" instances in a given loop. The :meth:`Task.current_task() "
"<asyncio.Task.current_task>` and :meth:`Task.all_tasks() "
"<asyncio.Task.all_tasks>` methods have been deprecated. (Contributed by "
"Andrew Svetlov in :issue:`32250`.)"
msgstr ""
"새로운 :func:`asyncio.current_task` 함수는 현재 실행 중인 :class:`~asyncio.Task` "
"인스턴스를 반환하고, 새 :func:`asyncio.all_tasks` 함수는 주어진 루프에 있는 모든 기존 ``Task`` "
"인스턴스 집합을 반환합니다. :meth:`Task.current_task() <asyncio.Task.current_task>` 와"
" :meth:`Task.all_tasks() <asyncio.Task.all_tasks>` 메서드는 폐지되었습니다. "
"(Contributed by Andrew Svetlov in :issue:`32250`.)"

#: ../Doc/whatsnew/3.7.rst:670
msgid ""
"The new *provisional* :class:`~asyncio.BufferedProtocol` class allows "
"implementing streaming protocols with manual control over the receive "
"buffer. (Contributed by Yury Selivanov in :issue:`32251`.)"
msgstr ""
"새로운 *잠정적* :class:`~asyncio.BufferedProtocol` 클래스는 수신 버퍼를 수동으로 제어하여 스트리밍 "
"프로토콜을 구현할 수 있게 합니다. (Contributed by Yury Selivanov in :issue:`32251`.)"

#: ../Doc/whatsnew/3.7.rst:674
msgid ""
"The new :func:`asyncio.get_running_loop` function returns the currently "
"running loop, and raises a :exc:`RuntimeError` if no loop is running. "
"This is in contrast with :func:`asyncio.get_event_loop`, which will "
"*create* a new event loop if none is running. (Contributed by Yury "
"Selivanov in :issue:`32269`.)"
msgstr ""
"새로운 :func:`asyncio.get_running_loop` 함수는 현재 실행 중인 루프를 반환하고, 루프가 실행되고 있지 "
"않으면 :exc:`RuntimeError` 를 발생시킵니다. 이는 아무것도 실행되고 있지 않으면 새로 *만드는* "
":func:`asyncio.get_event_loop` 과는 대조적입니다. (Contributed by Yury Selivanov "
"in :issue:`32269`.)"

#: ../Doc/whatsnew/3.7.rst:680
msgid ""
"The new :meth:`StreamWriter.wait_closed() "
"<asyncio.StreamWriter.wait_closed>` coroutine method allows waiting until"
" the stream writer is closed.  The new :meth:`StreamWriter.is_closing() "
"<asyncio.StreamWriter.is_closing>` method can be used to determine if the"
" writer is closing. (Contributed by Andrew Svetlov in :issue:`32391`.)"
msgstr ""
"새로운 :meth:`StreamWriter.wait_closed() <asyncio.StreamWriter.wait_closed>`"
" 코루틴 메서드는 스트림 작성자가 닫힐 때까지 기다릴 수 있습니다. 새로운 "
":meth:`StreamWriter.is_closing() <asyncio.StreamWriter.is_closing>` 메서드를 "
"사용하여 작성기가 닫히고 있는지 판별 할 수 있습니다. (Contributed by Andrew Svetlov in "
":issue:`32391`.)"

#: ../Doc/whatsnew/3.7.rst:686
msgid ""
"The new :meth:`loop.sock_sendfile() "
"<asyncio.AbstractEventLoop.sock_sendfile>` coroutine method allows "
"sending files using :mod:`os.sendfile` when possible. (Contributed by "
"Andrew Svetlov in :issue:`32410`.)"
msgstr ""
"새로운 :meth:`loop.sock_sendfile() "
"<asyncio.AbstractEventLoop.sock_sendfile>` 코루틴 메서드는 가능한 경우 "
":mod:`os.sendfile` 을 사용하여 파일을 전송할 수 있도록 합니다. (Contributed by Andrew "
"Svetlov in :issue:`32410`.)"

#: ../Doc/whatsnew/3.7.rst:690
msgid ""
"The new :meth:`Task.get_loop() <asyncio.Task.get_loop>` and "
":meth:`Future.get_loop() <asyncio.Future.get_loop>` methods return the "
"instance of the loop on which a task or a future were created. "
":meth:`Server.get_loop() <asyncio.Server.get_loop>` allows doing the same"
" for :class:`asyncio.Server` objects. (Contributed by Yury Selivanov in "
":issue:`32415` and Srinivas Reddy Thatiparthy in :issue:`32418`.)"
msgstr ""
"새로운 :meth:`Task.get_loop() <asyncio.Task.get_loop>` 와 "
":meth:`Future.get_loop() <asyncio.Future.get_loop>` 메서드는 태스크 나 퓨처가 만들어진 "
"루프의 인스턴스를 돌려줍니다. :meth:`Server.get_loop() <asyncio.Server.get_loop>` 는 "
":class:`asyncio.Server` 객체에 대해서도 같은 일을 할 수 있도록 합니다. (Contributed by Yury "
"Selivanov in :issue:`32415` and Srinivas Reddy Thatiparthy in "
":issue:`32418`.)"

#: ../Doc/whatsnew/3.7.rst:698
msgid ""
"It is now possible to control how instances of :class:`asyncio.Server` "
"begin serving.  Previously, the server would start serving immediately "
"when created. The new *start_serving* keyword argument to "
":meth:`loop.create_server() <asyncio.AbstractEventLoop.create_server>` "
"and :meth:`loop.create_unix_server() "
"<asyncio.AbstractEventLoop.create_unix_server>`, as well as "
":meth:`Server.start_serving() <asyncio.Server.start_serving>`, and "
":meth:`Server.serve_forever() <asyncio.Server.serve_forever>` can be used"
" to decouple server instantiation and serving.  The new "
":meth:`Server.is_serving() <asyncio.Server.is_serving>` method returns "
"``True`` if the server is serving.  :class:`~asyncio.Server` objects are "
"now asynchronous context managers::"
msgstr ""
"이제 :class:`asyncio.Server` 의 인스턴스가 어떻게 시작되는지 제어 할 수 있습니다. 이전에는 서버를 만들 때 "
"즉시 서버가 시작되었습니다. 새로운 *start_serving* 키워드 인자는 :meth:`loop.create_server() "
"<asyncio.AbstractEventLoop.create_server>` 와 "
":meth:`loop.create_unix_server() "
"<asyncio.AbstractEventLoop.create_unix_server>` 뿐만 아니라 "
":meth:`Server.start_serving() <asyncio.Server.start_serving>` 와 "
":meth:`Server.serve_forever() <asyncio.Server.serve_forever>` 에도 사용되어 서버 "
"인스턴스를 만드는 것과 시작시키는 것을 분리할 수 ​​있습니다. 새로운 :meth:`Server.is_serving() "
"<asyncio.Server.is_serving>` 메서드는 서버가 실행 중이면 ``True`` 를 돌려줍니다. "
":class:`~asyncio.Server` 객체는 이제 비동기 컨텍스트 관리자입니다::"

#: ../Doc/whatsnew/3.7.rst:717
msgid "(Contributed by Yury Selivanov in :issue:`32662`.)"
msgstr "(Contributed by Yury Selivanov in :issue:`32662`.)"

#: ../Doc/whatsnew/3.7.rst:719
msgid ""
"Callback objects returned by :func:`loop.call_later() "
"<asyncio.AbstractEventLoop.call_later>` gained the new :meth:`when() "
"<asyncio.TimerHandle.when>` method which returns an absolute scheduled "
"callback timestamp. (Contributed by Andrew Svetlov in :issue:`32741`.)"
msgstr ""
":func:`loop.call_later() <asyncio.AbstractEventLoop.call_later>` 가 반환하는 "
"콜백 객체는 예약된 절대 콜백 타임스탬프를 돌려주는 새 :meth:`when() <asyncio.TimerHandle.when>` "
"메서드를 얻었습니다. (Contributed by Andrew Svetlov in :issue:`32741`.)"

#: ../Doc/whatsnew/3.7.rst:725
msgid ""
"The :meth:`loop.create_datagram_endpoint() \\ "
"<asyncio.AbstractEventLoop.create_datagram_endpoint>` method gained "
"support for Unix sockets. (Contributed by Quentin Dawans in "
":issue:`31245`.)"
msgstr ""
":meth:`loop.create_datagram_endpoint() \\ "
"<asyncio.AbstractEventLoop.create_datagram_endpoint>` 메서드는 유닉스 소켓 지원을 "
"얻었습니다. (Contributed by Quentin Dawans in :issue:`31245`.)"

#: ../Doc/whatsnew/3.7.rst:730
msgid ""
"The :func:`asyncio.open_connection`, :func:`asyncio.start_server` "
"functions, :meth:`loop.create_connection() "
"<asyncio.AbstractEventLoop.create_connection>`, "
":meth:`loop.create_server() <asyncio.AbstractEventLoop.create_server>`, "
":meth:`loop.create_accepted_socket() "
"<asyncio.BaseEventLoop.connect_accepted_socket>` methods and their "
"corresponding UNIX socket variants now accept the *ssl_handshake_timeout*"
" keyword argument. (Contributed by Neil Aspinall in :issue:`29970`.)"
msgstr ""
":func:`asyncio.open_connection`, :func:`asyncio.start_server` 함수, "
":meth:`loop.create_connection() "
"<asyncio.AbstractEventLoop.create_connection>`, :meth:`loop.create_server() "
"<asyncio.AbstractEventLoop.create_server>`, "
":meth:`loop.create_accepted_socket() "
"<asyncio.BaseEventLoop.connect_accepted_socket>` 메서드와 해당 유닉스 소켓 변형은 이제 "
"*ssl_handshake_timeout* 키워드 인자를 받아들입니다. (Contributed by Neil Aspinall in "
":issue:`29970`.)"

#: ../Doc/whatsnew/3.7.rst:738
msgid ""
"The new :meth:`Handle.cancelled() <asyncio.Handle.cancelled>` method "
"returns ``True`` if the callback was cancelled. (Contributed by Marat "
"Sharafutdinov in :issue:`31943`.)"
msgstr ""
"새로운 :meth:`Handle.cancelled() <asyncio.Handle.cancelled>` 메서드는 콜백이 취소된 경우"
" ``True`` 를 돌려줍니다. (Contributed by Marat Sharafutdinov in "
":issue:`31943`.)"

#: ../Doc/whatsnew/3.7.rst:742
msgid ""
"The asyncio source has been converted to use the "
":keyword:`async`/:keyword:`await` syntax. (Contributed by Andrew Svetlov "
"in :issue:`32193`.)"
msgstr ""
"asyncio 소스는 :keyword:`async`/:keyword:`await` 구문을 사용하도록 변환되었습니다. "
"(Contributed by Andrew Svetlov in :issue:`32193`.)"

#: ../Doc/whatsnew/3.7.rst:746
msgid ""
"The new :meth:`ReadTransport.is_reading() "
"<asyncio.ReadTransport.is_reading>` method can be used to determine the "
"reading state of the transport. Additionally, calls to "
":meth:`ReadTransport.resume_reading() "
"<asyncio.ReadTransport.resume_reading>` and "
":meth:`ReadTransport.pause_reading() "
"<asyncio.ReadTransport.pause_reading>` are now idempotent. (Contributed "
"by Yury Selivanov in :issue:`32356`.)"
msgstr ""
"새로운 :meth:`ReadTransport.is_reading() <asyncio.ReadTransport.is_reading>`"
" 메서드를 사용하여 전송계층의 읽기 상태를 판별 할 수 있습니다. 또한 "
":meth:`ReadTransport.resume_reading() "
"<asyncio.ReadTransport.resume_reading>` 과 "
":meth:`ReadTransport.pause_reading() "
"<asyncio.ReadTransport.pause_reading>` 은 이제 멱등적(idempotent)입니다. "
"(Contributed by Yury Selivanov in :issue:`32356`.)"

#: ../Doc/whatsnew/3.7.rst:754
msgid ""
"Loop methods which accept socket paths now support passing :term:`path-"
"like objects <path-like object>`. (Contributed by Yury Selivanov in "
":issue:`32066`.)"
msgstr ""
"소켓 경로를 받아들이는 루프 메서드에는 이제 :term:`경로류 객체 <path-like object>` 를 전달할 수 있습니다. "
"(Contributed by Yury Selivanov in :issue:`32066`.)"

#: ../Doc/whatsnew/3.7.rst:758
msgid ""
"In :mod:`asyncio` TCP sockets on Linux are now created with "
"``TCP_NODELAY`` flag set by default. (Contributed by Yury Selivanov and "
"Victor Stinner in :issue:`27456`.)"
msgstr ""
":mod:`asyncio` 에서 리눅스의 TCP 소켓은 이제 기본적으로 ``TCP_NODELAY`` 플래그가 설정된 상태로 "
"만들어집니다. (Contributed by Yury Selivanov and Victor Stinner in "
":issue:`27456`.)"

#: ../Doc/whatsnew/3.7.rst:762
msgid ""
"Exceptions occurring in cancelled tasks are no longer logged. "
"(Contributed by Yury Selivanov in :issue:`30508`.)"
msgstr ""
"취소된 작업에서 발생하는 예외는 더 로깅 되지 않습니다. (Contributed by Yury Selivanov in "
":issue:`30508`.)"

#: ../Doc/whatsnew/3.7.rst:765
msgid ""
"New ``WindowsSelectorEventLoopPolicy`` and "
"``WindowsProactorEventLoopPolicy`` classes. (Contributed by Yury "
"Selivanov in :issue:`33792`.)"
msgstr ""
"새로운 ``WindowsSelectorEventLoopPolicy`` 와 ``WindowsProactorEventLoopPolicy`` "
"클래스. (Contributed by Yury Selivanov in :issue:`33792`.)"

#: ../Doc/whatsnew/3.7.rst:769
msgid ""
"Several ``asyncio`` APIs have been :ref:`deprecated <whatsnew37-asyncio-"
"deprecated>`."
msgstr "몇몇 ``asyncio`` API는 :ref:`폐지되었습니다 <whatsnew37-asyncio-deprecated>`."

#: ../Doc/whatsnew/3.7.rst:774
msgid "binascii"
msgstr "binascii"

#: ../Doc/whatsnew/3.7.rst:776
msgid ""
"The :func:`~binascii.b2a_uu` function now accepts an optional *backtick* "
"keyword argument.  When it's true, zeros are represented by ``'`'`` "
"instead of spaces.  (Contributed by Xiang Zhang in :issue:`30103`.)"
msgstr ""
":func:`~binascii.b2a_uu` 함수는 선택적 *backtick* 키워드 인자를 받아들입니다. 참일 때, 0은 스페이스"
" 대신에 ``'`'`` 로 표현됩니다. (Contributed by Xiang Zhang in :issue:`30103`.)"

#: ../Doc/whatsnew/3.7.rst:782
msgid "calendar"
msgstr "calendar"

#: ../Doc/whatsnew/3.7.rst:784
msgid ""
"The :class:`~calendar.HTMLCalendar` class has new class attributes which "
"ease the customization of CSS classes in the produced HTML calendar. "
"(Contributed by Oz Tiram in :issue:`30095`.)"
msgstr ""
":class:`~calendar.HTMLCalendar` 클래스는 생성된 HTML 달력에서 CSS 클래스의 개별화를 쉽게 해주는 "
"새로운 클래스 어트리뷰트를 갖습니다. (Contributed by Oz Tiram in :issue:`30095`.)"

#: ../Doc/whatsnew/3.7.rst:790 ../Doc/whatsnew/3.7.rst:1936
msgid "collections"
msgstr "collections"

#: ../Doc/whatsnew/3.7.rst:792
msgid ""
"``collections.namedtuple()`` now supports default values. (Contributed by"
" Raymond Hettinger in :issue:`32320`.)"
msgstr ""
"``collections.namedtuple()`` 은 이제 기본값을 지원합니다. (Contributed by Raymond "
"Hettinger in :issue:`32320`.)"

#: ../Doc/whatsnew/3.7.rst:797
msgid "compileall"
msgstr "compileall"

#: ../Doc/whatsnew/3.7.rst:799
msgid ""
":func:`compileall.compile_dir` learned the new *invalidation_mode* "
"parameter, which can be used to enable :ref:`hash-based .pyc invalidation"
" <whatsnew37-pep552>`.  The invalidation mode can also be specified on "
"the command line using the new ``--invalidation-mode`` argument. "
"(Contributed by Benjamin Peterson in :issue:`31650`.)"
msgstr ""
":func:`compileall.compile_dir` 는 새로운 *invalidation_mode* 매개 변수를 갖습니다. 이 "
"매개 변수는 :ref:`해시 기반 .pyc 무효화 <whatsnew37-pep552>` 를 활성화하는데 사용할 수 있습니다. 무효화"
" 모드는 새로운 ``--invalidation-mode`` 인자를 사용하여 명령행에서 지정할 수도 있습니다. (Contributed"
" by Benjamin Peterson in :issue:`31650`.)"

#: ../Doc/whatsnew/3.7.rst:808
msgid "concurrent.futures"
msgstr "concurrent.futures"

#: ../Doc/whatsnew/3.7.rst:810
msgid ""
":class:`ProcessPoolExecutor <concurrent.futures.ProcessPoolExecutor>` and"
" :class:`ThreadPoolExecutor <concurrent.futures.ThreadPoolExecutor>` now "
"support the new *initializer* and *initargs* constructor arguments. "
"(Contributed by Antoine Pitrou in :issue:`21423`.)"
msgstr ""
":class:`ProcessPoolExecutor <concurrent.futures.ProcessPoolExecutor>` 와 "
":class:`ThreadPoolExecutor <concurrent.futures.ThreadPoolExecutor>` 는 이제 "
"새로운 *initializer* 및 *initargs* 생성자 인자를 지원합니다. (Contributed by Antoine "
"Pitrou in :issue:`21423`.)"

#: ../Doc/whatsnew/3.7.rst:815
msgid ""
"The :class:`ProcessPoolExecutor <concurrent.futures.ProcessPoolExecutor>`"
" can now take the multiprocessing context via the new *mp_context* "
"argument. (Contributed by Thomas Moreau in :issue:`31540`.)"
msgstr ""
":class:`ProcessPoolExecutor <concurrent.futures.ProcessPoolExecutor>` 는 "
"새로운 *mp_context* 인자를 통해 multiprocessing 컨텍스트를 받아들일 수 있습니다. (Contributed "
"by Thomas Moreau in :issue:`31540`.)"

#: ../Doc/whatsnew/3.7.rst:821
msgid "contextlib"
msgstr "contextlib"

#: ../Doc/whatsnew/3.7.rst:823
msgid ""
"The new :func:`~contextlib.nullcontext` is a simpler and faster no-op "
"context manager than :class:`~contextlib.ExitStack`. (Contributed by "
"Jesse-Bakker in :issue:`10049`.)"
msgstr ""
"새로운 :func:`~contextlib.nullcontext` 는 :class:`~contextlib.ExitStack` 보다 더"
" 간단하고 빠른 no-op 컨텍스트 관리자입니다. (Contributed by Jesse-Bakker in "
":issue:`10049`.)"

#: ../Doc/whatsnew/3.7.rst:827
msgid ""
"The new :func:`~contextlib.asynccontextmanager`, "
":class:`~contextlib.AbstractAsyncContextManager`, and "
":class:`~contextlib.AsyncExitStack` have been added to complement their "
"synchronous counterparts.  (Contributed by Jelle Zijlstra in "
":issue:`29679` and :issue:`30241`, and by Alexander Mohr and Ilya Kulakov"
" in :issue:`29302`.)"
msgstr ""
"새로운 :func:`~contextlib.asynccontextmanager`, "
":class:`~contextlib.AbstractAsyncContextManager`, "
":class:`~contextlib.AsyncExitStack` 가 추가되어 동기 대응물을 보완합니다. (Contributed by"
" Jelle Zijlstra in :issue:`29679` and :issue:`30241`, and by Alexander "
"Mohr and Ilya Kulakov in :issue:`29302`.)"

#: ../Doc/whatsnew/3.7.rst:836
msgid "cProfile"
msgstr "cProfile"

#: ../Doc/whatsnew/3.7.rst:838
msgid ""
"The :mod:`cProfile` command line now accepts ``-m module_name`` as an "
"alternative to script path.  (Contributed by Sanyam Khurana in "
":issue:`21862`.)"
msgstr ""
":mod:`cProfile` 명령행은 이제 스크립트 경로의 대안으로 ``-m module_name`` 을 허용합니다. "
"(Contributed by Sanyam Khurana in :issue:`21862`.)"

#: ../Doc/whatsnew/3.7.rst:843
msgid "crypt"
msgstr "crypt"

#: ../Doc/whatsnew/3.7.rst:845
msgid ""
"The :mod:`crypt` module now supports the Blowfish hashing method. "
"(Contributed by Serhiy Storchaka in :issue:`31664`.)"
msgstr ""
":mod:`crypt` 모듈은 이제 블로피시 해싱 방법을 지원합니다. (Contributed by Serhiy Storchaka "
"in :issue:`31664`.)"

#: ../Doc/whatsnew/3.7.rst:848
msgid ""
"The :func:`~crypt.mksalt` function now allows specifying the number of "
"rounds for hashing.  (Contributed by Serhiy Storchaka in :issue:`31702`.)"
msgstr ""
":func:`~crypt.mksalt` 함수는 이제 해싱을 위한 라운드 수를 지정할 수 있습니다. (Contributed by "
"Serhiy Storchaka in :issue:`31702`.)"

#: ../Doc/whatsnew/3.7.rst:853
msgid "datetime"
msgstr "datetime"

#: ../Doc/whatsnew/3.7.rst:855
msgid ""
"The new :meth:`datetime.fromisoformat() "
"<datetime.datetime.fromisoformat>` method constructs a "
":class:`~datetime.datetime` object from a string in one of the formats "
"output by :meth:`datetime.isoformat() <datetime.datetime.isoformat>`. "
"(Contributed by Paul Ganssle in :issue:`15873`.)"
msgstr ""
"새로운 :meth:`datetime.fromisoformat() <datetime.datetime.fromisoformat>` "
"메서드는 :meth:`datetime.isoformat() <datetime.datetime.isoformat>` 이 출력하는 "
"형식의 문자열로부터 :class:`~datetime.datetime` 객체를 생성합니다. (Contributed by Paul "
"Ganssle in :issue:`15873`.)"

#: ../Doc/whatsnew/3.7.rst:861
msgid ""
"The :class:`tzinfo <datetime.tzinfo>` class now supports sub-minute "
"offsets. (Contributed by Alexander Belopolsky in :issue:`5288`.)"
msgstr ""
":class:`tzinfo <datetime.tzinfo>` 클래스는 이제 분보다 작은 오프셋을 지원합니다. (Contributed"
" by Alexander Belopolsky in :issue:`5288`.)"

#: ../Doc/whatsnew/3.7.rst:866 ../Doc/whatsnew/3.7.rst:1946
msgid "dbm"
msgstr "dbm"

#: ../Doc/whatsnew/3.7.rst:868
msgid ""
":mod:`dbm.dumb` now supports reading read-only files and no longer writes"
" the index file when it is not changed."
msgstr ":mod:`dbm.dumb` 는 이제 읽기 전용 파일 읽기를 지원하며 변경되지 않았을 때 더는 색인 파일을 쓰지 않습니다."

#: ../Doc/whatsnew/3.7.rst:873
msgid "decimal"
msgstr "decimal"

#: ../Doc/whatsnew/3.7.rst:875
msgid ""
"The :mod:`decimal` module now uses :ref:`context variables "
"<whatsnew37-pep567>` to store the decimal context. (Contributed by Yury "
"Selivanov in :issue:`32630`.)"
msgstr ""
":mod:`decimal` 모듈은 이제 십진 컨텍스트를 저장하는데 :ref:`컨텍스트 변수 <whatsnew37-pep567>` 를"
" 사용한다. (Contributed by Yury Selivanov in :issue:`32630`.)"

#: ../Doc/whatsnew/3.7.rst:881
msgid "dis"
msgstr "dis"

#: ../Doc/whatsnew/3.7.rst:883
msgid ""
"The :func:`~dis.dis` function is now able to disassemble nested code "
"objects (the code of comprehensions, generator expressions and nested "
"functions, and the code used for building nested classes).  The maximum "
"depth of disassembly recursion is controlled by the new *depth* "
"parameter. (Contributed by Serhiy Storchaka in :issue:`11822`.)"
msgstr ""
":func:`~dis.dis` 함수는 이제 중첩된 코드 객체 (컴프리헨션, 제너레이터 표현식 및 중첩된 함수의 코드와 중첩된 "
"클래스를 만드는데 사용되는 코드)를 역 어셈블 할 수 있습니다. 해체 재귀의 최대 깊이는 새로운 * depth * 매개 변수에 의해"
" 제어됩니다. (Contributed by Serhiy Storchaka in :issue:`11822`.)"

#: ../Doc/whatsnew/3.7.rst:892
msgid "distutils"
msgstr "distutils"

#: ../Doc/whatsnew/3.7.rst:894
msgid ""
"``README.rst`` is now included in the list of distutils standard READMEs "
"and therefore included in source distributions. (Contributed by Ryan "
"Gonzalez in :issue:`11913`.)"
msgstr ""
"``README.rst`` 는 이제 distutils 표준 README 목록에 포함됩니다. 그래서 소스 배포판에 포함됩니다. "
"(Contributed by Ryan Gonzalez in :issue:`11913`.)"

#: ../Doc/whatsnew/3.7.rst:900 ../Doc/whatsnew/3.7.rst:1956
msgid "enum"
msgstr "enum"

#: ../Doc/whatsnew/3.7.rst:902
msgid ""
"The :class:`Enum <enum.Enum>` learned the new ``_ignore_`` class "
"property, which allows listing the names of properties which should not "
"become enum members. (Contributed by Ethan Furman in :issue:`31801`.)"
msgstr ""
":class:`Enum <enum.Enum>` 은 새로운 ``_ignore_`` 클래스 프로퍼티를 얻었는데, 열거형 멤버가 되어서는"
" 안 되는 프로퍼티의 이름들을 나열할 수 있도록 합니다. (Contributed by Ethan Furman in "
":issue:`31801`.)"

#: ../Doc/whatsnew/3.7.rst:907
msgid ""
"In Python 3.8, attempting to check for non-Enum objects in :class:`Enum` "
"classes will raise a :exc:`TypeError` (e.g. ``1 in Color``); similarly, "
"attempting to check for non-Flag objects in a :class:`Flag` member will "
"raise :exc:`TypeError` (e.g. ``1 in Perm.RW``); currently, both "
"operations return :const:`False` instead and are deprecated. (Contributed"
" by Ethan Furman in :issue:`33217`.)"
msgstr ""
"파이썬 3.8에서 :class:`Enum` 클래스에서 열거 이외의 객체를 포함 검사하려고 하면 :exc:`TypeError` 가 "
"발생합니다 (예 ``1 in Color``). 마찬가지로 :class:`Flag` 멤버에서 플래그가 아닌 객체를 포함 검사하려고 "
"하면 :exc:`TypeError` 를 일으킵니다 (예 ``1 in Perm.RW``); 현재는, 두 연산 모두 대신 "
":const:`False` 가 반환되며, 폐지되었습니다. (Contributed by Ethan Furman in "
":issue:`33217`.)"

#: ../Doc/whatsnew/3.7.rst:916
msgid "functools"
msgstr "functools"

#: ../Doc/whatsnew/3.7.rst:918
msgid ""
":func:`functools.singledispatch` now supports registering implementations"
" using type annotations. (Contributed by Łukasz Langa in :issue:`32227`.)"
msgstr ""
":func:`functools.singledispatch` 는 이제 형 어노테이션을 사용해서 구현을 등록할 수 있습니다. "
"(Contributed by Łukasz Langa in :issue:`32227`.)"

#: ../Doc/whatsnew/3.7.rst:924
msgid "gc"
msgstr "gc"

#: ../Doc/whatsnew/3.7.rst:926
msgid ""
"The new :func:`gc.freeze` function allows freezing all objects tracked by"
" the garbage collector and excluding them from future collections. This "
"can be used before a POSIX ``fork()`` call to make the GC copy-on-write "
"friendly or to speed up collection.  The new :func:`gc.unfreeze` "
"functions reverses this operation.  Additionally, "
":func:`gc.get_freeze_count` can be used to obtain the number of frozen "
"objects. (Contributed by Li Zekun in :issue:`31558`.)"
msgstr ""
"새로운 :func:`gc.freeze` 함수는 가비지 수집기가 추적 한 모든 객체를 고정하고 미래의 수집에서 그것들을 제외합니다. "
"POSIX ``fork()`` 호출 전에 사용하면 GC를 쓰기 전에 복사(copy-on-write) 친화적으로 만들고 수집 속도를 "
"높일 수 있습니다. 새로운 :func:`gc.unfreeze` 함수는 이 작업을 되돌립니다. 또한, "
":func:`gc.get_freeze_count` 를 사용하여 고정된 객체의 수를 얻을 수 있습니다. (Contributed by "
"Li Zekun in :issue:`31558`.)"

#: ../Doc/whatsnew/3.7.rst:936
msgid "hmac"
msgstr "hmac"

#: ../Doc/whatsnew/3.7.rst:938
msgid ""
"The :mod:`hmac` module now has an optimized one-shot :func:`~hmac.digest`"
" function, which is up to three times faster than :func:`~hmac.HMAC`. "
"(Contributed by Christian Heimes in :issue:`32433`.)"
msgstr ""
":mod:`hmac` 모듈은 이제 최적화된 단일 호출 :func:`~hmac.digest` 함수를 제공합니다. "
":func:`~hmac.HMAC` 보다 최대 3배 빠릅니다. (Contributed by Christian Heimes in "
":issue:`32433`.)"

#: ../Doc/whatsnew/3.7.rst:944
msgid "http.client"
msgstr "http.client"

#: ../Doc/whatsnew/3.7.rst:946
msgid ""
":class:`~http.client.HTTPConnection` and "
":class:`~http.client.HTTPSConnection` now support the new *blocksize* "
"argument for improved upload throughput. (Contributed by Nir Soffer in "
":issue:`31945`.)"
msgstr ""
":class:`~http.client.HTTPConnection` 과 "
":class:`~http.client.HTTPSConnection` 은 이제 향상된 업로드 처리량을 위해 새로운 "
"*blocksize* 인자를 지원합니다. (Contributed by Nir Soffer in :issue:`31945`.)"

#: ../Doc/whatsnew/3.7.rst:952
msgid "http.server"
msgstr "http.server"

#: ../Doc/whatsnew/3.7.rst:954
msgid ""
":class:`~http.server.SimpleHTTPRequestHandler` now supports the HTTP "
"``If-Modified-Since`` header.  The server returns the 304 response status"
" if the target file was not modified after the time specified in the "
"header. (Contributed by Pierre Quentel in :issue:`29654`.)"
msgstr ""
":class:`~http.server.SimpleHTTPRequestHandler` 는 이제 HTTP ``If-Modified-"
"Since`` 헤더를 지원합니다. 헤더에 지정된 시간 이후에 대상 파일이 수정되지 않았으면 서버는 304 응답 상태를 돌려줍니다. "
"(Contributed by Pierre Quentel in :issue:`29654`.)"

#: ../Doc/whatsnew/3.7.rst:959
msgid ""
":class:`~http.server.SimpleHTTPRequestHandler` accepts the new "
"*directory* argument, in addition to the new ``--directory`` command line"
" argument. With this parameter, the server serves the specified "
"directory, by default it uses the current working directory. (Contributed"
" by Stéphane Wirtel and Julien Palard in :issue:`28707`.)"
msgstr ""
":class:`~http.server.SimpleHTTPRequestHandler` 는 새로운 ``--directory`` 명령행 "
"인자와 더불어 새로운 *directory* 인자를 받아들입니다. 이 매개 변수를 사용하면 서버는 지정된 디렉터리를 제공하는데, "
"기본적으로는 현재 작업 디렉터리를 사용합니다. (Contributed by Stéphane Wirtel and Julien "
"Palard in :issue:`28707`.)"

#: ../Doc/whatsnew/3.7.rst:965
msgid ""
"The new :class:`ThreadingHTTPServer <http.server.ThreadingHTTPServer>` "
"class uses threads to handle requests using "
":class:`~socketserver.ThreadingMixin`. It is used when ``http.server`` is"
" run with ``-m``. (Contributed by Julien Palard in :issue:`31639`.)"
msgstr ""
"새로운 :class:`ThreadingHTTPServer <http.server.ThreadingHTTPServer>` 클래스는 "
":class:`~socketserver.ThreadingMixin` 을 사용하여 요청을 처리하는 데 스레드를 사용합니다. "
"``http.server`` 가 ``-m`` 로 실행될 때 사용됩니다. (Contributed by Julien Palard in "
":issue:`31639`.)"

#: ../Doc/whatsnew/3.7.rst:972
msgid "idlelib and IDLE"
msgstr "idlelib 및 IDLE"

#: ../Doc/whatsnew/3.7.rst:974
msgid ""
"Multiple fixes for autocompletion. (Contributed by Louie Lu in "
":issue:`15786`.)"
msgstr "자동 완성을 위한 여러 수정. (Contributed by Louie Lu in :issue:`15786`.)"

#: ../Doc/whatsnew/3.7.rst:976
msgid ""
"Module Browser (on the File menu, formerly called Class Browser), now "
"displays nested functions and classes in addition to top-level functions "
"and classes. (Contributed by Guilherme Polo, Cheryl Sabella, and Terry "
"Jan Reedy in :issue:`1612262`.)"
msgstr ""
"Module Browser (File 메뉴에 있는데, 예전에는 Class Browser라고 불렸습니다)는 이제 최상위 함수와 클래스"
" 외에도 중첩된 함수와 클래스도 표시합니다. (Contributed by Guilherme Polo, Cheryl Sabella, "
"and Terry Jan Reedy in :issue:`1612262`.)"

#: ../Doc/whatsnew/3.7.rst:982
msgid ""
"The Settings dialog (Options, Configure IDLE) has been partly rewritten "
"to improve both appearance and function. (Contributed by Cheryl Sabella "
"and Terry Jan Reedy in multiple issues.)"
msgstr ""
"설정 대화 상자(Options, Configure IDLE)는 모양과 기능을 향상하기 위해 부분적으로 다시 작성되었습니다. "
"(Contributed by Cheryl Sabella and Terry Jan Reedy in multiple issues.)"

#: ../Doc/whatsnew/3.7.rst:986
msgid ""
"The font sample now includes a selection of non-Latin characters so that "
"users can better see the effect of selecting a particular font. "
"(Contributed by Terry Jan Reedy in :issue:`13802`.) The sample can be "
"edited to include other characters. (Contributed by Serhiy Storchaka in "
":issue:`31860`.)"
msgstr ""
"이제 글꼴 표본에 라틴 문자 이외의 문자가 포함되어 사용자가 특정 글꼴을 선택했을 때의 효과를 더 잘 볼 수 있습니다. "
"(Contributed by Terry Jan Reedy in :issue:`13802`.) 표본을 편집하여 다른 문자를 포함할"
" 수 있습니다. (Contributed by Serhiy Storchaka in :issue:`31860`.)"

#: ../Doc/whatsnew/3.7.rst:992
msgid ""
"The IDLE features formerly implemented as extensions have been "
"reimplemented as normal features.  Their settings have been moved from "
"the Extensions tab to other dialog tabs. (Contributed by Charles "
"Wohlganger and Terry Jan Reedy in :issue:`27099`.)"
msgstr ""
"이전에는 확장 기능으로 구현된 IDLE 기능이 일반 기능으로 다시 구현되었습니다. 이것들의 설정을 Extensions 탭에서 다른 "
"대화 상자 탭으로 옮겼습니다. (Contributed by Charles Wohlganger and Terry Jan Reedy "
"in :issue:`27099`.)"

#: ../Doc/whatsnew/3.7.rst:997
msgid ""
"Editor code context option revised.  Box displays all context lines up to"
" maxlines.  Clicking on a context line jumps the editor to that line.  "
"Context colors for custom themes is added to Highlights tab of Settings "
"dialog. (Contributed by Cheryl Sabella and Terry Jan Reedy in "
":issue:`33642`, :issue:`33768`, and :issue:`33679`,"
msgstr ""
"편집기 코드 컨텍스트 옵션이 개정되었습니다. 상자는 최대 행 수까지 모든 컨텍스트 행을 표시합니다. 컨텍스트 행을 클릭하면 편집기가 해당"
" 행으로 이동합니다. 사용자 정의 테마의 컨텍스트 색상이 설정 대화 상자의 강조 표시 탭에 추가되었습니다. (Contributed by "
"Cheryl Sabella and Terry Jan Reedy in :issue:`33642`, :issue:`33768`, and "
":issue:`33679`)"

#: ../Doc/whatsnew/3.7.rst:1003
msgid ""
"On Windows, a new API call tells Windows that tk scales for DPI. On "
"Windows 8.1+ or 10, with DPI compatibility properties of the Python "
"binary unchanged, and a monitor resolution greater than 96 DPI, this "
"should make text and lines sharper.  It should otherwise have no effect. "
"(Contributed by Terry Jan Reedy in :issue:`33656`)."
msgstr ""
"윈도우에서, 새로운 API 호출이 tk가 DPI에 맞게 조정된다는 것을 윈도우에 알려줍니다. Windows 8.1+ 또는 10에서, "
"파이썬 바이너리의 DPI 호환성 속성을 변경하지 않고도, 96DPI보다 큰 모니터 해상도를 사용하면, 텍스트와 선이 더 선명해집니다. "
"그렇지 않으면 아무런 효과도 일으키지 않습니다. (Contributed by Terry Jan Reedy in "
":issue:`33656`)."

#: ../Doc/whatsnew/3.7.rst:1009
msgid "The changes above have been backported to 3.6 maintenance releases."
msgstr "위의 변경 사항은 3.6 유지 보수 배포로 역 이식되었습니다."

#: ../Doc/whatsnew/3.7.rst:1013 ../Doc/whatsnew/3.7.rst:1975
msgid "importlib"
msgstr "importlib"

#: ../Doc/whatsnew/3.7.rst:1015
msgid ""
"The :class:`importlib.abc.ResourceReader` ABC was introduced to support "
"the loading of resources from packages.  See also "
":ref:`whatsnew37_importlib_resources`. (Contributed by Barry Warsaw, "
"Brett Cannon in :issue:`32248`.)"
msgstr ""
":class:`importlib.abc.ResourceReader` ABC가 도입되어 패키지에서 리소스를 로딩하는 것을 지원합니다."
" :ref:`whatsnew37_importlib_resources` 를 참조하세요. (Contributed by Barry "
"Warsaw, Brett Cannon in :issue:`32248`.)"

#: ../Doc/whatsnew/3.7.rst:1020
msgid ""
":func:`importlib.reload` now raises :exc:`ModuleNotFoundError` if the "
"module lacks a spec. (Contributed by Garvit Khatri in :issue:`29851`.)"
msgstr ""
":func:`importlib.reload` 는 이제 모듈에 스펙이 없는 경우 :exc:`ModuleNotFoundError` 를 "
"발생시킵니다. (Contributed by Garvit Khatri in :issue:`29851`.)"

#: ../Doc/whatsnew/3.7.rst:1024
msgid ""
":func:`importlib.find_spec` now raises ``ModuleNotFoundError`` instead of"
" :exc:`AttributeError` if the specified parent module is not a package "
"(i.e. lacks a ``__path__`` attribute). (Contributed by Milan Oberkirch in"
" :issue:`30436`.)"
msgstr ""
":func:`importlib.find_spec`\\은 이제 지정된 부모 모듈이 패키지가 아닌 경우 (즉 ``__path__`` "
"어트리뷰트가 없는 경우) :exc:`AttributeError` 대신에 ``ModuleNotFoundError`` 를 발생시킵니다."
" (Contributed by Milan Oberkirch in :issue:`30436`.)"

#: ../Doc/whatsnew/3.7.rst:1029
msgid ""
"The new :func:`importlib.source_hash` can be used to compute the hash of "
"the passed source.  A :ref:`hash-based .pyc file <whatsnew37-pep552>` "
"embeds the value returned by this function."
msgstr ""
"새로운 :func:`importlib.source_hash` 는 전달 된 소스의 해시를 계산하는 데 사용될 수 있습니다. "
":ref:`해시 기반 .pyc 파일 <whatsnew37-pep552>` 은 함수가 반환하는 값을 포함합니다."

#: ../Doc/whatsnew/3.7.rst:1035
msgid "io"
msgstr "io"

#: ../Doc/whatsnew/3.7.rst:1037
msgid ""
"The new :meth:`TextIOWrapper.reconfigure() "
"<io.TextIOWrapper.reconfigure>` method can be used to reconfigure the "
"text stream with the new settings. (Contributed by Antoine Pitrou in "
":issue:`30526` and INADA Naoki in :issue:`15216`.)"
msgstr ""
"새로운 :meth:`TextIOWrapper.reconfigure() <io.TextIOWrapper.reconfigure>` "
"메서드를 사용하여 텍스트 스트림을 새로운 설정으로 재구성 할 수 있습니다. (Contributed by Antoine Pitrou "
"in :issue:`30526` and INADA Naoki in :issue:`15216`.)"

#: ../Doc/whatsnew/3.7.rst:1044
msgid "ipaddress"
msgstr "ipaddress"

#: ../Doc/whatsnew/3.7.rst:1046
msgid ""
"The new ``subnet_of()`` and ``supernet_of()`` methods of "
":class:`ipaddress.IPv6Network` and :class:`ipaddress.IPv4Network` can be "
"used for network containment tests. (Contributed by Michel Albert and "
"Cheryl Sabella in :issue:`20825`.)"
msgstr ""
":class:`ipaddress.IPv6Network` 와 :class:`ipaddress.IPv4Network` 의 새로운 "
"``subnet_of()`` 와 ``supernet_of()`` 메서드는 네트워크 포함 테스트에 사용될 수 있습니다. "
"(Contributed by Michel Albert and Cheryl Sabella in :issue:`20825`.)"

#: ../Doc/whatsnew/3.7.rst:1053
msgid "itertools"
msgstr "itertools"

#: ../Doc/whatsnew/3.7.rst:1055
msgid ""
":func:`itertools.islice` now accepts :meth:`integer-like objects "
"<object.__index__>` as start, stop, and slice arguments. (Contributed by "
"Will Roberts in :issue:`30537`.)"
msgstr ""
":func:`itertools.islice` 는 start, stop, step 인자로 :meth:`정수류 객체 "
"<object.__index__>` 를 받아들입니다. (Contributed by Will Roberts in "
":issue:`30537`.)"

#: ../Doc/whatsnew/3.7.rst:1062 ../Doc/whatsnew/3.7.rst:1993
msgid "locale"
msgstr "locale"

#: ../Doc/whatsnew/3.7.rst:1064
msgid ""
"The new *monetary* argument to :func:`locale.format_string` can be used "
"to make the conversion use monetary thousands separators and grouping "
"strings.  (Contributed by Garvit in :issue:`10379`.)"
msgstr ""
":func:`locale.format_string` 의 새로운 *monetary* 인자는 변환에 화폐 천 단위 분리자 및 그룹화 "
"문자열을 사용하도록 만듭니다. (Contributed by Garvit in :issue:`10379`.)"

#: ../Doc/whatsnew/3.7.rst:1068
msgid ""
"The :func:`locale.getpreferredencoding` function now always returns "
"``'UTF-8'`` on Android or when in the :ref:`forced UTF-8 mode "
"<whatsnew37-pep540>`."
msgstr ""
":func:`locale.getpreferredencoding` 함수는 이제 안드로이드나 :ref:`강제 UTF-8 모드 "
"<whatsnew37-pep540>` 일 때 항상 ``'UTF-8'`` 을 반환합니다."

#: ../Doc/whatsnew/3.7.rst:1073
msgid "logging"
msgstr "logging"

#: ../Doc/whatsnew/3.7.rst:1075
msgid ""
":class:`~logging.Logger` instances can now be pickled. (Contributed by "
"Vinay Sajip in :issue:`30520`.)"
msgstr ""
":class:`~logging.Logger` 인스턴스는 이제 피클(pickle) 할 수 있습니다. (Contributed by "
"Vinay Sajip in :issue:`30520`.)"

#: ../Doc/whatsnew/3.7.rst:1078
msgid ""
"The new :meth:`StreamHandler.setStream() "
"<logging.StreamHandler.setStream>` method can be used to replace the "
"logger stream after handler creation. (Contributed by Vinay Sajip in "
":issue:`30522`.)"
msgstr ""
"새로운 :meth:`StreamHandler.setStream() <logging.StreamHandler.setStream>` "
"메서드는 처리기 생성 후 로거 스트림을 대체하는 데 사용될 수 있습니다. (Contributed by Vinay Sajip in "
":issue:`30522`.)"

#: ../Doc/whatsnew/3.7.rst:1082
msgid ""
"It is now possible to specify keyword arguments to handler constructors "
"in configuration passed to :func:`logging.config.fileConfig`. "
"(Contributed by Preston Landers in :issue:`31080`.)"
msgstr ""
"이제 :func:`logging.config.fileConfig` 에 전달된 구성에서 처리기 생성자에 대한 키워드 인자를 지정할 수"
" 있습니다. (Contributed by Preston Landers in :issue:`31080`.)"

#: ../Doc/whatsnew/3.7.rst:1088
msgid "math"
msgstr "math"

#: ../Doc/whatsnew/3.7.rst:1090
msgid ""
"The new :func:`math.remainder` function implements the IEEE 754-style "
"remainder operation.  (Contributed by Mark Dickinson in :issue:`29962`.)"
msgstr ""
"새로운 :func:`math.remainder` 함수는 IEEE 754 스타일의 나머지 연산을 구현합니다. (Contributed "
"by Mark Dickinson in :issue:`29962`.)"

#: ../Doc/whatsnew/3.7.rst:1095
msgid "mimetypes"
msgstr "mimetypes"

#: ../Doc/whatsnew/3.7.rst:1097
msgid ""
"The MIME type of .bmp has been changed from ``'image/x-ms-bmp'`` to "
"``'image/bmp'``. (Contributed by Nitish Chandra in :issue:`22589`.)"
msgstr ""
".bmp의 MIME 형이 ``'image/x-ms-bmp'`` 에서 ``'image/bmp'`` 로 변경되었습니다. "
"(Contributed by Nitish Chandra in :issue:`22589`.)"

#: ../Doc/whatsnew/3.7.rst:1103
msgid "msilib"
msgstr "msilib"

#: ../Doc/whatsnew/3.7.rst:1105
msgid ""
"The new :meth:`Database.Close() <msilib.Database.Close>` method can be "
"used to close the :abbr:`MSI` database. (Contributed by Berker Peksag in "
":issue:`20486`.)"
msgstr ""
"새로운 :meth:`Database.Close() <msilib.Database.Close>` 메서드를 사용하여 "
":abbr:`MSI` 데이터베이스를 닫을 수 있습니다. (Contributed by Berker Peksag in "
":issue:`20486`.)"

#: ../Doc/whatsnew/3.7.rst:1111
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../Doc/whatsnew/3.7.rst:1113
msgid ""
"The new :meth:`Process.close() <multiprocessing.Process.close>` method "
"explicitly closes the process object and releases all resources "
"associated with it.  :exc:`ValueError` is raised if the underlying "
"process is still running. (Contributed by Antoine Pitrou in "
":issue:`30596`.)"
msgstr ""
"새로운 :meth:`Process.close() <multiprocessing.Process.close>` 메서드는 명시적으로 "
"프로세스 객체를 닫고 그와 연관된 모든 자원을 해제합니다. 하부 프로세스가 여전히 실행 중이면 :exc:`ValueError` 를 "
"일으킵니다. (Contributed by Antoine Pitrou in :issue:`30596`.)"

#: ../Doc/whatsnew/3.7.rst:1119
msgid ""
"The new :meth:`Process.kill() <multiprocessing.Process.kill>` method can "
"be used to terminate the process using the :data:`SIGKILL` signal on "
"Unix. (Contributed by Vitor Pereira in :issue:`30794`.)"
msgstr ""
"새로운 :meth:`Process.kill() <multiprocessing.Process.kill>` 메서드는 유닉스에서 "
":data:`SIGKILL` 시그널을 사용하여 프로세스를 종료시키는데 사용될 수 있습니다. (Contributed by Vitor "
"Pereira in :issue:`30794`.)"

#: ../Doc/whatsnew/3.7.rst:1123
msgid ""
"Non-daemonic threads created by :class:`~multiprocessing.Process` are now"
" joined on process exit. (Contributed by Antoine Pitrou in "
":issue:`18966`.)"
msgstr ""
":class:`~multiprocessing.Process` 에 의해 생성된 데몬이 아닌 스레드는 이제 프로세스 종료 시에 "
"조인(join)됩니다. (Contributed by Antoine Pitrou in :issue:`18966`.)"

#: ../Doc/whatsnew/3.7.rst:1129
msgid "os"
msgstr "os"

#: ../Doc/whatsnew/3.7.rst:1131
msgid ""
":func:`os.fwalk` now accepts the *path* argument as :class:`bytes`. "
"(Contributed by Serhiy Storchaka in :issue:`28682`.)"
msgstr ""
":func:`os.fwalk` 는 이제 *경로* 인자로 :class:`bytes` 도 받아들입니다. (Contributed by "
"Serhiy Storchaka in :issue:`28682`.)"

#: ../Doc/whatsnew/3.7.rst:1134
msgid ""
":func:`os.scandir` gained support for :ref:`file descriptors <path_fd>`. "
"(Contributed by Serhiy Storchaka in :issue:`25996`.)"
msgstr ""
":func:`os.scandir` 은 :ref:`파일 기술자 <path_fd>` 에 대한 지원을 얻었습니다. (Contributed"
" by Serhiy Storchaka in :issue:`25996`.)"

#: ../Doc/whatsnew/3.7.rst:1137
msgid ""
"The new :func:`~os.register_at_fork` function allows registering Python "
"callbacks to be executed at process fork. (Contributed by Antoine Pitrou "
"in :issue:`16500`.)"
msgstr ""
"새로운 :func:`~os.register_at_fork` 함수는 프로세스 포크 때 실행될 파이썬 콜백을 등록 할 수 있게 합니다."
" (Contributed by Antoine Pitrou in :issue:`16500`.)"

#: ../Doc/whatsnew/3.7.rst:1141
msgid ""
"Added :func:`os.preadv` (combine the functionality of :func:`os.readv` "
"and :func:`os.pread`) and :func:`os.pwritev` functions (combine the "
"functionality of :func:`os.writev` and :func:`os.pwrite`). (Contributed "
"by Pablo Galindo in :issue:`31368`.)"
msgstr ""
":func:`os.preadv` (:func:`os.readv` 와 :func:`os.pread` 의 기능을 결합한 것)와 "
":func:`os.pwritev` 함수 (:func:`os.writev` 와 :func:`os.pwrite` 의 기능을 결합한 것)를 "
"추가했습니다. (Contributed by Pablo Galindo in :issue:`31368`.)"

#: ../Doc/whatsnew/3.7.rst:1146
msgid ""
"The mode argument of :func:`os.makedirs` no longer affects the file "
"permission bits of newly-created intermediate-level directories. "
"(Contributed by Serhiy Storchaka in :issue:`19930`.)"
msgstr ""
":func:`os.makedirs` 의 mode 인자는 더는 새로 생성된 중간 수준 디렉터리의 파일 사용 권한 비트에 영향을 미치지"
" 않습니다. (Contributed by Serhiy Storchaka in :issue:`19930`.)"

#: ../Doc/whatsnew/3.7.rst:1150
msgid ""
":func:`os.dup2` now returns the new file descriptor.  Previously, "
"``None`` was always returned. (Contributed by Benjamin Peterson in "
":issue:`32441`.)"
msgstr ""
":func:`os.dup2` 는 이제 새로운 파일 기술자를 반환합니다. 이전에는 항상 ``None`` 을 반환했습니다. "
"(Contributed by Benjamin Peterson in :issue:`32441`.)"

#: ../Doc/whatsnew/3.7.rst:1154
msgid ""
"The structure returned by :func:`os.stat` now contains the "
":attr:`~os.stat_result.st_fstype` attribute on Solaris and its "
"derivatives. (Contributed by Jesús Cea Avión in :issue:`32659`.)"
msgstr ""
":func:`os.stat` 에 의해 반환된 구조체는 이제 솔라리스와 그 파생물에서 "
":attr:`~os.stat_result.st_fstype` 어트리뷰트를 포함합니다. (Contributed by Jesús Cea"
" Avión in :issue:`32659`.)"

#: ../Doc/whatsnew/3.7.rst:1160
msgid "pathlib"
msgstr "pathlib"

#: ../Doc/whatsnew/3.7.rst:1162
msgid ""
"The new :meth:`Path.is_mount() <pathlib.Path.is_mount>` method is now "
"available on POSIX systems and can be used to determine whether a path is"
" a mount point. (Contributed by Cooper Ry Lees in :issue:`30897`.)"
msgstr ""
"새로운 :meth:`Path.is_mount() <pathlib.Path.is_mount>` 메서드는 이제 POSIX 시스템에서 "
"사용할 수 있으며 경로가 마운트 지점인지 아닌지를 결정하는 데 사용할 수 있습니다. (Contributed by Cooper Ry "
"Lees in :issue:`30897`.)"

#: ../Doc/whatsnew/3.7.rst:1168
msgid "pdb"
msgstr "pdb"

#: ../Doc/whatsnew/3.7.rst:1170
msgid ""
":func:`pdb.set_trace` now takes an optional *header* keyword-only "
"argument.  If given, it is printed to the console just before debugging "
"begins.  (Contributed by Barry Warsaw in :issue:`31389`.)"
msgstr ""
":func:`pdb.set_trace` 는 이제 선택적 *header* 키워드 전용 인자를 취합니다. 주어진 경우, 디버깅이 "
"시작되기 바로 전에 콘솔에 출력됩니다. (Contributed by Barry Warsaw in :issue:`31389`.)"

#: ../Doc/whatsnew/3.7.rst:1174
msgid ""
":mod:`pdb` command line now accepts ``-m module_name`` as an alternative "
"to script file.  (Contributed by Mario Corchero in :issue:`32206`.)"
msgstr ""
":mod:`pdb` 명령행은 이제 스크립트 파일의 대안으로 ``-m module_name`` 을 받아들입니다. "
"(Contributed by Mario Corchero in :issue:`32206`.)"

#: ../Doc/whatsnew/3.7.rst:1179
msgid "py_compile"
msgstr "py_compile"

#: ../Doc/whatsnew/3.7.rst:1181
msgid ""
":func:`py_compile.compile` -- and by extension, :mod:`compileall` -- now "
"respects the :envvar:`SOURCE_DATE_EPOCH` environment variable by "
"unconditionally creating ``.pyc`` files for hash-based validation. This "
"allows for guaranteeing `reproducible builds <https://reproducible-"
"builds.org/>`_ of ``.pyc`` files when they are created eagerly. "
"(Contributed by Bernhard M. Wiedemann in :issue:`29708`.)"
msgstr ""
":func:`py_compile.compile` 은 -- 그리고 자연히 :mod:`compileall` 도 -- 이제 "
":envvar:`SOURCE_DATE_EPOCH` 환경 변수가 설정되면 해시 기반 유효성 검사를 위해 ``.pyc`` 파일을 무조건"
" 생성합니다. 이것은 ``.pyc`` 파일의 `재현 가능한 빌드 <https://reproducible-builds.org/>`_ "
"를 보장할 수 있도록 한다. (Contributed by Bernhard M. Wiedemann in :issue:`29708`.)"

#: ../Doc/whatsnew/3.7.rst:1191
msgid "pydoc"
msgstr "pydoc"

#: ../Doc/whatsnew/3.7.rst:1193
msgid ""
"The pydoc server can now bind to an arbitrary hostname specified by the "
"new ``-n`` command-line argument. (Contributed by Feanil Patel in "
":issue:`31128`.)"
msgstr ""
"pydoc 서버는 이제 새로운 ``-n`` 명령행 인자로 지정된 임의의 호스트 이름에 바인드 할 수 있습니다. "
"(Contributed by Feanil Patel in :issue:`31128`.)"

#: ../Doc/whatsnew/3.7.rst:1199
msgid "queue"
msgstr "queue"

#: ../Doc/whatsnew/3.7.rst:1201
msgid ""
"The new :class:`~queue.SimpleQueue` class is an unbounded :abbr:`FIFO` "
"queue. (Contributed by Antoine Pitrou in :issue:`14976`.)"
msgstr ""
"새로운 :class:`~queue.SimpleQueue` 클래스는 무제한 :abbr:`FIFO` 큐입니다. (Contributed "
"by Antoine Pitrou in :issue:`14976`.)"

#: ../Doc/whatsnew/3.7.rst:1206
msgid "re"
msgstr "re"

#: ../Doc/whatsnew/3.7.rst:1208
msgid ""
"The flags :const:`re.ASCII`, :const:`re.LOCALE` and :const:`re.UNICODE` "
"can be set within the scope of a group. (Contributed by Serhiy Storchaka "
"in :issue:`31690`.)"
msgstr ""
"플래그 :const:`re.ASCII`, :const:`re.LOCALE` 및 :const:`re.UNICODE` 를 그룹의 스코프"
" 내에서 설정할 수 있습니다. (Contributed by Serhiy Storchaka in :issue:`31690`.)"

#: ../Doc/whatsnew/3.7.rst:1212
msgid ""
":func:`re.split` now supports splitting on a pattern like ``r'\\b'``, "
"``'^$'`` or ``(?=-)`` that matches an empty string. (Contributed by "
"Serhiy Storchaka in :issue:`25054`.)"
msgstr ""
":func:`re.split` 는 이제 빈 문자열과 일치하는 ``r'\\b'``, ``'^$'`` 또는 ``(?=-)`` 와 같은 "
"패턴으로 나누는 것을 지원합니다. (Contributed by Serhiy Storchaka in :issue:`25054`.)"

#: ../Doc/whatsnew/3.7.rst:1216
msgid ""
"Regular expressions compiled with the :const:`re.LOCALE` flag no longer "
"depend on the locale at compile time.  Locale settings are applied only "
"when the compiled regular expression is used. (Contributed by Serhiy "
"Storchaka in :issue:`30215`.)"
msgstr ""
":const:`re.LOCALE` 플래그로 컴파일된 정규식은 더는 컴파일 시간의 로케일에 의존하지 않습니다. 로케일 설정은 컴파일된"
" 정규식이 사용될 때 적용됩니다. (Contributed by Serhiy Storchaka in :issue:`30215`.)"

#: ../Doc/whatsnew/3.7.rst:1221
msgid ""
":exc:`FutureWarning` is now emitted if a regular expression contains "
"character set constructs that will change semantically in the future, "
"such as nested sets and set operations. (Contributed by Serhiy Storchaka "
"in :issue:`30349`.)"
msgstr ""
"정규식이 앞으로 의미적인 변경이 있을 문자 집합 구조물(가령 중첩된 집합과 집합 연산)을 포함하면 이제 "
":exc:`FutureWarning` 을 줍니다. (Contributed by Serhiy Storchaka in "
":issue:`30349`.)"

#: ../Doc/whatsnew/3.7.rst:1226
msgid ""
"Compiled regular expression and match objects can now be copied using "
":func:`copy.copy` and :func:`copy.deepcopy`. (Contributed by Serhiy "
"Storchaka in :issue:`10076`.)"
msgstr ""
":func:`copy.copy` 와 :func:`copy.deepcopy` 를 사용하여 컴파일된 정규식과 매치 객체를 복사 할 수 "
"있습니다. (Contributed by Serhiy Storchaka in :issue:`10076`.)"

#: ../Doc/whatsnew/3.7.rst:1232
msgid "signal"
msgstr "signal"

#: ../Doc/whatsnew/3.7.rst:1234
msgid ""
"The new *warn_on_full_buffer* argument to the "
":func:`signal.set_wakeup_fd` function makes it possible to specify "
"whether Python prints a warning on stderr when the wakeup buffer "
"overflows. (Contributed by Nathaniel J. Smith in :issue:`30050`.)"
msgstr ""
":func:`signal.set_wakeup_fd` 함수의 새로운 *warn_on_full_buffer* 인자는 웨이크업 버퍼 "
"오버플로가 발생했을 때 파이썬이 표준 에러로 경고를 출력할지를 지정할 수 있게 합니다. (Contributed by "
"Nathaniel J. Smith in :issue:`30050`.)"

#: ../Doc/whatsnew/3.7.rst:1241 ../Doc/whatsnew/3.7.rst:2016
msgid "socket"
msgstr "socket"

#: ../Doc/whatsnew/3.7.rst:1243
msgid ""
"The new :func:`socket.getblocking() <socket.socket.getblocking>` method "
"returns ``True`` if the socket is in blocking mode and ``False`` "
"otherwise. (Contributed by Yury Selivanov in :issue:`32373`.)"
msgstr ""
"새로운 :func:`socket.getblocking() <socket.socket.getblocking>` 메서드는 소켓이 블로킹"
" 모드에 있으면 ``True`` 를 반환하고, 그렇지 않으면 ``False`` 를 반환합니다. (Contributed by Yury"
" Selivanov in :issue:`32373`.)"

#: ../Doc/whatsnew/3.7.rst:1247
msgid ""
"The new :func:`socket.close` function closes the passed socket file "
"descriptor. This function should be used instead of :func:`os.close` for "
"better compatibility across platforms. (Contributed by Christian Heimes "
"in :issue:`32454`.)"
msgstr ""
"새로운 :func:`socket.close` 함수는 전달된 소켓 파일 기술자를 닫습니다. 이 함수는 플랫폼 간 호환성을 높이기 위해"
" :func:`os.close` 대신 사용되어야 합니다. (Contributed by Christian Heimes in "
":issue:`32454`.)"

#: ../Doc/whatsnew/3.7.rst:1252
msgid ""
"The :mod:`socket` module now exposes the :data:`socket.TCP_CONGESTION` "
"(Linux 2.6.13), :data:`socket.TCP_USER_TIMEOUT` (Linux 2.6.37), and "
":data:`socket.TCP_NOTSENT_LOWAT` (Linux 3.12) constants. (Contributed by "
"Omar Sandoval in :issue:`26273` and Nathaniel J. Smith in "
":issue:`29728`.)"
msgstr ""
":mod:`socket` 모듈은 이제 :data:`socket.TCP_CONGESTION` (리눅스 2.6.13), "
":data:`socket.TCP_USER_TIMEOUT` (Linux 2.6.37) 그리고 "
":data:`socket.TCP_NOTSENT_LOWAT` (리눅스 3.12) 상수를 노출합니다. (Contributed by "
"Omar Sandoval in :issue:`26273` and Nathaniel J. Smith in "
":issue:`29728`.)"

#: ../Doc/whatsnew/3.7.rst:1258
msgid ""
"Support for :data:`socket.AF_VSOCK` sockets has been added to allow "
"communication between virtual machines and their hosts. (Contributed by "
"Cathy Avery in :issue:`27584`.)"
msgstr ""
"가상 기계와 호스트 간의 통신을 허용하기 위해 :data:`socket.AF_VSOCK` 소켓 지원이 추가되었습니다. "
"(Contributed by Cathy Avery in :issue:`27584`.)"

#: ../Doc/whatsnew/3.7.rst:1262
msgid ""
"Sockets now auto-detect family, type and protocol from file descriptor by"
" default. (Contributed by Christian Heimes in :issue:`28134`.)"
msgstr ""
"소켓은 이제 기본적으로 파일 기술자에서 패밀리, 형 및 프로토콜을 자동 감지합니다. (Contributed by Christian "
"Heimes in :issue:`28134`.)"

#: ../Doc/whatsnew/3.7.rst:1268
msgid "socketserver"
msgstr "socketserver"

#: ../Doc/whatsnew/3.7.rst:1270
msgid ""
":meth:`socketserver.ThreadingMixIn.server_close` now waits until all non-"
"daemon threads complete. :meth:`socketserver.ForkingMixIn.server_close` "
"now waits until all child processes complete."
msgstr ""
":meth:`socketserver.ThreadingMixIn.server_close` 는 이제 모든 데몬이 아닌 스레드가 완료될 "
"때까지 대기합니다. :meth:`socketserver.ForkingMixIn.server_close` 는 모든 자식 프로세스가 "
"완료될 때까지 대기합니다."

#: ../Doc/whatsnew/3.7.rst:1274
msgid ""
"Add a new :attr:`socketserver.ForkingMixIn.block_on_close` class "
"attribute to :class:`socketserver.ForkingMixIn` and "
":class:`socketserver.ThreadingMixIn` classes. Set the class attribute to "
"``False`` to get the pre-3.7 behaviour."
msgstr ""
"새로운 :attr:`socketserver.ForkingMixIn.block_on_close` 클래스 어트리뷰트를 "
":class:`socketserver.ForkingMixIn` 과 :class:`socketserver.ThreadingMixIn`"
" 클래스에 추가했습니다. 3.7 이전의 동작을 얻으려면 클래스 어트리뷰트를 ``False`` 로 설정하십시오."

#: ../Doc/whatsnew/3.7.rst:1280
msgid "sqlite3"
msgstr "sqlite3"

#: ../Doc/whatsnew/3.7.rst:1282
msgid ""
":class:`sqlite3.Connection` now exposes the "
":meth:`~sqlite3.Connection.backup` method when the underlying SQLite "
"library is at version 3.6.11 or higher. (Contributed by Lele Gaifax in "
":issue:`27645`.)"
msgstr ""
":class:`sqlite3.Connection` 은 이제 하부 SQLite 라이브러리의 버전이 3.6.11 이상일 때 "
":meth:`~sqlite3.Connection.backup` 메서드를 노출합니다. (Contributed by Lele "
"Gaifax in :issue:`27645`.)"

#: ../Doc/whatsnew/3.7.rst:1286
msgid ""
"The *database* argument of :func:`sqlite3.connect` now accepts any :term"
":`path-like object`, instead of just a string. (Contributed by Anders "
"Lorentsen in :issue:`31843`.)"
msgstr ""
":func:`sqlite3.connect` 의 *database* 인자는 이제 문자열뿐만 아니라 모든 :term:`경로류 객체 "
"<path-like object>` 를 받아들입니다. (Contributed by Anders Lorentsen in "
":issue:`31843`.)"

#: ../Doc/whatsnew/3.7.rst:1292 ../Doc/whatsnew/3.7.rst:2025
msgid "ssl"
msgstr "ssl"

#: ../Doc/whatsnew/3.7.rst:1294
msgid ""
"The :mod:`ssl` module now uses OpenSSL's builtin API instead of "
":func:`~ssl.match_hostname` to check a host name or an IP address.  "
"Values are validated during TLS handshake.  Any certificate validation "
"error including failing the host name check now raises "
":exc:`~ssl.SSLCertVerificationError` and aborts the handshake with a "
"proper TLS Alert message.  The new exception contains additional "
"information. Host name validation can be customized with "
":attr:`SSLContext.host_flags <ssl.SSLContext.host_flags>`. (Contributed "
"by Christian Heimes in :issue:`31399`.)"
msgstr ""
":mod:`ssl` 모듈은 이제 :func:`~ssl.match_hostname` 대신 OpenSSL의 내장 API를 사용하여 "
"호스트 이름이나 IP 주소를 확인합니다. 값은 TLS 핸드 셰이크 중에 유효성이 검사됩니다. 호스트 이름 검사 실패와 같은 인증서 "
"유효성 검사 오류가 발생하면 이제 :exc:`~ssl.SSLCertVerificationError` 가 발생하고 적절한 TLS 경고"
" 메시지와 함께 핸드 셰이크가 중단됩니다. 새 예외에는 추가 정보가 들어 있습니다. 호스트 이름 유효성 검증은 "
":attr:`SSLContext.host_flags <ssl.SSLContext.host_flags>` 을 사용하여 사용자 정의 할"
" 수 있습니다. (Contributed by Christian Heimes in :issue:`31399`.)"

#: ../Doc/whatsnew/3.7.rst:1305
msgid ""
"The improved host name check requires a *libssl* implementation "
"compatible with OpenSSL 1.0.2 or 1.1.  Consequently, OpenSSL 0.9.8 and "
"1.0.1 are no longer supported.  The ssl module is mostly compatible with "
"LibreSSL 2.7.2 and newer."
msgstr ""
"향상된 호스트 이름 검사에는 OpenSSL 1.0.2 또는 1.1과 호환되는 *libssl* 구현이 필요합니다. 따라서, "
"OpenSSL 0.9.8 및 1.0.1은 더는 지원되지 않습니다. ssl 모듈은 대부분 LibreSSL 2.7.2 이상과 "
"호환됩니다."

#: ../Doc/whatsnew/3.7.rst:1310
msgid ""
"The ``ssl`` module no longer sends IP addresses in SNI TLS extension. "
"(Contributed by Christian Heimes in :issue:`32185`.)"
msgstr ""
"``ssl`` 모듈은 더는 SNI TLS 확장에서 IP 주소를 전송하지 않습니다. (Contributed by Christian "
"Heimes in :issue:`32185`.)"

#: ../Doc/whatsnew/3.7.rst:1313
msgid ""
":func:`~ssl.match_hostname` no longer supports partial wildcards like "
"``www*.example.org``. :attr:`SSLContext.host_flags "
"<ssl.SSLContext.host_flags>` has partial wildcard matching disabled by "
"default. (Contributed by Mandeep Singh in :issue:`23033` and Christian "
"Heimes in :issue:`31399`.)"
msgstr ""
":func:`~ssl.match_hostname`\\은 ``www*.example.org`` 와 같은 부분적인 와일드카드를 더는 "
"지원하지 않습니다. :attr:`SSLContext.host_flags <ssl.SSLContext.host_flags>`\\는 "
"기본적으로 부분적인 와일드카드 일치가 비활성화되어 있습니다. (Contributed by Mandeep Singh in "
":issue:`23033` and Christian Heimes in :issue:`31399`.)"

#: ../Doc/whatsnew/3.7.rst:1319
msgid ""
"The default cipher suite selection of the ``ssl`` module now uses a "
"blacklist approach rather than a hard-coded whitelist.  Python no longer "
"re-enables ciphers that have been blocked by OpenSSL security updates.  "
"Default cipher suite selection can be configured at compile time. "
"(Contributed by Christian Heimes in :issue:`31429`.)"
msgstr ""
"``ssl`` 모듈의 기본 사이퍼 군 선택은 이제 하드 코딩된 화이트리스트가 아닌 블랙리스트 접근법을 사용합니다. 파이썬은 더는 "
"OpenSSL 보안 업데이트 때문에 차단된 사이퍼를 다시 활성화하지 않습니다. 기본 사이퍼 군 선택은 컴파일 시점에 구성 할 수 "
"있습니다. (Contributed by Christian Heimes in :issue:`31429`.)"

#: ../Doc/whatsnew/3.7.rst:1325
msgid ""
"Validation of server certificates containing internationalized domain "
"names (IDNs) is now supported.  As part of this change, the "
":attr:`SSLSocket.server_hostname <ssl.SSLSocket.server_hostname>` "
"attribute now stores the expected hostname in A-label form (``\"xn"
"--pythn-mua.org\"``), rather than the U-label form (``\"pythön.org\"``)."
"  (Contributed by Nathaniel J. Smith and Christian Heimes in "
":issue:`28414`.)"
msgstr ""
"국제화된 도메인 이름 (IDN)을 포함하는 서버 인증서의 유효성 검사가 이제 지원됩니다. 이 변경의 일부로, "
":attr:`SSLSocket.server_hostname <ssl.SSLSocket.server_hostname>` 어트리뷰트는 "
"이제 U-label 형식(``\"pythön.org\"``)보다는 A-label 형식(``\"xn--pythn-"
"mua.org\"``)으로 기대하는 호스트 이름을 저장합니다. (Contributed by Nathaniel J. Smith and"
" Christian Heimes in :issue:`28414`.)"

#: ../Doc/whatsnew/3.7.rst:1332
msgid ""
"The ``ssl`` module has preliminary and experimental support for TLS 1.3 "
"and OpenSSL 1.1.1.  At the time of Python 3.7.0 release, OpenSSL 1.1.1 is"
" still under development and TLS 1.3 hasn't been finalized yet.  The TLS "
"1.3 handshake and protocol behaves slightly differently than TLS 1.2 and "
"earlier, see :ref:`ssl-tlsv1_3`. (Contributed by Christian Heimes in "
":issue:`32947`, :issue:`20995`, :issue:`29136`, :issue:`30622` and "
":issue:`33618`)"
msgstr ""
"``ssl`` 모듈은 TLS 1.3과 OpenSSL 1.1.1을 예비적이고 실험적으로 지원합니다. 파이썬 3.7.0 배포 당시, "
"OpenSSL 1.1.1은 아직 개발 중이며 TLS 1.3은 아직 완성되지 않았습니다. TLS 1.3 핸드 셰이크와 프로토콜은 "
"TLS 1.2 및 그 이전 버전과 약간 다르게 동작합니다. :ref:`ssl-tlsv1_3`\\을 참조하세요. "
"(Contributed by Christian Heimes in :issue:`32947`, :issue:`20995`, "
":issue:`29136`, :issue:`30622` and :issue:`33618`)"

#: ../Doc/whatsnew/3.7.rst:1340
msgid ""
":class:`~ssl.SSLSocket` and :class:`~ssl.SSLObject` no longer have a "
"public constructor.  Direct instantiation was never a documented and "
"supported feature.  Instances must be created with "
":class:`~ssl.SSLContext` methods :meth:`~ssl.SSLContext.wrap_socket` and "
":meth:`~ssl.SSLContext.wrap_bio`. (Contributed by Christian Heimes in "
":issue:`32951`)"
msgstr ""
":class:`~ssl.SSLSocket` 과 :class:`~ssl.SSLObject` 는 더는 공개 생성자를 가지고 있지 "
"않습니다. 직접 인스턴스를 만드는 것은 결코 문서로 만들어지고 지원되는 기능이 아닙니다. 인스턴스는 "
":class:`~ssl.SSLContext` 메서드 :meth:`~ssl.SSLContext.wrap_socket`\\과 "
":meth:`~ssl.SSLContext.wrap_bio`\\로 생성되어야 합니다. (Contributed by Christian "
"Heimes in :issue:`32951`)"

#: ../Doc/whatsnew/3.7.rst:1346
msgid ""
"OpenSSL 1.1 APIs for setting the minimum and maximum TLS protocol version"
" are available as :attr:`SSLContext.minimum_version "
"<ssl.SSLContext.minimum_version>` and :attr:`SSLContext.maximum_version "
"<ssl.SSLContext.maximum_version>`. Supported protocols are indicated by "
"serveral new flags, such as :data:`~ssl.HAS_TLSv1_1`. (Contributed by "
"Christian Heimes in :issue:`32609`.)"
msgstr ""
"최소 및 최대 TLS 프로토콜 버전을 설정하기 위한 OpenSSL 1.1 API는 "
":attr:`SSLContext.minimum_version <ssl.SSLContext.minimum_version>` 과 "
":attr:`SSLContext.maximum_version <ssl.SSLContext.maximum_version>` 로 "
"제공됩니다. 지원되는 프로토콜은 여러 가지 새 플래그로 표시됩니다, 가령 :data:`~ssl.HAS_TLSv1_1`. "
"(Contributed by Christian Heimes in :issue:`32609`.)"

#: ../Doc/whatsnew/3.7.rst:1355
msgid "string"
msgstr "string"

#: ../Doc/whatsnew/3.7.rst:1357
msgid ""
":class:`string.Template` now lets you to optionally modify the regular "
"expression pattern for braced placeholders and non-braced placeholders "
"separately.  (Contributed by Barry Warsaw in :issue:`1198569`.)"
msgstr ""
":class:`string.Template` 은 이제 중괄호로 둘러싼 치환식과 그렇지 않은 치환식의 정규식을 따로 선택적으로 수정할"
" 수 있도록 합니다. (Contributed by Barry Warsaw in :issue:`1198569`.)"

#: ../Doc/whatsnew/3.7.rst:1363
msgid "subprocess"
msgstr "subprocess"

#: ../Doc/whatsnew/3.7.rst:1365
msgid ""
"The :func:`subprocess.run` function accepts the new *capture_output* "
"keyword argument.  When true, stdout and stderr will be captured. This is"
" equivalent to passing :data:`subprocess.PIPE` as *stdout* and *stderr* "
"arguments. (Contributed by Bo Bayles in :issue:`32102`.)"
msgstr ""
":func:`subprocess.run` 함수는 새로운 *capture_output* 키워드 인자를 받습니다. 참일 때, "
"stdout과 stderr가 캡처됩니다. 이것은 :data:`subprocess.PIPE` 를 *stdout* 및 *stderr* "
"인자로 전달하는 것과 같습니다. (Contributed by Bo Bayles in :issue:`32102`.)"

#: ../Doc/whatsnew/3.7.rst:1371
msgid ""
"The ``subprocess.run`` function and the :class:`subprocess.Popen` "
"constructor now accept the *text* keyword argument as an alias to "
"*universal_newlines*. (Contributed by Andrew Clegg in :issue:`31756`.)"
msgstr ""
"``subprocess.run`` 함수와 :class:`subprocess.Popen` 생성자는 이제 *text* 키워드 인자를 "
"*universal_newlines* 의 별칭으로 받아들입니다. (Contributed by Andrew Clegg in "
":issue:`31756`.)"

#: ../Doc/whatsnew/3.7.rst:1376
msgid ""
"On Windows the default for *close_fds* was changed from ``False`` to "
"``True`` when redirecting the standard handles.  It's now possible to set"
" *close_fds* to true when redirecting the standard handles.  See "
":class:`subprocess.Popen`.  This means that *close_fds* now defaults to "
"``True`` on all supported platforms. (Contributed by Segev Finer in "
":issue:`19764`.)"
msgstr ""
"윈도우에서 *close_fds* 의 기본값은 표준 핸들을 리디렉션 할 때 ``False`` 에서 ``True`` 로 변경되었습니다."
" 이제 표준 핸들을 리디렉션 할 때 *close_fds* 를 참으로 설정할 수 있습니다. "
":class:`subprocess.Popen` 을 참조하세요. 이것은 지원되는 모든 플랫폼에서 이제 *close_fds* 의 "
"기본값이 ``True`` 임을 뜻합니다. (Contributed by Segev Finer in :issue:`19764`.)"

#: ../Doc/whatsnew/3.7.rst:1383
msgid ""
"The subprocess module is now more graceful when handling "
":exc:`KeyboardInterrupt` during :func:`subprocess.call`, "
":func:`subprocess.run`, or in a :class:`~subprocess.Popen` context "
"manager.  It now waits a short amount of time for the child to exit, "
"before continuing the handling of the ``KeyboardInterrupt`` exception. "
"(Contributed by Gregory P. Smith in :issue:`25942`.)"
msgstr ""
"subprocess 모듈은 이제 :func:`subprocess.call`, :func:`subprocess.run` 중에, 또는 "
":class:`~subprocess.Popen` 컨텍스트 관리자에 있는 동안 :exc:`KeyboardInterrupt` 를 더 "
"우아하게 처리합니다. 이제 ``KeyboardInterrupt`` 예외 처리를 계속하기 전에 자식이 종료될 때까지 약간의 시간을 "
"기다립니다. (Contributed by Gregory P. Smith in :issue:`25942`.)"

#: ../Doc/whatsnew/3.7.rst:1393 ../Doc/whatsnew/3.7.rst:2041
msgid "sys"
msgstr "sys"

#: ../Doc/whatsnew/3.7.rst:1395
msgid ""
"The new :func:`sys.breakpointhook` hook function is called by the built-"
"in :func:`breakpoint`. (Contributed by Barry Warsaw in :issue:`31353`.)"
msgstr ""
"새로운 :func:`sys.breakpointhook` 훅 함수는 내장 :func:`breakpoint` 에 의해 호출됩니다. "
"(Contributed by Barry Warsaw in :issue:`31353`.)"

#: ../Doc/whatsnew/3.7.rst:1399
msgid ""
"On Android, the new :func:`sys.getandroidapilevel` returns the build-time"
" Android API version. (Contributed by Victor Stinner in :issue:`28740`.)"
msgstr ""
"안드로이드에서, 새로운 :func:`sys.getandroidapilevel` 은 빌드 시간 안드로이드 API 버전을 반환합니다. "
"(Contributed by Victor Stinner in :issue:`28740`.)"

#: ../Doc/whatsnew/3.7.rst:1403
msgid ""
"The new :func:`sys.get_coroutine_origin_tracking_depth` function returns "
"the current coroutine origin tracking depth, as set by the new "
":func:`sys.set_coroutine_origin_tracking_depth`.  :mod:`asyncio` has been"
" converted to use this new API instead of the deprecated "
":func:`sys.set_coroutine_wrapper`. (Contributed by Nathaniel J. Smith in "
":issue:`32591`.)"
msgstr ""
"새로운 :func:`sys.get_coroutine_origin_tracking_depth` 함수는 새로운 "
":func:`sys.set_coroutine_origin_tracking_depth` 에 의해 설정된 현재 코루틴 원점 추적 깊이를"
" 반환합니다. :mod:`asyncio` 가 폐지된 :func:`sys.set_coroutine_wrapper` 대신 이 새로운 "
"API를 사용하도록 변환되었습니다. (Contributed by Nathaniel J. Smith in "
":issue:`32591`.)"

#: ../Doc/whatsnew/3.7.rst:1412
msgid "time"
msgstr "time"

#: ../Doc/whatsnew/3.7.rst:1414
msgid ""
":pep:`564` adds six new functions with nanosecond resolution to the "
":mod:`time` module:"
msgstr ":pep:`564` 는 :mod:`time` 모듈에 나노초 해상도의 새로운 함수 6개를 추가합니다:"

#: ../Doc/whatsnew/3.7.rst:1424
msgid "New clock identifiers have been added:"
msgstr "새로운 시계 식별자가 추가되었습니다:"

#: ../Doc/whatsnew/3.7.rst:1426
msgid ""
":data:`time.CLOCK_BOOTTIME` (Linux): Identical to "
":data:`time.CLOCK_MONOTONIC`, except it also includes any time that the "
"system is suspended."
msgstr ""
":data:`time.CLOCK_BOOTTIME` (리눅스): 시스템이 일시 중지된 시간을 포함한다는 점만 제외하고는 "
":data:`time.CLOCK_MONOTONIC` 과 같습니다."

#: ../Doc/whatsnew/3.7.rst:1429
msgid ""
":data:`time.CLOCK_PROF` (FreeBSD, NetBSD and OpenBSD): High-resolution "
"per-process CPU timer."
msgstr ""
":data:`time.CLOCK_PROF` (FreeBSD, NetBSD, OpenBSD): 고해상도의 프로세스별 CPU 타이머."

#: ../Doc/whatsnew/3.7.rst:1431
msgid ""
":data:`time.CLOCK_UPTIME` (FreeBSD, OpenBSD): Time whose absolute value "
"is the time the system has been running and not suspended, providing "
"accurate uptime measurement."
msgstr ""
":data:`time.CLOCK_UPTIME` (FreeBSD, OpenBSD): 절댓값이 시스템이 실행 중이었고 중단되지 않은 "
"시간인 시간. 정확한 업타임 측정을 제공합니다."

#: ../Doc/whatsnew/3.7.rst:1435
msgid ""
"The new :func:`time.thread_time` and :func:`time.thread_time_ns` "
"functions can be used to get per-thread CPU time measurements. "
"(Contributed by Antoine Pitrou in :issue:`32025`.)"
msgstr ""
"새로운 :func:`time.thread_time`\\과 :func:`time.thread_time_ns` 함수는 스레드 당 CPU"
" 시간을 측정하는 데 사용될 수 있습니다. (Contributed by Antoine Pitrou in "
":issue:`32025`.)"

#: ../Doc/whatsnew/3.7.rst:1439
msgid ""
"The new :func:`time.pthread_getcpuclockid` function returns the clock ID "
"of the thread-specific CPU-time clock."
msgstr ""
"새로운 :func:`time.pthread_getcpuclockid` 함수는 스레드 별 CPU 시간 시계의 시계 ID를 반환합니다."

#: ../Doc/whatsnew/3.7.rst:1444
msgid "tkinter"
msgstr "tkinter"

#: ../Doc/whatsnew/3.7.rst:1446
msgid ""
"The new :class:`tkinter.ttk.Spinbox` class is now available. (Contributed"
" by Alan Moore in :issue:`32585`.)"
msgstr ""
"이제 새로운 :class:`tkinter.ttk.Spinbox` 클래스를 사용할 수 있습니다. (Contributed by Alan"
" Moore in :issue:`32585`.)"

#: ../Doc/whatsnew/3.7.rst:1451
msgid "tracemalloc"
msgstr "tracemalloc"

#: ../Doc/whatsnew/3.7.rst:1453
msgid ""
":class:`tracemalloc.Traceback` behaves more like regular tracebacks, "
"sorting the frames from oldest to most recent. :meth:`Traceback.format() "
"<tracemalloc.Traceback.format>` now accepts negative *limit*, truncating "
"the result to the ``abs(limit)`` oldest frames.  To get the old "
"behaviour, use the new *most_recent_first* argument to "
"``Traceback.format()``. (Contributed by Jesse Bakker in :issue:`32121`.)"
msgstr ""
":class:`tracemalloc.Traceback` 은 더 일반 트레이스백과 같이 동작하여, 프레임을 가장 오래된 것부터 가장 "
"최근의 것으로 정렬합니다. :meth:`Traceback.format() <tracemalloc.Traceback.format>` "
"은 이제 음의 *limit* 을 받아들이고, 결과를 ``abs(limit)`` 개의 가장 오래된 프레임으로 잘라냅니다. 이전 동작을"
" 얻으려면, ``Traceback.format()`` 에 새로운 *most_recent_first* 인자를 사용하십시오. "
"(Contributed by Jesse Bakker in :issue:`32121`.)"

#: ../Doc/whatsnew/3.7.rst:1463
msgid "types"
msgstr "types"

#: ../Doc/whatsnew/3.7.rst:1465
msgid ""
"The new :class:`~types.WrapperDescriptorType`, "
":class:`~types.MethodWrapperType`, :class:`~types.MethodDescriptorType`, "
"and :class:`~types.ClassMethodDescriptorType` classes are now available. "
"(Contributed by Manuel Krebber and Guido van Rossum in :issue:`29377`, "
"and Serhiy Storchaka in :issue:`32265`.)"
msgstr ""
"이제 새로운 :class:`~types.WrapperDescriptorType`, "
":class:`~types.MethodWrapperType`, :class:`~types.MethodDescriptorType`, "
":class:`~types.ClassMethodDescriptorType` 클래스를 사용할 수 있습니다. (Contributed "
"by Manuel Krebber and Guido van Rossum in :issue:`29377`, and Serhiy "
"Storchaka in :issue:`32265`.)"

#: ../Doc/whatsnew/3.7.rst:1471
msgid ""
"The new :func:`types.resolve_bases` function resolves MRO entries "
"dynamically as specified by :pep:`560`. (Contributed by Ivan Levkivskyi "
"in :issue:`32717`.)"
msgstr ""
"새로운 :func:`types.resolve_bases` 함수는 :pep:`560` 에 지정된 대로 MRO 항목을 동적으로 "
"결정합니다. (Contributed by Ivan Levkivskyi in :issue:`32717`.)"

#: ../Doc/whatsnew/3.7.rst:1477
msgid "unicodedata"
msgstr "unicodedata"

#: ../Doc/whatsnew/3.7.rst:1479
msgid ""
"The internal :mod:`unicodedata` database has been upgraded to use "
"`Unicode 11 <http://www.unicode.org/versions/Unicode11.0.0/>`_. "
"(Contributed by Benjamin Peterson.)"
msgstr ""
"내부 :mod:`unicodedata` 데이터베이스가 `유니코드 11 "
"<http://www.unicode.org/versions/Unicode11.0.0/>`_ 을 사용하도록 업그레이드되었습니다. "
"(Contributed by Benjamin Peterson.)"

#: ../Doc/whatsnew/3.7.rst:1485
msgid "unittest"
msgstr "unittest"

#: ../Doc/whatsnew/3.7.rst:1487
msgid ""
"The new ``-k`` command-line option allows filtering tests by a name "
"substring or a Unix shell-like pattern. For example, ``python -m unittest"
" -k foo`` runs ``foo_tests.SomeTest.test_something``, "
"``bar_tests.SomeTest.test_foo``, but not "
"``bar_tests.FooTest.test_something``. (Contributed by Jonas Haag in "
":issue:`32071`.)"
msgstr ""
"새로운 ``-k`` 명령행 옵션은 이름 부분 문자열이나 유닉스 셸과 같은 패턴으로 테스트를 필터링 할 수 있습니다. 예를 들어 "
"``python -m unittest -k foo`` 는 ``foo_tests.SomeTest.test_something``, "
"``bar_tests.SomeTest.test_foo`` 를 실행하지만, "
"``bar_tests.FooTest.test_something`` 는 실행하지 않습니다. (Contributed by Jonas "
"Haag in :issue:`32071`.)"

#: ../Doc/whatsnew/3.7.rst:1496
msgid "unittest.mock"
msgstr "unittest.mock"

#: ../Doc/whatsnew/3.7.rst:1498
msgid ""
"The :const:`~unittest.mock.sentinel` attributes now preserve their "
"identity when they are :mod:`copied <copy>` or :mod:`pickled <pickle>`. "
"(Contributed by Serhiy Storchaka in :issue:`20804`.)"
msgstr ""
":const:`~unittest.mock.sentinel` 어트리뷰트는 이제 :mod:`복사 <copy>`\\되거나 :mod:`피클"
" <pickle>`\\될 때 그들의 아이덴티티를 보존합니다. (Contributed by Serhiy Storchaka in "
":issue:`20804`.)"

#: ../Doc/whatsnew/3.7.rst:1502
msgid ""
"The new :func:`~unittest.mock.seal` function allows sealing "
":class:`~unittest.mock.Mock` instances, which will disallow further "
"creation of attribute mocks.  The seal is applied recursively to all "
"attributes that are themselves mocks. (Contributed by Mario Corchero in "
":issue:`30541`.)"
msgstr ""
"새로운 :func:`~unittest.mock.seal` 함수는 :class:`~unittest.mock.Mock` 인스턴스를 "
"봉인하도록 허용합니다. 추가적인 어트리뷰트 모의 객체를 만들 수 없도록 합니다. 봉인은 모의 객체인 모든 어트리뷰트에 재귀적으로 "
"적용됩니다. (Contributed by Mario Corchero in :issue:`30541`.)"

#: ../Doc/whatsnew/3.7.rst:1510
msgid "urllib.parse"
msgstr "urllib.parse"

#: ../Doc/whatsnew/3.7.rst:1512
msgid ""
":func:`urllib.parse.quote` has been updated from :rfc:`2396` to "
":rfc:`3986`, adding ``~`` to the set of characters that are never quoted "
"by default. (Contributed by Christian Theune and Ratnadeep Debnath in "
":issue:`16285`.)"
msgstr ""
":func:`urllib.parse.quote` 가 :rfc:`2396`\\에서 :rfc:`3986`\\으로 갱신되어, 기본적으로 "
"이스케이프 되지 않는 문자 집합에 ``~`` 가 추가되었습니다. (Contributed by Christian Theune and "
"Ratnadeep Debnath in :issue:`16285`.)"

#: ../Doc/whatsnew/3.7.rst:1518
msgid "uu"
msgstr "uu"

#: ../Doc/whatsnew/3.7.rst:1520
msgid ""
"The :func:`uu.encode` function now accepts an optional *backtick* keyword"
" argument.  When it's true, zeros are represented by ``'`'`` instead of "
"spaces.  (Contributed by Xiang Zhang in :issue:`30103`.)"
msgstr ""
":func:`uu.encode` 함수는 이제 선택적 *backtick* 키워드 인자를 받아들입니다. 참일 때, 0은 스페이스 대신에"
" ``'`'`` 로 표현됩니다. (Contributed by Xiang Zhang in :issue:`30103`.)"

#: ../Doc/whatsnew/3.7.rst:1526
msgid "uuid"
msgstr "uuid"

#: ../Doc/whatsnew/3.7.rst:1528
msgid ""
"The new :attr:`UUID.is_safe <uuid.UUID.is_safe>` attribute relays "
"information from the platform about whether generated UUIDs are generated"
" with a multiprocessing-safe method. (Contributed by Barry Warsaw in "
":issue:`22807`.)"
msgstr ""
"새로운 :attr:`UUID.is_safe <uuid.UUID.is_safe>` 어트리뷰트는 생성된 UUID가 다중 프로세스에 "
"안전한 방법으로 생성되었는지에 대해 플랫폼이 주는 정보를 전달합니다. (Contributed by Barry Warsaw in "
":issue:`22807`.)"

#: ../Doc/whatsnew/3.7.rst:1533
msgid ""
":func:`uuid.getnode` now prefers universally administered MAC addresses "
"over locally administered MAC addresses. This makes a better guarantee "
"for global uniqueness of UUIDs returned from :func:`uuid.uuid1`.  If only"
" locally administered MAC addresses are available, the first such one "
"found is returned. (Contributed by Barry Warsaw in :issue:`32107`.)"
msgstr ""
":func:`uuid.getnode` 는 이제 지역적으로 관리되는 MAC 주소보다 보편적으로 관리되는 MAC 주소를 선호합니다. "
"이것은 :func:`uuid.uuid1` 에서 반환된 UUID의 글로벌 유일성을 더 잘 보장합니다. 지역적으로 관리되는 MAC 주소"
" 만 사용할 수 있는 경우, 처음 발견된 MAC 주소가 반환됩니다. (Contributed by Barry Warsaw in "
":issue:`32107`.)"

#: ../Doc/whatsnew/3.7.rst:1542
msgid "warnings"
msgstr "warnings"

#: ../Doc/whatsnew/3.7.rst:1544
msgid "The initialization of the default warnings filters has changed as follows:"
msgstr "기본 경고 필터의 초기화가 다음과 같이 변경되었습니다:"

#: ../Doc/whatsnew/3.7.rst:1546
msgid ""
"warnings enabled via command line options (including those for "
":option:`-b` and the new CPython-specific :option:`-X` ``dev`` option) "
"are always passed to the warnings machinery via the "
":data:`sys.warnoptions` attribute."
msgstr ""
"명령행 옵션(:option:`-b` 및 새로운 CPython 특정 :option:`-X` ``dev`` 옵션을 포함합니다)을 통해 "
"활성화된 경고는 항상 :data:`sys.warnoptions` 어트리뷰트를 통해 경고 절차로 전달됩니다."

#: ../Doc/whatsnew/3.7.rst:1550
msgid ""
"warnings filters enabled via the command line or the environment now have"
" the following order of precedence:"
msgstr "명령행 또는 환경을 통해 활성화된 경고 필터의 우선순위는 다음과 같습니다:"

#: ../Doc/whatsnew/3.7.rst:1553
msgid "the ``BytesWarning`` filter for :option:`-b` (or ``-bb``)"
msgstr ":option:`-b` (또는 ``-bb``)에 의한 ``BytesWarning`` 필터"

#: ../Doc/whatsnew/3.7.rst:1554
msgid "any filters specified with the :option:`-W` option"
msgstr ":option:`-W` 옵션으로 지정된 모든 필터"

#: ../Doc/whatsnew/3.7.rst:1555
msgid ""
"any filters specified with the :envvar:`PYTHONWARNINGS` environment "
"variable"
msgstr ":envvar:`PYTHONWARNINGS` 환경 변수로 지정된 모든 필터"

#: ../Doc/whatsnew/3.7.rst:1557
msgid ""
"any other CPython specific filters (e.g. the ``default`` filter added for"
" the new ``-X dev`` mode)"
msgstr "다른 모든 CPython 특정 필터 (예, 새로운 ``-X dev`` 모드를 위해 추가된 ``default`` 필터)"

#: ../Doc/whatsnew/3.7.rst:1559
msgid "any implicit filters defined directly by the warnings machinery"
msgstr "경고 절차에 의해 직접 정의된 모든 묵시적 필터"

#: ../Doc/whatsnew/3.7.rst:1561
msgid ""
"in CPython debug builds, all warnings are now displayed by default (the "
"implicit filter list is empty)"
msgstr "CPython 디버그 빌드에서, 이제 모든 경고가 기본적으로 표시됩니다 (묵시적 필터 목록이 비어 있습니다)"

#: ../Doc/whatsnew/3.7.rst:1564
msgid ""
"(Contributed by Nick Coghlan and Victor Stinner in :issue:`20361`, "
":issue:`32043`, and :issue:`32230`.)"
msgstr ""
"(Contributed by Nick Coghlan and Victor Stinner in :issue:`20361`, "
":issue:`32043`, and :issue:`32230`.)"

#: ../Doc/whatsnew/3.7.rst:1567
msgid ""
"Deprecation warnings are once again shown by default in single-file "
"scripts and at the interactive prompt.  See :ref:`whatsnew37-pep565` for "
"details. (Contributed by Nick Coghlan in :issue:`31975`.)"
msgstr ""
"폐지 경고는 단일 파일 스크립트 및 대화식 프롬프트에서 다시 한번 기본적으로 표시됩니다. 자세한 내용은 "
":ref:`whatsnew37-pep565` 를 참조하십시오. (Contributed by Nick Coghlan in "
":issue:`31975`.)"

#: ../Doc/whatsnew/3.7.rst:1573
msgid "xml.etree"
msgstr "xml.etree"

#: ../Doc/whatsnew/3.7.rst:1575
msgid ""
":ref:`ElementPath <elementtree-xpath>` predicates in the :meth:`find` "
"methods can now compare text of the current node with ``[. = \"text\"]``,"
" not only text in children.  Predicates also allow adding spaces for "
"better readability.  (Contributed by Stefan Behnel in :issue:`31648`.)"
msgstr ""
":meth:`find` 의 :ref:`ElementPath <elementtree-xpath>` 서술자는 이제 ``[. = "
"\"text\"]`` 로 자식의 텍스트뿐만 아니라 현재 노드의 텍스트를 비교할 수 있습니다. 서술자는 가독성을 높이기 위해 "
"스페이스를 추가할 수도 있습니다. (Contributed by Stefan Behnel in :issue:`31648`.)"

#: ../Doc/whatsnew/3.7.rst:1582
msgid "xmlrpc.server"
msgstr "xmlrpc.server"

#: ../Doc/whatsnew/3.7.rst:1584
msgid ""
":meth:`SimpleXMLRPCDispatcher.register_function "
"<xmlrpc.server.SimpleXMLRPCDispatcher>` can now be used as a decorator.  "
"(Contributed by Xiang Zhang in :issue:`7769`.)"
msgstr ""
":meth:`SimpleXMLRPCDispatcher.register_function "
"<xmlrpc.server.SimpleXMLRPCDispatcher>` 는 이제 데코레이터로 사용할 수 있습니다. "
"(Contributed by Xiang Zhang in :issue:`7769`.)"

#: ../Doc/whatsnew/3.7.rst:1590
msgid "zipapp"
msgstr "zipapp"

#: ../Doc/whatsnew/3.7.rst:1592
msgid ""
"Function :func:`~zipapp.create_archive` now accepts an optional *filter* "
"argument to allow the user to select which files should be included in "
"the archive.  (Contributed by Irmen de Jong in :issue:`31072`.)"
msgstr ""
"함수 :func:`~zipapp.create_archive` 는 이제 사용자가 아카이브에 포함되어야 하는 파일을 선택할 수 있도록 "
"선택적 *filter* 인자를 받아들입니다. (Contributed by Irmen de Jong in "
":issue:`31072`.)"

#: ../Doc/whatsnew/3.7.rst:1596
msgid ""
"Function :func:`~zipapp.create_archive` now accepts an optional "
"*compressed* argument to generate a compressed archive.  A command line "
"option ``--compress`` has also been added to support compression. "
"(Contributed by Zhiming Wang in :issue:`31638`.)"
msgstr ""
"함수 :func:`~zipapp.create_archive` 는 이제 압축된 아카이브를 생성하기 위해 선택적 *compressed*"
" 인자를 받아들입니다. 명령행 옵션 ``--compress`` 도 압축을 지원하기 위해 추가되었습니다. (Contributed by"
" Zhiming Wang in :issue:`31638`.)"

#: ../Doc/whatsnew/3.7.rst:1603
msgid "zipfile"
msgstr "zipfile"

#: ../Doc/whatsnew/3.7.rst:1605
msgid ""
":class:`~zipfile.ZipFile` now accepts the new *compresslevel* parameter "
"to control the compression level. (Contributed by Bo Bayles in "
":issue:`21417`.)"
msgstr ""
":class:`~zipfile.ZipFile` 은 이제 압축 수준을 제어하기 위해 새로운 *compresslevel* 매개변수를 "
"받아들입니다. (Contributed by Bo Bayles in :issue:`21417`.)"

#: ../Doc/whatsnew/3.7.rst:1609
msgid ""
"Subdirectories in archives created by ``ZipFile`` are now stored in "
"alphabetical order. (Contributed by Bernhard M. Wiedemann in "
":issue:`30693`.)"
msgstr ""
"``ZipFile`` 에 의해 생성된 아카이브에 있는 서브 디렉터리는 이제 알파벳순으로 저장됩니다. (Contributed by "
"Bernhard M. Wiedemann in :issue:`30693`.)"

#: ../Doc/whatsnew/3.7.rst:1615
msgid "C API Changes"
msgstr "C API 변경"

#: ../Doc/whatsnew/3.7.rst:1617
msgid ""
"A new API for thread-local storage has been implemented.  See "
":ref:`whatsnew37-pep539` for an overview and :ref:`thread-specific-"
"storage-api` for a complete reference. (Contributed by Masayuki Yamamoto "
"in :issue:`25658`.)"
msgstr ""
"스레드-로컬 저장소를 위한 새로운 API가 구현되었습니다. 개요는 :ref:`whatsnew37-pep539` 를, 완전한 "
"레퍼런스는 :ref:`thread-specific-storage-api`\\를 보십시오. (Contributed by "
"Masayuki Yamamoto in :issue:`25658`.)"

#: ../Doc/whatsnew/3.7.rst:1622
msgid ""
"The new :ref:`context variables <whatsnew37-pep567>` functionality "
"exposes a number of :ref:`new C APIs <contextvarsobjects>`."
msgstr ""
"새로운 :ref:`컨텍스트 변수 <whatsnew37-pep567>` 기능은 다수의 :ref:`새로운 C API "
"<contextvarsobjects>`\\를 노출합니다."

#: ../Doc/whatsnew/3.7.rst:1625
msgid ""
"The new :c:func:`PyImport_GetModule` function returns the previously "
"imported module with the given name. (Contributed by Eric Snow in "
":issue:`28411`.)"
msgstr ""
"새로운 :c:func:`PyImport_GetModule` 함수는 주어진 이름으로 이전에 임포트 한 모듈을 반환합니다. "
"(Contributed by Eric Snow in :issue:`28411`.)"

#: ../Doc/whatsnew/3.7.rst:1629
msgid ""
"The new :c:macro:`Py_RETURN_RICHCOMPARE` macro eases writing rich "
"comparison functions. (Contributed by Petr Victorin in :issue:`23699`.)"
msgstr ""
"새로운 :c:macro:`Py_RETURN_RICHCOMPARE` 매크로는 풍부한 비교 함수를 작성하기 쉽게 합니다. "
"(Contributed by Petr Victorin in :issue:`23699`.)"

#: ../Doc/whatsnew/3.7.rst:1633
msgid ""
"The new :c:macro:`Py_UNREACHABLE` macro can be used to mark unreachable "
"code paths. (Contributed by Barry Warsaw in :issue:`31338`.)"
msgstr ""
"새로운 :c:macro:`Py_UNREACHABLE` 매크로는 도달할 수 없는 코드 경로를 표시하는 데 사용될 수 있습니다. "
"(Contributed by Barry Warsaw in :issue:`31338`.)"

#: ../Doc/whatsnew/3.7.rst:1637
msgid ""
"The :mod:`tracemalloc` now exposes a C API through the new "
":c:func:`PyTraceMalloc_Track` and :c:func:`PyTraceMalloc_Untrack` "
"functions. (Contributed by Victor Stinner in :issue:`30054`.)"
msgstr ""
":mod:`tracemalloc` 은 이제 새로운 :c:func:`PyTraceMalloc_Track`\\과 "
":c:func:`PyTraceMalloc_Untrack` 함수를 통해 C API를 노출합니다. (Contributed by "
"Victor Stinner in :issue:`30054`.)"

#: ../Doc/whatsnew/3.7.rst:1642
msgid ""
"The new :c:func:`import__find__load__start` and "
":c:func:`import__find__load__done` static markers can be used to trace "
"module imports. (Contributed by Christian Heimes in :issue:`31574`.)"
msgstr ""
"새로운 :c:func:`import__find__load__start`\\와 "
":c:func:`import__find__load__done` 정적 마커를 사용하여 모듈 임포트를 추적 할 수 있습니다. "
"(Contributed by Christian Heimes in :issue:`31574`.)"

#: ../Doc/whatsnew/3.7.rst:1647
msgid ""
"The fields :c:member:`name` and :c:member:`doc` of structures "
":c:type:`PyMemberDef`, :c:type:`PyGetSetDef`, "
":c:type:`PyStructSequence_Field`, :c:type:`PyStructSequence_Desc`, and "
":c:type:`wrapperbase` are now of type ``const char *`` rather of ``char "
"*``.  (Contributed by Serhiy Storchaka in :issue:`28761`.)"
msgstr ""
"구조체 :c:type:`PyMemberDef`, :c:type:`PyGetSetDef`, "
":c:type:`PyStructSequence_Field`, :c:type:`PyStructSequence_Desc` 그리고 "
":c:type:`wrapperbase` 의 필드 :c:member:`name`\\과 :c:member:`doc` 은 이제 "
"``char *`` 이 아니라 ``const char *`` 형입니다. (Contributed by Serhiy Storchaka "
"in :issue:`28761`.)"

#: ../Doc/whatsnew/3.7.rst:1653
msgid ""
"The result of :c:func:`PyUnicode_AsUTF8AndSize` and "
":c:func:`PyUnicode_AsUTF8` is now of type ``const char *`` rather of "
"``char *``. (Contributed by Serhiy Storchaka in :issue:`28769`.)"
msgstr ""
":c:func:`PyUnicode_AsUTF8AndSize` 와 :c:func:`PyUnicode_AsUTF8`\\의 결과는 이제 "
"``char *`` 이 아니라 ``const char *`` 입니다. (Contributed by Serhiy Storchaka "
"in :issue:`28769`.)"

#: ../Doc/whatsnew/3.7.rst:1657
msgid ""
"The result of :c:func:`PyMapping_Keys`, :c:func:`PyMapping_Values` and "
":c:func:`PyMapping_Items` is now always a list, rather than a list or a "
"tuple. (Contributed by Oren Milman in :issue:`28280`.)"
msgstr ""
":c:func:`PyMapping_Keys`, :c:func:`PyMapping_Values` 및 "
":c:func:`PyMapping_Items`\\의 결과는 이제 리스트 또는 튜플이 아니라 항상 리스트입니다. "
"(Contributed by Oren Milman in :issue:`28280`.)"

#: ../Doc/whatsnew/3.7.rst:1661
msgid ""
"Added functions :c:func:`PySlice_Unpack` and "
":c:func:`PySlice_AdjustIndices`. (Contributed by Serhiy Storchaka in "
":issue:`27867`.)"
msgstr ""
"함수 :c:func:`PySlice_Unpack`\\과 :c:func:`PySlice_AdjustIndices` 를 추가했습니다. "
"(Contributed by Serhiy Storchaka in :issue:`27867`.)"

#: ../Doc/whatsnew/3.7.rst:1664
msgid ""
":c:func:`PyOS_AfterFork` is deprecated in favour of the new functions "
":c:func:`PyOS_BeforeFork`, :c:func:`PyOS_AfterFork_Parent` and "
":c:func:`PyOS_AfterFork_Child`.  (Contributed by Antoine Pitrou in "
":issue:`16500`.)"
msgstr ""
":c:func:`PyOS_AfterFork` 는 폐지되고, 새 함수 :c:func:`PyOS_BeforeFork`, "
":c:func:`PyOS_AfterFork_Parent` 그리고 :c:func:`PyOS_AfterFork_Child`\\로 "
"대체되었습니다. (Contributed by Antoine Pitrou in :issue:`16500`.)"

#: ../Doc/whatsnew/3.7.rst:1669
msgid ""
"The ``PyExc_RecursionErrorInst`` singleton that was part of the public "
"API has been removed as its members being never cleared may cause a "
"segfault during finalization of the interpreter. Contributed by Xavier de"
" Gaye in :issue:`22898` and :issue:`30697`."
msgstr ""
"공개 API의 일부였던 ``PyExc_RecursionErrorInst`` 싱글톤은 제거되었습니다. 청소되지 않은 멤버가 "
"인터프리터의 파이널리제이션 과정에서 세그멘테이션 오류를 일으킬 수 있기 때문입니다. (Contributed by Xavier de "
"Gaye in :issue:`22898` and :issue:`30697`.)"

#: ../Doc/whatsnew/3.7.rst:1674
msgid ""
"Added C API support for timezones with timezone constructors "
":c:func:`PyTimeZone_FromOffset` and "
":c:func:`PyTimeZone_FromOffsetAndName`, and access to the UTC singleton "
"with :c:data:`PyDateTime_TimeZone_UTC`. Contributed by Paul Ganssle in "
":issue:`10381`."
msgstr ""
"시간대 지원을 위한 timezone 생성자 :c:func:`PyTimeZone_FromOffset` 과 "
":c:func:`PyTimeZone_FromOffsetAndName` 및 UTC 싱글톤에 액세스하는 "
":c:data:`PyDateTime_TimeZone_UTC` C API 지원을 추가했습니다. (Contributed by Paul "
"Ganssle in :issue:`10381`.)"

#: ../Doc/whatsnew/3.7.rst:1679
msgid ""
"The type of results of :c:func:`PyThread_start_new_thread` and "
":c:func:`PyThread_get_thread_ident`, and the *id* parameter of "
":c:func:`PyThreadState_SetAsyncExc` changed from :c:type:`long` to "
":c:type:`unsigned long`. (Contributed by Serhiy Storchaka in "
":issue:`6532`.)"
msgstr ""
":c:func:`PyThread_start_new_thread` 및 :c:func:`PyThread_get_thread_ident`"
" 의 결과와 :c:func:`PyThreadState_SetAsyncExc` 의 *id* 매개 변수의 형이 "
":c:type:`long`\\에서 :c:type:`unsigned long`\\로 변경되었습니다. (Contributed by "
"Serhiy Storchaka in :issue:`6532`.)"

#: ../Doc/whatsnew/3.7.rst:1685
msgid ""
":c:func:`PyUnicode_AsWideCharString` now raises a :exc:`ValueError` if "
"the second argument is *NULL* and the :c:type:`wchar_t*` string contains "
"null characters.  (Contributed by Serhiy Storchaka in :issue:`30708`.)"
msgstr ""
":c:func:`PyUnicode_AsWideCharString`\\은 두 번째 인자가 *NULL* 이고 "
":c:type:`wchar_t*` 문자열이 널 문자를 포함하면 :exc:`ValueError` 를 발생시킵니다. "
"(Contributed by Serhiy Storchaka in :issue:`30708`.)"

#: ../Doc/whatsnew/3.7.rst:1689
msgid ""
"Changes to the startup sequence and the management of dynamic memory "
"allocators mean that the long documented requirement to call "
":c:func:`Py_Initialize` before calling most C API functions is now relied"
" on more heavily, and failing to abide by it may lead to segfaults in "
"embedding applications. See the :ref:`porting-to-python-37` section in "
"this document and the :ref:`pre-init-safe` section in the C API "
"documentation for more details."
msgstr ""
"시동 절차와 동적 메모리 할당자의 변경으로 인해 대부분의 C API 함수를 호출하기 전에 :c:func:`Py_Initialize`"
" 를 호출해야 한다는 오래전부터 문서화 된 요구 사항이 이제 더 중요해졌고, 이를 지키지 않으면 내장형 응용 프로그램에서 "
"세그멘테이션 오류로 이어질 수 있습니다. 자세한 내용은 이 문서의 :ref:`porting-to-python-37` 절과 C API"
" 설명서의 :ref:`pre-init-safe` 절을 참조하십시오."

#: ../Doc/whatsnew/3.7.rst:1697
msgid ""
"The new :c:func:`PyInterpreterState_GetID` returns the unique ID for a "
"given interpreter. (Contributed by Eric Snow in :issue:`29102`.)"
msgstr ""
"새로운 :c:func:`PyInterpreterState_GetID` 는 주어진 인터프리터의 유일한 ID를 반환합니다. "
"(Contributed by Eric Snow in :issue:`29102`.)"

#: ../Doc/whatsnew/3.7.rst:1701
msgid ""
":c:func:`Py_DecodeLocale`, :c:func:`Py_EncodeLocale` now use the UTF-8 "
"encoding when the :ref:`UTF-8 mode <whatsnew37-pep540>` is enabled. "
"(Contributed by Victor Stinner in :issue:`29240`.)"
msgstr ""
":c:func:`Py_DecodeLocale`, :c:func:`Py_EncodeLocale` 은 이제 :ref:`UTF-8 모드 "
"<whatsnew37-pep540>` 가 활성화될 때 UTF-8 인코딩을 사용합니다. (Contributed by Victor "
"Stinner in :issue:`29240`.)"

#: ../Doc/whatsnew/3.7.rst:1705
msgid ""
":c:func:`PyUnicode_DecodeLocaleAndSize` and "
":c:func:`PyUnicode_EncodeLocale` now use the current locale encoding for "
"``surrogateescape`` error handler. (Contributed by Victor Stinner in "
":issue:`29240`.)"
msgstr ""
":c:func:`PyUnicode_DecodeLocaleAndSize` 와 "
":c:func:`PyUnicode_EncodeLocale`\\은 이제 ``surrogateescape`` 에러 처리기에 현재 로케일"
" 인코딩을 사용합니다. (Contributed by Victor Stinner in :issue:`29240`.)"

#: ../Doc/whatsnew/3.7.rst:1709
msgid ""
"The *start* and *end* parameters of :c:func:`PyUnicode_FindChar` are now "
"adjusted to behave like string slices. (Contributed by Xiang Zhang in "
":issue:`28822`.)"
msgstr ""
":c:func:`PyUnicode_FindChar` 의 *start* 와 *end* 매개 변수가 문자열 슬라이스처럼 동작하도록 "
"조정되었습니다. (Contributed by Xiang Zhang in :issue:`28822`.)"

#: ../Doc/whatsnew/3.7.rst:1715
msgid "Build Changes"
msgstr "빌드 변경"

#: ../Doc/whatsnew/3.7.rst:1717
msgid ""
"Support for building ``--without-threads`` has been removed.  The "
":mod:`threading` module is now always available. (Contributed by Antoine "
"Pitrou in :issue:`31370`.)."
msgstr ""
"``--without-threads`` 빌드 지원이 제거되었습니다. :mod:`threading` 모듈은 이제 항상 사용할 수 "
"있습니다. (Contributed by Antoine Pitrou in :issue:`31370`.)"

#: ../Doc/whatsnew/3.7.rst:1721
msgid ""
"A full copy of libffi is no longer bundled for use when building the "
":mod:`_ctypes <ctypes>` module on non-OSX UNIX platforms.  An installed "
"copy of libffi is now required when building ``_ctypes`` on such "
"platforms. (Contributed by Zachary Ware in :issue:`27979`.)"
msgstr ""
"OSX 이외의 유닉스 플랫폼에서 :mod:`_ctypes <ctypes>` 모듈을 빌드할 때 사용되는 libffi의 전체 복사본이 "
"더는 포함되지 않습니다. 이러한 플랫폼에서 ``_ctypes`` 를 빌드 할 때 libffi의 설치된 사본이 필요합니다. "
"(Contributed by Zachary Ware in :issue:`27979`.)"

#: ../Doc/whatsnew/3.7.rst:1726
msgid ""
"The Windows build process no longer depends on Subversion to pull in "
"external sources, a Python script is used to download zipfiles from "
"GitHub instead. If Python 3.6 is not found on the system (via ``py "
"-3.6``), NuGet is used to download a copy of 32-bit Python for this "
"purpose.  (Contributed by Zachary Ware in :issue:`30450`.)"
msgstr ""
"윈도우 빌드 프로세스는 외부 소스를 가져오는 데 더는 서브버전에 의존하지 않습니다. 대신 파이썬 스크립트를 사용해서 GitHub에서"
" zip 파일을 내려받습니다. 시스템에서 파이썬 3.6이 발견되지 않으면 (``py -3.6`` 를 통해), 이 목적을 위해 "
"NuGet으로 32-비트 파이썬의 사본을 내려받습니다. (Contributed by Zachary Ware in "
":issue:`30450`.)"

#: ../Doc/whatsnew/3.7.rst:1732
msgid ""
"The :mod:`ssl` module requires OpenSSL 1.0.2 or 1.1 compatible libssl. "
"OpenSSL 1.0.1 has reached end of lifetime on 2016-12-31 and is no longer "
"supported. LibreSSL is temporarily not supported as well. LibreSSL "
"releases up to version 2.6.4 are missing required OpenSSL 1.0.2 APIs."
msgstr ""
":mod:`ssl` 모듈은 OpenSSL 1.0.2 또는 1.1 호환 libssl을 요구합니다. OpenSSL 1.0.1의 유효 "
"기간은 2016-12-31 에 만료되었고 더는 지원되지 않습니다. LibreSSL도 일시적으로 지원되지 않습니다. 버전 "
"2.6.4까지의 LibreSSL 배포에는 필수 OpenSSL 1.0.2 API가 없습니다."

#: ../Doc/whatsnew/3.7.rst:1741
msgid "Optimizations"
msgstr "최적화"

#: ../Doc/whatsnew/3.7.rst:1743
msgid ""
"The overhead of calling many methods of various standard library classes "
"implemented in C has been significantly reduced by porting more code to "
"use the ``METH_FASTCALL`` convention. (Contributed by Victor Stinner in "
":issue:`29300`, :issue:`29507`, :issue:`29452`, and :issue:`29286`.)"
msgstr ""
"C로 구현된 다양한 표준 라이브러리 클래스의 많은 메서드를 호출하는 오버헤드가, ``METH_FASTCALL`` 규칙을 사용하도록 "
"더 많은 코드를 이식함으로써 상당히 감소하였습니다. (Contributed by Victor Stinner in "
":issue:`29300`, :issue:`29507`, :issue:`29452`, and :issue:`29286`.)"

#: ../Doc/whatsnew/3.7.rst:1749
#, python-format
msgid ""
"Various optimizations have reduced Python startup time by 10% on Linux "
"and up to 30% on macOS. (Contributed by Victor Stinner, INADA Naoki in "
":issue:`29585`, and Ivan Levkivskyi in :issue:`31333`.)"
msgstr ""
"다양한 최적화를 통해 파이썬의 시작 시간을 리눅스에서 10%, macOS에서 최대 30%까지 줄였습니다. (Contributed "
"by Victor Stinner, INADA Naoki in :issue:`29585`, and Ivan Levkivskyi in "
":issue:`31333`.)"

#: ../Doc/whatsnew/3.7.rst:1754
#, python-format
msgid ""
"Method calls are now up to 20% faster due to the bytecode changes which "
"avoid creating bound method instances. (Contributed by Yury Selivanov and"
" INADA Naoki in :issue:`26110`.)"
msgstr ""
"메서드 호출은 이제 연결된 메서드 인스턴스 생성을 피하는 바이트 코드 변경으로 인해 최대 20% 빨라졌습니다. "
"(Contributed by Yury Selivanov and INADA Naoki in :issue:`26110`.)"

#: ../Doc/whatsnew/3.7.rst:1760
msgid ""
"The :mod:`asyncio` module received a number of notable optimizations for "
"commonly used functions:"
msgstr ":mod:`asyncio` 모듈은 자주 사용되는 함수들에 대해 여러 가지 주목할만한 최적화가 이루어졌습니다:"

#: ../Doc/whatsnew/3.7.rst:1763
msgid ""
"The :func:`asyncio.get_event_loop` function has been reimplemented in C "
"to make it up to 15 times faster. (Contributed by Yury Selivanov in "
":issue:`32296`.)"
msgstr ""
":func:`asyncio.get_event_loop` 함수가 C로 다시 구현되어 최대 15배 빨라졌습니다. (Contributed"
" by Yury Selivanov in :issue:`32296`.)"

#: ../Doc/whatsnew/3.7.rst:1767
msgid ""
":class:`asyncio.Future` callback management has been optimized. "
"(Contributed by Yury Selivanov in :issue:`32348`.)"
msgstr ""
":class:`asyncio.Future` 콜백 관리가 최적화되었습니다. (Contributed by Yury Selivanov "
"in :issue:`32348`.)"

#: ../Doc/whatsnew/3.7.rst:1770
#, python-format
msgid ""
":func:`asyncio.gather` is now up to 15% faster. (Contributed by Yury "
"Selivanov in :issue:`32355`.)"
msgstr ""
":func:`asyncio.gather` 는 이제 최대 15% 빨라졌습니다. (Contributed by Yury Selivanov"
" in :issue:`32355`.)"

#: ../Doc/whatsnew/3.7.rst:1773
msgid ""
":func:`asyncio.sleep` is now up to 2 times faster when the *delay* "
"argument is zero or negative. (Contributed by Andrew Svetlov in "
":issue:`32351`.)"
msgstr ""
":func:`asyncio.sleep`\\은 이제 *delay* 인자가 0이거나 음수일 때 최대 2배 빠릅니다. "
"(Contributed by Andrew Svetlov in :issue:`32351`.)"

#: ../Doc/whatsnew/3.7.rst:1777
msgid ""
"The performance overhead of asyncio debug mode has been reduced. "
"(Contributed by Antoine Pitrou in :issue:`31970`.)"
msgstr ""
"asyncio 디버그 모드의 성능 오버헤드가 감소하였습니다. (Contributed by Antoine Pitrou in "
":issue:`31970`.)"

#: ../Doc/whatsnew/3.7.rst:1780
msgid ""
"As a result of :ref:`PEP 560 work <whatsnew37-pep560>`, the import time "
"of :mod:`typing` has been reduced by a factor of 7, and many typing "
"operations are now faster. (Contributed by Ivan Levkivskyi in "
":issue:`32226`.)"
msgstr ""
":ref:`PEP 560 작업 <whatsnew37-pep560>` 의 결과로, :mod:`typing` 의 임포트 시간이 7배 "
"단축되었으며, 많은 typing 연산이 이제 더 빨라졌습니다. (Contributed by Ivan Levkivskyi in "
":issue:`32226`.)"

#: ../Doc/whatsnew/3.7.rst:1785
#, python-format
msgid ""
":func:`sorted` and :meth:`list.sort` have been optimized for common cases"
" to be up to 40-75% faster. (Contributed by Elliot Gorokhovsky in "
":issue:`28685`.)"
msgstr ""
":func:`sorted`\\와 :meth:`list.sort` 는 일반적인 사용에 대해 최대 40-75% 더 빠르게 "
"최적화되었습니다. (Contributed by Elliot Gorokhovsky in :issue:`28685`.)"

#: ../Doc/whatsnew/3.7.rst:1789
msgid ""
":meth:`dict.copy` is now up to 5.5 times faster. (Contributed by Yury "
"Selivanov in :issue:`31179`.)"
msgstr ""
":meth:`dict.copy` 는 이제 5.5 배 빠릅니다. (Contributed by Yury Selivanov in "
":issue:`31179`.)"

#: ../Doc/whatsnew/3.7.rst:1792
msgid ""
":func:`hasattr` and :func:`getattr` are now about 4 times faster when "
"*name* is not found and *obj* does not override "
":meth:`object.__getattr__` or :meth:`object.__getattribute__`. "
"(Contributed by INADA Naoki in :issue:`32544`.)"
msgstr ""
":func:`hasattr`\\과 :func:`getattr`\\은 이제 *name* 이 발견되지 않고 *obj* 가 "
":meth:`object.__getattr__` 또는 :meth:`object.__getattribute__` 를 재정의하지 않을 "
"때 약 4배 빨라졌습니다. (Contributed by INADA Naoki in :issue:`32544`.)"

#: ../Doc/whatsnew/3.7.rst:1797
msgid ""
"Searching for certain Unicode characters (like Ukrainian capital \"Є\") "
"in a string was up to 25 times slower than searching for other "
"characters. It is now only 3 times slower in the worst case. (Contributed"
" by Serhiy Storchaka in :issue:`24821`.)"
msgstr ""
"문자열에서 특정 유니코드 문자 (가령 우크라이나어 \"Є\")를 검색하는 것은 다른 문자를 검색하는 것보다 최대 25배까지 "
"느렸습니다. 이제는 최악의 상황에도 겨우 3배 느립니다. (Contributed by Serhiy Storchaka in "
":issue:`24821`.)"

#: ../Doc/whatsnew/3.7.rst:1802
msgid ""
"The :func:`collections.namedtuple` factory has been reimplemented to make"
" the creation of named tuples 4 to 6 times faster. (Contributed by Jelle "
"Zijlstra with further improvements by INADA Naoki, Serhiy Storchaka, and "
"Raymond Hettinger in :issue:`28638`.)"
msgstr ""
":func:`collections.namedtuple` 팩토리가 재구현되어 네임드 튜플을 4 에서 6배 빠르게 생성합니다. "
"(Contributed by Jelle Zijlstra with further improvements by INADA Naoki, "
"Serhiy Storchaka, and Raymond Hettinger in :issue:`28638`.)"

#: ../Doc/whatsnew/3.7.rst:1807
#, python-format
msgid ""
":meth:`date.fromordinal` and :meth:`date.fromtimestamp` are now up to 30%"
" faster in the common case. (Contributed by Paul Ganssle in "
":issue:`32403`.)"
msgstr ""
":meth:`date.fromordinal` 과 :meth:`date.fromtimestamp` 는 이제 일반적일 때 최대 30% "
"더 빠릅니다. (Contributed by Paul Ganssle in :issue:`32403`.)"

#: ../Doc/whatsnew/3.7.rst:1811
msgid ""
"The :func:`os.fwalk` function is now up to 2 times faster thanks to the "
"use of :func:`os.scandir`. (Contributed by Serhiy Storchaka in "
":issue:`25996`.)"
msgstr ""
":func:`os.fwalk` 함수는 :func:`os.scandir` 을 사용함으로써 이제 최대 2배 빨라졌습니다. "
"(Contributed by Serhiy Storchaka in :issue:`25996`.)"

#: ../Doc/whatsnew/3.7.rst:1815
msgid ""
"The speed of the :func:`shutil.rmtree` function has been improved by 20--"
"40% thanks to the use of the :func:`os.scandir` function. (Contributed by"
" Serhiy Storchaka in :issue:`28564`.)"
msgstr ""
":func:`os.scandir` 함수를 사용하여 :func:`shutil.rmtree` 함수의 속도가 20--40% "
"향상되었습니다. (Contributed by Serhiy Storchaka in :issue:`28564`.)"

#: ../Doc/whatsnew/3.7.rst:1819
msgid ""
"Optimized case-insensitive matching and searching of :mod:`regular "
"expressions <re>`.  Searching some patterns can now be up to 20 times "
"faster. (Contributed by Serhiy Storchaka in :issue:`30285`.)"
msgstr ""
"최적화된 :mod:`정규식 <re>` 의 대소 문자를 구별하지 않는 매칭과 검색. 일부 패턴 검색은 이제 최대 20배까지 빨라질 수"
" 있습니다. (Contributed by Serhiy Storchaka in :issue:`30285`.)"

#: ../Doc/whatsnew/3.7.rst:1823
#, python-format
msgid ""
":func:`re.compile` now converts ``flags`` parameter to int object if it "
"is ``RegexFlag``.  It is now as fast as Python 3.5, and faster than "
"Python 3.6 by about 10% depending on the pattern. (Contributed by INADA "
"Naoki in :issue:`31671`.)"
msgstr ""
":func:`re.compile` 은 이제 ``flags`` 매개 변수가 ``RegexFlag`` 인 경우 int 객체로 "
"변환합니다. 이제 파이썬 3.5만큼 빠르고, 패턴에 따라 파이썬 3.6보다 약 10% 빠릅니다. (Contributed by "
"INADA Naoki in :issue:`31671`.)"

#: ../Doc/whatsnew/3.7.rst:1828
#, python-format
msgid ""
"The :meth:`~selectors.BaseSelector.modify` methods of classes "
":class:`selectors.EpollSelector`, :class:`selectors.PollSelector` and "
":class:`selectors.DevpollSelector` may be around 10% faster under heavy "
"loads.  (Contributed by Giampaolo Rodola' in :issue:`30014`)"
msgstr ""
"클래스 :class:`selectors.EpollSelector`, :class:`selectors.PollSelector` 와 "
":class:`selectors.DevpollSelector` 의 "
":meth:`~selectors.BaseSelector.modify` 메서드는 높은 부하가 걸릴 때 10% 정도 더 빨라질 수 "
"있습니다. (Contributed by Giampaolo Rodola' in :issue:`30014`)"

#: ../Doc/whatsnew/3.7.rst:1833
msgid ""
"Constant folding has been moved from the peephole optimizer to the new "
"AST optimizer, which is able perform optimizations more consistently. "
"(Contributed by Eugene Toder and INADA Naoki in :issue:`29469` and "
":issue:`11549`.)"
msgstr ""
"상수 폴딩은 핍홀 최적화기에서 새로운 AST 최적화기로 이동되어, 더욱 일관된 최적화를 수행 할 수 있습니다. "
"(Contributed by Eugene Toder and INADA Naoki in :issue:`29469` and "
":issue:`11549`.)"

#: ../Doc/whatsnew/3.7.rst:1838
msgid ""
"Most functions and methods in :mod:`abc` have been rewritten in C. This "
"makes creation of abstract base classes, and calling :func:`isinstance` "
"and :func:`issubclass` on them 1.5x faster.  This also reduces Python "
"start-up time by up to 10%. (Contributed by Ivan Levkivskyi and INADA "
"Naoki in :issue:`31333`)"
msgstr ""
":mod:`abc` 에 있는 대부분 함수와 메서드는 C로 재작성되었습니다. 이로 인해 추상 베이스 클래스 생성과, 이에 대한 "
":func:`isinstance` 와 :func:`issubclass` 호출이 1.5 배 더 빠릅니다. 또한, 파이썬 시작 시간을 "
"최대 10% 단축합니다. (Contributed by Ivan Levkivskyi and INADA Naoki in "
":issue:`31333`)"

#: ../Doc/whatsnew/3.7.rst:1844
msgid ""
"Significant speed improvements to alternate constructors for "
":class:`datetime.date` and :class:`datetime.datetime` by using fast-path "
"constructors when not constructing subclasses. (Contributed by Paul "
"Ganssle in :issue:`32403`)"
msgstr ""
":class:`datetime.date` 와 :class:`datetime.datetime` 의 대체 생성자의 경우, 서브 클래스를"
" 만들지 않을 때 파이썬 생성자를 우회해서 속도가 현저히 향상되었습니다. (Contributed by Paul Ganssle in "
":issue:`32403`)"

#: ../Doc/whatsnew/3.7.rst:1849
msgid ""
"The speed of comparison of :class:`array.array` instances has been "
"improved considerably in certain cases.  It is now from 10x to 70x faster"
" when comparing arrays holding values of the same integer type. "
"(Contributed by Adrian Wielgosik in :issue:`24700`.)"
msgstr ""
":class:`array.array` 인스턴스의 비교 속도가 어떤 경우에는 상당히 향상되었습니다. 같은 정수 형의 값을 보유한 "
"배열을 비교할 때, 이제는 10배에서 70배 빠릅니다. (Contributed by Adrian Wielgosik in "
":issue:`24700`.)"

#: ../Doc/whatsnew/3.7.rst:1854
msgid ""
"The :func:`math.erf` and :func:`math.erfc` functions now use the (faster)"
" C library implementation on most platforms. (Contributed by Serhiy "
"Storchaka in :issue:`26121`.)"
msgstr ""
":func:`math.erf` 와 :func:`math.erfc` 함수는 이제 대부분 플랫폼에서 (더 빠른) C 라이브러리 구현을 "
"사용합니다. (Contributed by Serhiy Storchaka in :issue:`26121`.)"

#: ../Doc/whatsnew/3.7.rst:1860
msgid "Other CPython Implementation Changes"
msgstr "기타 CPython 구현 변경"

#: ../Doc/whatsnew/3.7.rst:1862
msgid ""
"Trace hooks may now opt out of receiving the ``line`` and opt into "
"receiving the ``opcode`` events from the interpreter by setting the "
"corresponding new ``f_trace_lines`` and ``f_trace_opcodes`` attributes on"
" the frame being traced. (Contributed by Nick Coghlan in :issue:`31344`.)"
msgstr ""
"트레이스 훅은 이제 추적할 프레임의 새로운 ``f_trace_lines`` 와 ``f_trace_opcodes`` 어트리뷰트를 "
"설정하여, 인터프리터로부터 ``line`` 대신 ``opcode`` 이벤트를 수신하도록 선택할 수 있습니다. (Contributed"
" by Nick Coghlan in :issue:`31344`.)"

#: ../Doc/whatsnew/3.7.rst:1867
msgid ""
"Fixed some consistency problems with namespace package module attributes."
" Namespace module objects now have an ``__file__`` that is set to "
"``None`` (previously unset), and their ``__spec__.origin`` is also set to"
" ``None`` (previously the string ``\"namespace\"``).  See :issue:`32305`."
"  Also, the namespace module object's ``__spec__.loader`` is set to the "
"same value as ``__loader__`` (previously, the former was set to "
"``None``).  See :issue:`32303`."
msgstr ""
"이름 공간 패키지 모듈 어트리뷰트에 대한 일관성 문제를 수정했습니다. 이름 공간 모듈 객체는 이제 ``__file__`` 을 "
"``None`` (이전에는 설정되지 않았습니다)으로 설정하고, ``__spec__.origin`` 도 ``None`` (이전에는 "
"문자열 ``\"namespace\"``)으로 설정됩니다. :issue:`32305`\\를 참조하세요. 또한, 이름 공간 모듈 객체의"
" ``__spec__.loader`` 는 ``__loader__`` 와 같은 값으로 설정됩니다 (이전에는 ``None`` 으로 "
"설정되었습니다). :issue:`32303`\\을 참조하세요."

#: ../Doc/whatsnew/3.7.rst:1875
msgid ""
"The :func:`locals` dictionary now displays in the lexical order that "
"variables were defined.  Previously, the order was undefined. "
"(Contributed by Raymond Hettinger in :issue:`32690`.)"
msgstr ""
":func:`locals` 딕셔너리는 이제 변수가 정의된 어휘 순서로 표시됩니다. 이전에는 순서가 정의되지 않았습니다. "
"(Contributed by Raymond Hettinger in :issue:`32690`.)"

#: ../Doc/whatsnew/3.7.rst:1879
msgid ""
"The :mod:`distutils` ``upload`` command no longer tries to change CR end-"
"of-line characters to CRLF.  This fixes a corruption issue with sdists "
"that ended with a byte equivalent to CR. (Contributed by Bo Bayles in "
":issue:`32304`.)"
msgstr ""
":mod:`distutils` ``upload`` 명령은 더는 CR 줄 마침 문자를 CRLF로 바꾸려고 시도하지 않습니다. 이것은 "
"CR에 해당하는 바이트로 끝나는 sdists의 손상 문제를 수정합니다. (Contributed by Bo Bayles in "
":issue:`32304`.)"

#: ../Doc/whatsnew/3.7.rst:1886
msgid "Deprecated Python Behavior"
msgstr "폐지된 파이썬 동작"

#: ../Doc/whatsnew/3.7.rst:1888
msgid ""
"Yield expressions (both ``yield`` and ``yield from`` clauses) are now "
"deprecated in comprehensions and generator expressions (aside from the "
"iterable expression in the leftmost :keyword:`for` clause). This ensures "
"that comprehensions always immediately return a container of the "
"appropriate type (rather than potentially returning a :term:`generator "
"iterator` object), while generator expressions won't attempt to "
"interleave their implicit output with the output from any explicit yield "
"expressions.  In Python 3.7, such expressions emit "
":exc:`DeprecationWarning` when compiled, in Python 3.8 this will be a "
":exc:`SyntaxError`. (Contributed by Serhiy Storchaka in :issue:`10544`.)"
msgstr ""
"일드 표현식(``yield`` 와 ``yield from`` 절 모두)은 이제 컴프리헨션과 제너레이터 표현식에서 폐지되었습니다 "
"(가장 왼쪽의 :keyword:`for` 절의 이터러블 표현식은 제외합니다). 이것은 컴프리헨션이 언제나 적절한 유형의 컨테이너를 "
"즉시 반환하도록 하고(잠재적으로 :term:`제너레이터 이터레이터 <generator iterator>` 객체를 반환하는 것이 "
"아니라), 제너레이터 표현식이 명시적 일드 표현식의 출력 중간에 묵시적 출력을 끼워 넣으려고 시도하지 못하게 하기 위함입니다. "
"파이썬 3.7에서 이러한 표현식은 컴파일될 때 :exc:`DeprecationWarning` 을 내보내고, 파이썬 3.8에서는 "
":exc:`SyntaxError` 가 됩니다. (Contributed by Serhiy Storchaka in "
":issue:`10544`.)"

#: ../Doc/whatsnew/3.7.rst:1899
msgid ""
"Returning a subclass of :class:`complex` from :meth:`object.__complex__` "
"is deprecated and will be an error in future Python versions.  This makes"
" ``__complex__()`` consistent with :meth:`object.__int__` and "
":meth:`object.__float__`. (Contributed by Serhiy Storchaka in "
":issue:`28894`.)"
msgstr ""
":class:`complex` 의 서브 클래스를 :meth:`object.__complex__` 에서 반환하는 것은 폐지되었고, "
"향후 파이썬 버전에서 에러가 발생할 것입니다. 이것은 ``__complex__()`` 를 :meth:`object.__int__` "
"및 :meth:`object.__float__` 와 일관성 있도록 만듭니다. (Contributed by Serhiy "
"Storchaka in :issue:`28894`.)"

#: ../Doc/whatsnew/3.7.rst:1908
msgid "Deprecated Python modules, functions and methods"
msgstr "폐지된 파이썬 모듈, 함수 및 메서드"

#: ../Doc/whatsnew/3.7.rst:1911
msgid "aifc"
msgstr "aifc"

#: ../Doc/whatsnew/3.7.rst:1913
msgid ""
":func:`aifc.openfp` has been deprecated and will be removed in Python "
"3.9. Use :func:`aifc.open` instead. (Contributed by Brian Curtin in "
":issue:`31985`.)"
msgstr ""
":func:`aifc.openfp` 는 폐지되었고 파이썬 3.9에서 제거될 것입니다. 대신에 :func:`aifc.open` 을 "
"사용하십시오. (Contributed by Brian Curtin in :issue:`31985`.)"

#: ../Doc/whatsnew/3.7.rst:1923
msgid ""
"Support for directly ``await``-ing instances of :class:`asyncio.Lock` and"
" other asyncio synchronization primitives has been deprecated.  An "
"asynchronous context manager must be used in order to acquire and release"
" the synchronization resource.  See :ref:`async-with-locks` for more "
"information. (Contributed by Andrew Svetlov in :issue:`32253`.)"
msgstr ""
":class:`asyncio.Lock` 및 다른 asyncio 동기화 프리미티브의 인스턴스를 직접 ``await`` 하는 지원은 "
"폐지되었습니다. 동기화 자원을 획득하고 해제하기 위해서는 비동기 컨텍스트 관리자를 사용해야 합니다. 자세한 정보는 :ref"
":`async-with-locks`\\를 보십시오. (Contributed by Andrew Svetlov in "
":issue:`32253`.)"

#: ../Doc/whatsnew/3.7.rst:1930
msgid ""
"The :meth:`asyncio.Task.current_task` and :meth:`asyncio.Task.all_tasks` "
"methods have been deprecated. (Contributed by Andrew Svetlov in "
":issue:`32250`.)"
msgstr ""
":meth:`asyncio.Task.current_task`\\와 :meth:`asyncio.Task.all_tasks` 메서드는 "
"폐지되었습니다. (Contributed by Andrew Svetlov in :issue:`32250`.)"

#: ../Doc/whatsnew/3.7.rst:1938
msgid ""
"In Python 3.8, the abstract base classes in :mod:`collections.abc` will "
"no longer be exposed in the regular :mod:`collections` module.  This will"
" help create a clearer distinction between the concrete classes and the "
"abstract base classes. (Contributed by Serhiy Storchaka in "
":issue:`25988`.)"
msgstr ""
"파이썬 3.8에서, :mod:`collections.abc` 의 추상 베이스 클래스는 더는 :mod:`collections` 모듈에"
" 노출되지 않습니다. 이것은 구상 클래스와 추상 베이스 클래스 사이의 명확한 구분을 만드는 데 도움이 됩니다. "
"(Contributed by Serhiy Storchaka in :issue:`25988`.)"

#: ../Doc/whatsnew/3.7.rst:1948
msgid ""
":mod:`dbm.dumb` now supports reading read-only files and no longer writes"
" the index file when it is not changed.  A deprecation warning is now "
"emitted if the index file is missing and recreated in the ``'r'`` and "
"``'w'`` modes (this will be an error in future Python releases). "
"(Contributed by Serhiy Storchaka in :issue:`28847`.)"
msgstr ""
":mod:`dbm.dumb` 은 이제 읽기 전용 파일 읽기를 지원하며 변경되지 않았을 때 더는 색인 파일을 쓰지 않습니다. "
"``'r'`` 및 ``'w'`` 모드에서 색인 파일이 빠지고 새로 만들어지면, 이제 폐지 경고가 표시됩니다 (향후의 파이썬 "
"배포에서는 에러가 발생합니다). (Contributed by Serhiy Storchaka in :issue:`28847`.)"

#: ../Doc/whatsnew/3.7.rst:1958
msgid ""
"In Python 3.8, attempting to check for non-Enum objects in :class:`Enum` "
"classes will raise a :exc:`TypeError` (e.g. ``1 in Color``); similarly, "
"attempting to check for non-Flag objects in a :class:`Flag` member will "
"raise :exc:`TypeError` (e.g. ``1 in Perm.RW``); currently, both "
"operations return :const:`False` instead. (Contributed by Ethan Furman in"
" :issue:`33217`.)"
msgstr ""
"파이썬 3.8에서, :class:`Enum` 클래스에서 열거형 이외의 객체가 포함되었는지 검사하려고 하면 "
":exc:`TypeError` 가 발생합니다 (예 ``1 in Color``); 마찬가지로 플래그가 아닌 객체를 "
":class:`Flag` 멤버에 포함되었는지 검사하려고 하면 :exc:`TypeError` 가 발생합니다 (예 ``1 in "
"Perm.RW``); 현재 두 연산 모두 대신 :const:`False`\\를 반환합니다. (Contributed by Ethan "
"Furman in :issue:`33217`.)"

#: ../Doc/whatsnew/3.7.rst:1967
msgid "gettext"
msgstr "gettext"

#: ../Doc/whatsnew/3.7.rst:1969
msgid ""
"Using non-integer value for selecting a plural form in :mod:`gettext` is "
"now deprecated.  It never correctly worked. (Contributed by Serhiy "
"Storchaka in :issue:`28692`.)"
msgstr ""
":mod:`gettext` 에서 복수형을 선택하기 위해 정수가 아닌 값을 사용하는 것이 폐지되었습니다. 올바르게 작동된 적이 "
"없습니다. (Contributed by Serhiy Storchaka in :issue:`28692`.)"

#: ../Doc/whatsnew/3.7.rst:1977
msgid ""
"Methods :meth:`MetaPathFinder.find_module() "
"<importlib.abc.MetaPathFinder.find_module>` (replaced by "
":meth:`MetaPathFinder.find_spec() "
"<importlib.abc.MetaPathFinder.find_spec>`) and "
":meth:`PathEntryFinder.find_loader() "
"<importlib.abc.PathEntryFinder.find_loader>` (replaced by "
":meth:`PathEntryFinder.find_spec() "
"<importlib.abc.PathEntryFinder.find_spec>`) both deprecated in Python 3.4"
" now emit :exc:`DeprecationWarning`. (Contributed by Matthias Bussonnier "
"in :issue:`29576`)"
msgstr ""
"메서드 :meth:`MetaPathFinder.find_module() "
"<importlib.abc.MetaPathFinder.find_module>` "
"(:meth:`MetaPathFinder.find_spec() "
"<importlib.abc.MetaPathFinder.find_spec>` 로 대체되었습니다)와 "
":meth:`PathEntryFinder.find_loader() "
"<importlib.abc.PathEntryFinder.find_loader>` "
"(:meth:`PathEntryFinder.find_spec() "
"<importlib.abc.PathEntryFinder.find_spec>` 로 대체되었습니다) 는 둘 다 파이썬 3.4에서 "
"폐지되었고, 이제는 :exc:`DeprecationWarning` 을 일으킵니다. (Contributed by Matthias "
"Bussonnier in :issue:`29576`)"

#: ../Doc/whatsnew/3.7.rst:1988
msgid ""
"The :class:`importlib.abc.ResourceLoader` ABC has been deprecated in "
"favour of :class:`importlib.abc.ResourceReader`."
msgstr ""
":class:`importlib.abc.ResourceLoader` ABC는 폐지되었고, 대신 "
":class:`importlib.abc.ResourceReader` 를 사용합니다."

#: ../Doc/whatsnew/3.7.rst:1995
msgid ""
":func:`locale.format` has been deprecated, use "
":meth:`locale.format_string` instead.  (Contributed by Garvit in "
":issue:`10379`.)"
msgstr ""
":func:`locale.format` 은 폐지되었습니다. 대신 :meth:`locale.format_string`\\을 "
"사용하십시오. (Contributed by Garvit in :issue:`10379`.)"

#: ../Doc/whatsnew/3.7.rst:2000
msgid "macpath"
msgstr "macpath"

#: ../Doc/whatsnew/3.7.rst:2002
msgid ""
"The :mod:`macpath` is now deprecated and will be removed in Python 3.8. "
"(Contributed by Chi Hsuan Yen in :issue:`9850`.)"
msgstr ""
":mod:`macpath` 는 이제 폐지되었고 파이썬 3.8에서 제거될 것입니다. (Contributed by Chi Hsuan "
"Yen in :issue:`9850`.)"

#: ../Doc/whatsnew/3.7.rst:2007
msgid "threading"
msgstr "threading"

#: ../Doc/whatsnew/3.7.rst:2009
msgid ""
":mod:`dummy_threading` and :mod:`_dummy_thread` have been deprecated.  It"
" is no longer possible to build Python with threading disabled. Use "
":mod:`threading` instead. (Contributed by Antoine Pitrou in "
":issue:`31370`.)"
msgstr ""
":mod:`dummy_threading`\\과 :mod:`_dummy_thread` 는 폐지되었습니다. 스레딩을 비활성화하여 "
"파이썬을 빌드하는 것이 더는 가능하지 않습니다. 대신 :mod:`threading`\\을 사용하십시오. (Contributed by"
" Antoine Pitrou in :issue:`31370`.)"

#: ../Doc/whatsnew/3.7.rst:2018
msgid ""
"The silent argument value trunctation in :func:`socket.htons` and "
":func:`socket.ntohs` has been deprecated.  In future versions of Python, "
"if the passed argument is larger than 16 bits, an exception will be "
"raised. (Contributed by Oren Milman in :issue:`28332`.)"
msgstr ""
":func:`socket.htons` 와 :func:`socket.ntohs` 에서 자동 인자 값 자름은 폐지되었습니다. 이후 "
"버전의 파이썬에서는 전달된 인자가 16비트보다 큰 경우 예외가 발생합니다. (Contributed by Oren Milman in "
":issue:`28332`.)"

#: ../Doc/whatsnew/3.7.rst:2027
msgid ""
":func:`ssl.wrap_socket` is deprecated.  Use "
":meth:`ssl.SSLContext.wrap_socket` instead. (Contributed by Christian "
"Heimes in :issue:`28124`.)"
msgstr ""
":func:`ssl.wrap_socket` 은 폐지되었습니다. 대신 "
":meth:`ssl.SSLContext.wrap_socket`\\을 사용하십시오. (Contributed by Christian "
"Heimes in :issue:`28124`.)"

#: ../Doc/whatsnew/3.7.rst:2033
msgid "sunau"
msgstr "sunau"

#: ../Doc/whatsnew/3.7.rst:2035
msgid ""
":func:`sunau.openfp` has been deprecated and will be removed in Python "
"3.9. Use :func:`sunau.open` instead. (Contributed by Brian Curtin in "
":issue:`31985`.)"
msgstr ""
":func:`sunau.openfp` 는 폐지되었고 파이썬 3.9에서 제거될 것입니다. 대신에 :func:`sunau.open` 을"
" 사용하십시오. (Contributed by Brian Curtin in :issue:`31985`.)"

#: ../Doc/whatsnew/3.7.rst:2043
msgid ""
"Deprecated :func:`sys.set_coroutine_wrapper` and "
":func:`sys.get_coroutine_wrapper`."
msgstr ""
":func:`sys.set_coroutine_wrapper`\\와 :func:`sys.get_coroutine_wrapper`\\를"
" 폐지했습니다."

#: ../Doc/whatsnew/3.7.rst:2046
msgid ""
"The undocumented ``sys.callstats()`` function has been deprecated and "
"will be removed in a future Python version. (Contributed by Victor "
"Stinner in :issue:`28799`.)"
msgstr ""
"문서로 만들어지지 않은 ``sys.callstats()`` 함수는 폐지되었고 향후 파이썬 버전에서 제거될 것입니다. "
"(Contributed by Victor Stinner in :issue:`28799`.)"

#: ../Doc/whatsnew/3.7.rst:2052
msgid "wave"
msgstr "wave"

#: ../Doc/whatsnew/3.7.rst:2054
msgid ""
":func:`wave.openfp` has been deprecated and will be removed in Python "
"3.9. Use :func:`wave.open` instead. (Contributed by Brian Curtin in "
":issue:`31985`.)"
msgstr ""
":func:`wave.openfp` 는 폐지되었고 파이썬 3.9에서 제거될 것입니다. 대신 :func:`wave.open` 을 "
"사용하십시오. (Contributed by Brian Curtin in :issue:`31985`.)"

#: ../Doc/whatsnew/3.7.rst:2060
msgid "Deprecated functions and types of the C API"
msgstr "폐지된 C API의 함수 및 형"

#: ../Doc/whatsnew/3.7.rst:2062
msgid ""
"Function :c:func:`PySlice_GetIndicesEx` is deprecated and replaced with a"
" macro if ``Py_LIMITED_API`` is not set or set to a value in the range "
"between ``0x03050400`` and ``0x03060000`` (not inclusive), or is "
"``0x03060100`` or higher.  (Contributed by Serhiy Storchaka in "
":issue:`27867`.)"
msgstr ""
"함수 :c:func:`PySlice_GetIndicesEx` 는 폐지되었고, ``Py_LIMITED_API`` 가 설정되어 있지 "
"않거나 ``0x03050400`` 과 ``0x03060000`` (포함되지 않음) 사이의 값이나 ``0x03060100`` 이상의 "
"값으로 설정되어 있으면 매크로로 대체됩니다. (Contributed by Serhiy Storchaka in "
":issue:`27867`.)"

#: ../Doc/whatsnew/3.7.rst:2067
msgid ""
":c:func:`PyOS_AfterFork` has been deprecated.  Use "
":c:func:`PyOS_BeforeFork`, :c:func:`PyOS_AfterFork_Parent` or "
":c:func:`PyOS_AfterFork_Child()` instead. (Contributed by Antoine Pitrou "
"in :issue:`16500`.)"
msgstr ""
":c:func:`PyOS_AfterFork` 는 폐지되었습니다. :c:func:`PyOS_BeforeFork`, "
":c:func:`PyOS_AfterFork_Parent` 또는 :c:func:`PyOS_AfterFork_Child()` 를 대신 "
"사용하십시오. (Contributed by Antoine Pitrou in :issue:`16500`.)"

#: ../Doc/whatsnew/3.7.rst:2073
msgid "Platform Support Removals"
msgstr "플랫폼 지원 제거"

#: ../Doc/whatsnew/3.7.rst:2075
msgid "FreeBSD 9 and older are no longer officially supported."
msgstr "FreeBSD 9와 그 이전 버전은 더는 공식적으로 지원되지 않습니다."

#: ../Doc/whatsnew/3.7.rst:2079
msgid "API and Feature Removals"
msgstr "API 및 기능 제거"

#: ../Doc/whatsnew/3.7.rst:2081
msgid "The following features and APIs have been removed from Python 3.7:"
msgstr "다음 기능과 API는 파이썬 3.7에서 제거되었습니다:"

#: ../Doc/whatsnew/3.7.rst:2083
msgid ""
"The ``os.stat_float_times()`` function has been removed. It was "
"introduced in Python 2.3 for backward compatibility with Python 2.2, and "
"was deprecated since Python 3.1."
msgstr ""
"``os.stat_float_times()`` 함수가 제거되었습니다. 이것은 파이썬 2.2와의 하위 호환성을 위해 파이썬 2.3에서"
" 소개되었으며 파이썬 3.1부터 폐지되었습니다."

#: ../Doc/whatsnew/3.7.rst:2087
msgid ""
"Unknown escapes consisting of ``'\\'`` and an ASCII letter in replacement"
" templates for :func:`re.sub` were deprecated in Python 3.5, and will now"
" cause an error."
msgstr ""
":func:`re.sub` 의 대체 템플릿에 있는 ``'\\'`` 와 ASCII 글자로 이루어진 알 수 없는 이스케이프는 파이썬 "
"3.5에서 폐지되었고, 이제는 에러를 일으킵니다."

#: ../Doc/whatsnew/3.7.rst:2091
msgid ""
"Removed support of the *exclude* argument in :meth:`tarfile.TarFile.add`."
" It was deprecated in Python 2.7 and 3.2.  Use the *filter* argument "
"instead."
msgstr ""
":meth:`tarfile.TarFile.add` 에서 *exclude* 인자의 지원이 제거되었습니다. 파이썬 2.7 및 3.2에서"
" 폐지되었습니다. 대신 *filter* 인자를 사용하십시오."

#: ../Doc/whatsnew/3.7.rst:2094
msgid ""
"The ``splitunc()`` function in the :mod:`ntpath` module was deprecated in"
" Python 3.1, and has now been removed.  Use the "
":func:`~os.path.splitdrive` function instead."
msgstr ""
":mod:`ntpath` 모듈의 ``splitunc()`` 함수는 파이썬 3.1에서 폐지되었고, 이제 제거되었습니다. 대신에 "
":func:`~os.path.splitdrive` 함수를 사용하십시오."

#: ../Doc/whatsnew/3.7.rst:2098
msgid ""
":func:`collections.namedtuple` no longer supports the *verbose* parameter"
" or ``_source`` attribute which showed the generated source code for the "
"named tuple class.  This was part of an optimization designed to speed-up"
" class creation.  (Contributed by Jelle Zijlstra with further "
"improvements by INADA Naoki, Serhiy Storchaka, and Raymond Hettinger in "
":issue:`28638`.)"
msgstr ""
":func:`collections.namedtuple`\\은 네임드 튜플 클래스에 대해 생성된 소스 코드를 보여주는 "
"*verbose* 매개 변수 나 ``_source`` 어트리뷰트를 더는 지원하지 않습니다. 이것은 클래스 생성 속도를 높이기 위해 "
"고안된 최적화 일부입니다. (Contributed by Jelle Zijlstra with further improvements "
"by INADA Naoki, Serhiy Storchaka, and Raymond Hettinger in "
":issue:`28638`.)"

#: ../Doc/whatsnew/3.7.rst:2104
msgid ""
"Functions :func:`bool`, :func:`float`, :func:`list` and :func:`tuple` no "
"longer take keyword arguments.  The first argument of :func:`int` can now"
" be passed only as positional argument."
msgstr ""
"함수 :func:`bool`, :func:`float`, :func:`list` 그리고 :func:`tuple` 은 더는 키워드 "
"인자를 취하지 않습니다. :func:`int` 의 첫 번째 인자는 이제 위치 인자로만 전달될 수 있습니다."

#: ../Doc/whatsnew/3.7.rst:2108
msgid ""
"Removed previously deprecated in Python 2.4 classes ``Plist``, ``Dict`` "
"and ``_InternalDict`` in the :mod:`plistlib` module.  Dict values in the "
"result of functions :func:`~plistlib.readPlist` and "
":func:`~plistlib.readPlistFromBytes` are now normal dicts.  You no longer"
" can use attribute access to access items of these dictionaries."
msgstr ""
":mod:`plistlib` 모듈에서, 이전에 파이썬 2.4에서 폐지된 클래스 ``Plist``, ``Dict``, "
"``_InternalDict`` 가 제거되었습니다. :func:`~plistlib.readPlist` 함수와 "
":func:`~plistlib.readPlistFromBytes` 함수의 결과에서 Dict 값은 이제 정상적인 딕셔너리입니다. 더는"
" 어트리뷰트 액세스를 사용하여 이러한 딕셔너리의 항목에 액세스할 수 없습니다."

#: ../Doc/whatsnew/3.7.rst:2114
msgid ""
"The ``asyncio.windows_utils.socketpair()`` function has been removed.  "
"Use the :func:`socket.socketpair` function instead, it is available on "
"all platforms since Python 3.5. ``asyncio.windows_utils.socketpair`` was "
"just an alias to ``socket.socketpair`` on Python 3.5 and newer."
msgstr ""
"``asyncio.windows_utils.socketpair()`` 함수가 삭제되었습니다. 대신에 "
":func:`socket.socketpair` 함수를 사용하십시오. 파이썬 3.5부터 모든 플랫폼에서 사용할 수 있습니다. "
"``asyncio.windows_utils.socketpair`` 는 파이썬 3.5 이상에서 ``socket.socketpair``"
" 의 별칭이었습니다."

#: ../Doc/whatsnew/3.7.rst:2120
msgid ""
":mod:`asyncio` no longer exports the :mod:`selectors` and "
":mod:`_overlapped` modules as ``asyncio.selectors`` and "
"``asyncio._overlapped``. Replace ``from asyncio import selectors`` with "
"``import selectors``."
msgstr ""
":mod:`asyncio` 는 더는 :mod:`selectors`\\와 :mod:`_overlapped` 모듈을 "
"``asyncio.selectors`` 와 ``asyncio._overlapped`` 로 노출하지 않습니다. ``from "
"asyncio import selectors`` 를 ``import selectors`` 로 대체하십시오."

#: ../Doc/whatsnew/3.7.rst:2125
msgid ""
"Direct instantiation of :class:`ssl.SSLSocket` and :class:`ssl.SSLObject`"
" objects is now prohibited. The constructors were never documented, "
"tested, or designed as public constructors.  Users were supposed to use "
":func:`ssl.wrap_socket` or :class:`ssl.SSLContext`. (Contributed by "
"Christian Heimes in :issue:`32951`.)"
msgstr ""
":class:`ssl.SSLSocket` 과 :class:`ssl.SSLObject` 객체의 직접적인 인스턴스 생성이 "
"금지되었습니다. 생성자는 공개 생성자로서 문서화, 테스트 또는 설계되지 않았습니다. 사용자는 "
":func:`ssl.wrap_socket` 또는 :class:`ssl.SSLContext` 를 사용해야 합니다. "
"(Contributed by Christian Heimes in :issue:`32951`.)"

#: ../Doc/whatsnew/3.7.rst:2131
msgid ""
"The unused :mod:`distutils` ``install_misc`` command has been removed. "
"(Contributed by Eric N. Vander Weele in :issue:`29218`.)"
msgstr ""
"사용되지 않는 :mod:`distutils` ``install_misc`` 명령이 제거되었습니다. (Contributed by "
"Eric N. Vander Weele in :issue:`29218`.)"

#: ../Doc/whatsnew/3.7.rst:2136
msgid "Module Removals"
msgstr "모듈 제거"

#: ../Doc/whatsnew/3.7.rst:2138
msgid ""
"The ``fpectl`` module has been removed.  It was never enabled by default,"
" never worked correctly on x86-64, and it changed the Python ABI in ways "
"that caused unexpected breakage of C extensions. (Contributed by "
"Nathaniel J. Smith in :issue:`29137`.)"
msgstr ""
"``fpectl`` 모듈이 삭제되었습니다. 기본적으로 활성화된 적이 없고, x86-64에서 제대로 작동한 적도 없고, 예기치 않게 "
"C 확장을 깨뜨리는 방식으로 파이썬 ABI를 변경했습니다. (Contributed by Nathaniel J. Smith in "
":issue:`29137`.)"

#: ../Doc/whatsnew/3.7.rst:2145 ../Doc/whatsnew/3.7.rst:2411
msgid "Windows-only Changes"
msgstr "윈도우 전용 변경"

#: ../Doc/whatsnew/3.7.rst:2147
msgid ""
"The python launcher, (py.exe), can accept 32 & 64 bit specifiers "
"**without** having to specify a minor version as well. So ``py -3-32`` "
"and ``py -3-64`` become valid as well as ``py -3.7-32``, also the -*m*-64"
" and -*m.n*-64 forms are now accepted to force 64 bit python even if 32 "
"bit would have otherwise been used. If the specified version is not "
"available py.exe will error exit. (Contributed by Steve Barnes in "
":issue:`30291`.)"
msgstr ""
"파이썬 런처(py.exe)는 32비트와 64비트 지정자를 받아들일 수 있는데, 마이너 버전을 지정하지 **않아도** 됩니다. 그래서"
" ``py -3.7-32`` 뿐만 아니라 ``py -3-32`` 와 ``py -3-64`` 도 유효합니다. 또한 -*m*-64와 "
"-*m.n*-64 형식도 이제 받아들이는데, 지정하지 않을 때 32비트가 사용되는 경우도 64비트 파이썬을 강제합니다. 지정된 "
"버전을 사용할 수 없는 경우 py.exe가 에러를 일으키며 종료됩니다. (Contributed by Steve Barnes in "
":issue:`30291`.)"

#: ../Doc/whatsnew/3.7.rst:2154
msgid ""
"The launcher can be run as ``py -0`` to produce a list of the installed "
"pythons, *with default marked with an asterisk*. Running ``py -0p`` will "
"include the paths. If py is run with a version specifier that cannot be "
"matched it will also print the *short form* list of available specifiers."
" (Contributed by Steve Barnes in :issue:`30362`.)"
msgstr ""
"런처는 ``py -0`` 처럼 실행시킬 수 있는데, 설치되어있는 파이썬의 목록을 만들고, *기본값을 애스터리스크로 표시합니다*. "
"``py -0p`` 를 실행하면 경로가 포함됩니다. py가 일치할 수 없는 버전 지정자로 실행되면 사용 가능한 지정자의 *짧은 "
"양식* 목록도 인쇄됩니다. (Contributed by Steve Barnes in :issue:`30362`.)"

#: ../Doc/whatsnew/3.7.rst:2164
msgid "Porting to Python 3.7"
msgstr "파이썬 3.7로 이식하기"

#: ../Doc/whatsnew/3.7.rst:2166
msgid ""
"This section lists previously described changes and other bugfixes that "
"may require changes to your code."
msgstr "이 섹션에서는 여러분의 코드 수정을 요구하는 앞서 설명한 변경 사항과 버그 수정을 나열합니다."

#: ../Doc/whatsnew/3.7.rst:2171
msgid "Changes in Python Behavior"
msgstr "파이썬 동작의 변경"

#: ../Doc/whatsnew/3.7.rst:2173
msgid ""
":keyword:`async` and :keyword:`await` names are now reserved keywords. "
"Code using these names as identifiers will now raise a "
":exc:`SyntaxError`. (Contributed by Jelle Zijlstra in :issue:`30406`.)"
msgstr ""
":keyword:`async`\\와 :keyword:`await` 이름은 이제 예약 키워드입니다. 이 이름을 식별자로 사용하는 "
"코드는 이제 :exc:`SyntaxError` 를 발생시킵니다. (Contributed by Jelle Zijlstra in "
":issue:`30406`.)"

#: ../Doc/whatsnew/3.7.rst:2177
msgid ""
":pep:`479` is enabled for all code in Python 3.7, meaning that "
":exc:`StopIteration` exceptions raised directly or indirectly in "
"coroutines and generators are transformed into :exc:`RuntimeError` "
"exceptions. (Contributed by Yury Selivanov in :issue:`32670`.)"
msgstr ""
":pep:`479` 는 파이썬 3.7의 모든 코드에서 활성화되었습니다. 즉 코루틴과 제너레이터에서 직접 또는 간접적으로 발생하는 "
":exc:`StopIteration` 예외는 :exc:`RuntimeError` 예외로 변환됩니다. (Contributed by "
"Yury Selivanov in :issue:`32670`.)"

#: ../Doc/whatsnew/3.7.rst:2183
msgid ""
":meth:`object.__aiter__` methods can no longer be declared as "
"asynchronous.  (Contributed by Yury Selivanov in :issue:`31709`.)"
msgstr ""
":meth:`object.__aiter__` 메서드는 더는 비동기로 선언될 수 없습니다. (Contributed by Yury "
"Selivanov in :issue:`31709`.)"

#: ../Doc/whatsnew/3.7.rst:2186
msgid ""
"Due to an oversight, earlier Python versions erroneously accepted the "
"following syntax::"
msgstr "못 보고 넘기는 바람에, 이전 파이썬 버전에서 다음 문법이 받아들여 지는 잘못이 있었습니다::"

#: ../Doc/whatsnew/3.7.rst:2194
msgid ""
"Python 3.7 now correctly raises a :exc:`SyntaxError`, as a generator "
"expression always needs to be directly inside a set of parentheses and "
"cannot have a comma on either side, and the duplication of the "
"parentheses can be omitted only on calls. (Contributed by Serhiy "
"Storchaka in :issue:`32012` and :issue:`32023`.)"
msgstr ""
"파이썬 3.7은 이제 올바르게 :exc:`SyntaxError` 를 일으킵니다. 제너레이터 표현식은 항상 괄호 안에 바로 들어가 "
"있어야 하며 양쪽에 쉼표를 넣을 수 없고 중복된 괄호는 오직 호출 시에만 생략 할 수 있습니다. (Contributed by "
"Serhiy Storchaka in :issue:`32012` and :issue:`32023`.)"

#: ../Doc/whatsnew/3.7.rst:2200
msgid ""
"When using the :option:`-m` switch, the initial working directory is now "
"added to :data:`sys.path`, rather than an empty string (which dynamically"
" denoted the current working directory at the time of each import). Any "
"programs that are checking for the empty string, or otherwise relying on "
"the previous behaviour, will need to be updated accordingly (e.g. by also"
" checking for ``os.getcwd()`` or ``os.path.dirname(__main__.__file__)``, "
"depending on why the code was checking for the empty string in the first "
"place)."
msgstr ""
":option:`-m` 스위치를 사용할 때, 이제 빈 문자열 대신에 초기 작업 디렉터리가 :data:`sys.path` 에 "
"추가됩니다 (빈 문자열은 각 임포트 시점의 작업 디렉터리가 동적으로 적용되게 만듭니다). 빈 문자열을 검사하는 프로그램이나 이전 "
"동작에 의존하는 프로그램은 그에 따라 업데이트해야 합니다 (예를 들어, 왜 코드가 빈 문자열을 검사했는지에 따라 "
"``os.getcwd()`` 또는 ``os.path.dirname(__main__.__file__)`` 도 검사해서)."

#: ../Doc/whatsnew/3.7.rst:2210
msgid "Changes in the Python API"
msgstr "파이썬 API의 변경"

#: ../Doc/whatsnew/3.7.rst:2212
msgid ""
":meth:`socketserver.ThreadingMixIn.server_close` now waits until all non-"
"daemon threads complete.  Set the new "
":attr:`socketserver.ThreadingMixIn.block_on_close` class attribute to "
"``False`` to get the pre-3.7 behaviour. (Contributed by Victor Stinner in"
" :issue:`31233` and :issue:`33540`.)"
msgstr ""
":meth:`socketserver.ThreadingMixIn.server_close` 는 이제 모든 데몬이 아닌 스레드가 완료될 "
"때까지 대기합니다. 3.7 이전의 동작을 얻으려면 새로운 "
":attr:`socketserver.ThreadingMixIn.block_on_close` 클래스 어트리뷰트를 ``False`` 로"
" 설정하십시오. (Contributed by Victor Stinner in :issue:`31233` and "
":issue:`33540`.)"

#: ../Doc/whatsnew/3.7.rst:2218
msgid ""
":meth:`socketserver.ForkingMixIn.server_close` now waits until all child "
"processes complete. Set the new "
":attr:`socketserver.ForkingMixIn.block_on_close` class attribute to "
"``False`` to get the pre-3.7 behaviour. (Contributed by Victor Stinner in"
" :issue:`31151` and :issue:`33540`.)"
msgstr ""
":meth:`socketserver.ForkingMixIn.server_close` 는 이제 모든 자식 프로세스가 완료될 때까지 "
"대기합니다. 3.7 이전의 동작을 얻으려면 새로운 "
":attr:`socketserver.ForkingMixIn.block_on_close` 클래스 어트리뷰트를 ``False`` 로 "
"설정하십시오. (Contributed by Victor Stinner in :issue:`31151` and "
":issue:`33540`.)"

#: ../Doc/whatsnew/3.7.rst:2224
msgid ""
"The :func:`locale.localeconv` function now temporarily sets the "
"``LC_CTYPE`` locale to the value of ``LC_NUMERIC`` in some cases. "
"(Contributed by Victor Stinner in :issue:`31900`.)"
msgstr ""
":func:`locale.localeconv` 함수는 이제 일시적으로 ``LC_CTYPE`` 로케일을 ``LC_NUMERIC`` 의"
" 값으로 설정하는 때도 있습니다. (Contributed by Victor Stinner in :issue:`31900`.)"

#: ../Doc/whatsnew/3.7.rst:2228
msgid ""
":meth:`pkgutil.walk_packages` now raises a :exc:`ValueError` if *path* is"
" a string.  Previously an empty list was returned. (Contributed by Sanyam"
" Khurana in :issue:`24744`.)"
msgstr ""
":meth:`pkgutil.walk_packages` 는 *path* 가 문자열이면 :exc:`ValueError` 를 "
"발생시킵니다. 이전에는 빈 리스트가 반환되었습니다. (Contributed by Sanyam Khurana in "
":issue:`24744`.)"

#: ../Doc/whatsnew/3.7.rst:2232
msgid ""
"A format string argument for :meth:`string.Formatter.format` is now :ref"
":`positional-only <positional-only_parameter>`. Passing it as a keyword "
"argument was deprecated in Python 3.5. (Contributed by Serhiy Storchaka "
"in :issue:`29193`.)"
msgstr ""
":meth:`string.Formatter.format` 의 포맷 문자열 인자는 이제 :ref:`위치-전용 <positional-"
"only_parameter>` 입니다. 키워드 인자로 전달하는 것은 파이썬 3.5에서 폐지되었습니다. (Contributed by "
"Serhiy Storchaka in :issue:`29193`.)"

#: ../Doc/whatsnew/3.7.rst:2237
msgid ""
"Attributes :attr:`~http.cookies.Morsel.key`, "
":attr:`~http.cookies.Morsel.value` and "
":attr:`~http.cookies.Morsel.coded_value` of class "
":class:`http.cookies.Morsel` are now read-only. Assigning to them was "
"deprecated in Python 3.5. Use the :meth:`~http.cookies.Morsel.set` method"
" for setting them. (Contributed by Serhiy Storchaka in :issue:`29192`.)"
msgstr ""
"클래스 :class:`http.cookies.Morsel` 의 어트리뷰트 "
":attr:`~http.cookies.Morsel.key`, :attr:`~http.cookies.Morsel.value` 및 "
":attr:`~http.cookies.Morsel.coded_value` 는 이제 읽기 전용입니다. 그들에게 대입하는 것은 파이썬 "
"3.5에서 폐지되었습니다. 그것들을 설정하려면 :meth:`~http.cookies.Morsel.set` 메서드를 사용하십시오. "
"(Contributed by Serhiy Storchaka in :issue:`29192`.)"

#: ../Doc/whatsnew/3.7.rst:2245
msgid ""
"The *mode* argument of :func:`os.makedirs` no longer affects the file "
"permission bits of newly-created intermediate-level directories. To set "
"their file permission bits you can set the umask before invoking "
"``makedirs()``. (Contributed by Serhiy Storchaka in :issue:`19930`.)"
msgstr ""
":func:`os.makedirs` 의 *mode* 인자는 더는 새로 생성된 중간 수준 디렉터리의 파일 사용 권한 비트에 영향을 "
"미치지 않습니다. 파일 사용 권한 비트를 설정하기 위해서 ``makedirs()`` 를 호출하기 전에 umask를 설정할 수 "
"있습니다. (Contributed by Serhiy Storchaka in :issue:`19930`.)"

#: ../Doc/whatsnew/3.7.rst:2251
msgid ""
"The :attr:`struct.Struct.format` type is now :class:`str` instead of "
":class:`bytes`. (Contributed by Victor Stinner in :issue:`21071`.)"
msgstr ""
":attr:`struct.Struct.format` 형은 이제 :class:`bytes` 가 아니라 :class:`str` 입니다."
" (Contributed by Victor Stinner in :issue:`21071`.)"

#: ../Doc/whatsnew/3.7.rst:2254
msgid ""
":func:`~cgi.parse_multipart` now accepts the *encoding* and *errors* "
"arguments and returns the same results as :class:`~FieldStorage`: for "
"non-file fields, the value associated to a key is a list of strings, not "
"bytes. (Contributed by Pierre Quentel in :issue:`29979`.)"
msgstr ""
":func:`~cgi.parse_multipart` 는 이제 *encoding* 및 *errors* 인자를 받아들이고 "
":class:`~FieldStorage` 과 같은 결과를 반환합니다: 파일이 아닌 필드의 경우 키와 연관된 값은 바이트열이 아니라 "
"문자열의 리스트입니다. (Contributed by Pierre Quentel in :issue:`29979`.)"

#: ../Doc/whatsnew/3.7.rst:2260
msgid ""
"Due to internal changes in :mod:`socket`, calling "
":func:`socket.fromshare` on a socket created by :func:`socket.share "
"<socket.socket.share>` in older Python versions is not supported."
msgstr ""
":mod:`socket` 의 내부 변경으로 인해, 이번 버전의 파이썬에서 :func:`socket.share "
"<socket.socket.share>` 로 만들어진 소켓에 :func:`socket.fromshare` 를 호출하는 것은 지원되지"
" 않습니다."

#: ../Doc/whatsnew/3.7.rst:2264
msgid ""
"``repr`` for :exc:`BaseException` has changed to not include the trailing"
" comma.  Most exceptions are affected by this change. (Contributed by "
"Serhiy Storchaka in :issue:`30399`.)"
msgstr ""
":exc:`BaseException` 의 ``repr`` 은 후행 쉼표를 포함하지 않도록 변경되었습니다. 대부분의 예외는 이 변경의"
" 영향을 받습니다. (Contributed by Serhiy Storchaka in :issue:`30399`.)"

#: ../Doc/whatsnew/3.7.rst:2268
msgid ""
"``repr`` for :class:`datetime.timedelta` has changed to include the "
"keyword arguments in the output. (Contributed by Utkarsh Upadhyay in "
":issue:`30302`.)"
msgstr ""
":class:`datetime.timedelta` 의 ``repr`` 은 키워드 인자를 출력에 포함하도록 변경되었습니다. "
"(Contributed by Utkarsh Upadhyay in :issue:`30302`.)"

#: ../Doc/whatsnew/3.7.rst:2271
msgid ""
"Because :func:`shutil.rmtree` is now implemented using the "
":func:`os.scandir` function, the user specified handler *onerror* is now "
"called with the first argument ``os.scandir`` instead of ``os.listdir`` "
"when listing the directory is failed."
msgstr ""
":func:`shutil.rmtree` 는 이제 :func:`os.scandir` 함수를 사용하여 구현되었으므로, 사용자 지정 "
"처리기 *onerror* 는 이제 디렉터리의 목록을 얻는 데 실패하면 첫 번째 인자가 ``os.listdir`` 대신 "
"``os.scandir`` 로 호출됩니다."

#: ../Doc/whatsnew/3.7.rst:2276
msgid ""
"Support for nested sets and set operations in regular expressions as in "
"`Unicode Technical Standard #18`_ might be added in the future.  This "
"would change the syntax.  To facilitate this future change a "
":exc:`FutureWarning` will be raised in ambiguous cases for the time "
"being. That include sets starting with a literal ``'['`` or containing "
"literal character sequences ``'--'``, ``'&&'``, ``'~~'``, and ``'||'``.  "
"To avoid a warning, escape them with a backslash. (Contributed by Serhiy "
"Storchaka in :issue:`30349`.)"
msgstr ""
"`유니코드 기술 표준 #18 <Unicode Technical Standard #18_>`_ 과 같이 정규 표현식에서 중첩 집합 및"
" 집합 연산에 대한 지원이 향후 추가될 수 있습니다. 그러면 문법이 변경됩니다. 미래의 변화를 촉진하기 위해 당분간 모호한 경우에 "
":exc:`FutureWarning` 를 일으킬 것입니다. 이 경우는 리터럴 ``'['`` 로 시작하거나 리터럴 문자 "
"``'--'``, ``'&&'``, ``'~~'`` 및 ``'||'`` 을 포함하는 집합을 포함합니다. 경고를 피하려면 백 슬래시로"
" 이스케이프 처리하십시오. (Contributed by Serhiy Storchaka in :issue:`30349`.)"

#: ../Doc/whatsnew/3.7.rst:2287
msgid ""
"The result of splitting a string on a :mod:`regular expression <re>` that"
" could match an empty string has been changed.  For example splitting on "
"``r'\\s*'`` will now split not only on whitespaces as it did previously, "
"but also on empty strings before all non-whitespace characters and just "
"before the end of the string. The previous behavior can be restored by "
"changing the pattern to ``r'\\s+'``.  A :exc:`FutureWarning` was emitted "
"for such patterns since Python 3.5."
msgstr ""
"빈 문자열과 일치 할 수 있는 :mod:`정규식 <re>` 으로 문자열을 나눈 결과가 변경되었습니다. 예를 들어, "
"``r'\\s*'`` 로 나누면, 이전처럼 공백 문자뿐만 아니라, 공백 문자가 아닌 문자의 앞과 문자열 끝 바로 직전의 빈 "
"문자열로도 나눕니다. 패턴을 ``r'\\s+'`` 로 변경하면 이전의 동작을 복원 할 수 있습니다. 파이썬 3.5부터 그러한 패턴에"
" 대해 :exc:`FutureWarning` 을 만들었습니다."

#: ../Doc/whatsnew/3.7.rst:2296
msgid ""
"For patterns that match both empty and non-empty strings, the result of "
"searching for all matches may also be changed in other cases.  For "
"example in the string ``'a\\n\\n'``, the pattern ``r'(?m)^\\s*?$'`` will "
"not only match empty strings at positions 2 and 3, but also the string "
"``'\\n'`` at positions 2--3.  To match only blank lines, the pattern "
"should be rewritten as ``r'(?m)^[^\\S\\n]*$'``."
msgstr ""
"빈 문자열과 비어 있지 않은 문자열 모두와 일치하는 패턴의 경우, 모든 일치를 검색한 결과가 다른 경우에도 변경될 수 있습니다. "
"예를 들어, 문자열 ``'a\\n\\n'`` 에서, 패턴 ``r'(?m)^\\s*?$'`` 는 위치 2와 3의 빈 문자열을 일치시킬"
" 뿐만 아니라, 위치 2--3의 문자열 ``'\\n'`` 도 일치시킵니다. 빈 줄만 일치시키려면, 패턴을 "
"``r'(?m)^[^\\S\\n]*$'`` 으로 다시 써야 합니다."

#: ../Doc/whatsnew/3.7.rst:2303
msgid ""
":func:`re.sub()` now replaces empty matches adjacent to a previous non-"
"empty match.  For example ``re.sub('x*', '-', 'abxd')`` returns now "
"``'-a-b--d-'`` instead of ``'-a-b-d-'`` (the first minus between 'b' and "
"'d' replaces 'x', and the second minus replaces an empty string between "
"'x' and 'd')."
msgstr ""
":func:`re.sub()`\\는 이제 이전의 비어 있지 않은 일치에 인접한 빈 일치를 치환합니다. 예를 들어 "
"``re.sub('x*', '-', 'abxd')`` 는 이제 ``'-a-b-d-'`` 대신에 ``'-a-b--d-'`` 를 "
"돌려줍니다 ('b'와 'd' 사이의 첫 번째 마이너스는 'x'를 치환하고 두 번째 마이너스는 'x'와 'd' 사이의 빈 문자열을 "
"치환합니다)."

#: ../Doc/whatsnew/3.7.rst:2309
msgid "(Contributed by Serhiy Storchaka in :issue:`25054` and :issue:`32308`.)"
msgstr ""
"(Contributed by Serhiy Storchaka in :issue:`25054` and :issue:`32308`.)"

#: ../Doc/whatsnew/3.7.rst:2311
msgid ""
"Change :func:`re.escape` to only escape regex special characters instead "
"of escaping all characters other than ASCII letters, numbers, and "
"``'_'``. (Contributed by Serhiy Storchaka in :issue:`29995`.)"
msgstr ""
"변경 :func:`re.escape` 가 ASCII 문자, 숫자 및 ``'_'`` 이외의 모든 문자를 이스케이프 하는 대신 정규식 "
"특수 문자만 이스케이프 하도록 변경합니다. (Contributed by Serhiy Storchaka in "
":issue:`29995`.)"

#: ../Doc/whatsnew/3.7.rst:2315
msgid ""
":class:`tracemalloc.Traceback` frames are now sorted from oldest to most "
"recent to be more consistent with :mod:`traceback`. (Contributed by Jesse"
" Bakker in :issue:`32121`.)"
msgstr ""
":class:`tracemalloc.Traceback` 프레임은 이제 가장 오래된 것부터 가장 최근의 것 순으로 정렬되어, "
":mod:`traceback` 과 더 일관성 있게 만듭니다. (Contributed by Jesse Bakker in "
":issue:`32121`.)"

#: ../Doc/whatsnew/3.7.rst:2319
msgid ""
"On OSes that support :const:`socket.SOCK_NONBLOCK` or "
":const:`socket.SOCK_CLOEXEC` bit flags, the :attr:`socket.type "
"<socket.socket.type>` no longer has them applied. Therefore, checks like "
"``if sock.type == socket.SOCK_STREAM`` work as expected on all platforms."
" (Contributed by Yury Selivanov in :issue:`32331`.)"
msgstr ""
":const:`socket.SOCK_NONBLOCK` 또는 :const:`socket.SOCK_CLOEXEC` 비트 플래그를 "
"지원하는 OS에서, :attr:`socket.type <socket.socket.type>` 에 이것들을 더는 적용하지 않습니다. "
"따라서 ``if sock.type == socket.SOCK_STREAM`` 과 같은 검사는 모든 플랫폼에서 예상대로 작동합니다. "
"(Contributed by Yury Selivanov in :issue:`32331`.)"

#: ../Doc/whatsnew/3.7.rst:2326
msgid ""
"On Windows the default for the *close_fds* argument of "
":class:`subprocess.Popen` was changed from :const:`False` to "
":const:`True` when redirecting the standard handles. If you previously "
"depended on handles being inherited when using :class:`subprocess.Popen` "
"with standard io redirection, you will have to pass ``close_fds=False`` "
"to preserve the previous behaviour, or use "
":attr:`STARTUPINFO.lpAttributeList "
"<subprocess.STARTUPINFO.lpAttributeList>`."
msgstr ""
"윈도우에서 표준 핸들을 리디렉션 할 때 :class:`subprocess.Popen` 의 *close_fds* 인자의 기본값이 "
":const:`False` 에서 :const:`True` 로 변경되었습니다. 이전에 표준 입출력 리디렉션으로 "
":class:`subprocess.Popen` 을 사용할 때 상속된 핸들에 의존했다면, 이전 동작을 유지하기 위해서 "
"``close_fds=False`` 를 넘기거나 :attr:`STARTUPINFO.lpAttributeList "
"<subprocess.STARTUPINFO.lpAttributeList>` 를 사용해야 합니다."

#: ../Doc/whatsnew/3.7.rst:2334
msgid ""
":meth:`importlib.machinery.PathFinder.invalidate_caches` -- which "
"implicitly affects :func:`importlib.invalidate_caches` -- now deletes "
"entries in :data:`sys.path_importer_cache` which are set to ``None``. "
"(Contributed by Brett Cannon in :issue:`33169`.)"
msgstr ""
":meth:`importlib.machinery.PathFinder.invalidate_caches` -- 묵시적으로 "
":func:`importlib.invalidate_caches` 에 영향을 줍니다 -- 는 이제 "
":data:`sys.path_importer_cache` 에서 ``None`` 으로 설정된 엔트리를 삭제합니다. "
"(Contributed by Brett Cannon in :issue:`33169`.)"

#: ../Doc/whatsnew/3.7.rst:2339
msgid ""
"In :mod:`asyncio`, :meth:`loop.sock_recv() "
"<asyncio.AbstractEventLoop.sock_recv>`, :meth:`loop.sock_sendall() "
"<asyncio.AbstractEventLoop.sock_sendall>`, :meth:`loop.sock_accept() "
"<asyncio.AbstractEventLoop.sock_accept>`, :meth:`loop.getaddrinfo() "
"<asyncio.AbstractEventLoop.getaddrinfo>`, :meth:`loop.getnameinfo() "
"<asyncio.AbstractEventLoop.getnameinfo>` have been changed to be proper "
"coroutine methods to match their documentation.  Previously, these "
"methods returned :class:`asyncio.Future` instances. (Contributed by Yury "
"Selivanov in :issue:`32327`.)"
msgstr ""
":mod:`asyncio` 에서, :meth:`loop.sock_recv() "
"<asyncio.AbstractEventLoop.sock_recv>`, :meth:`loop.sock_sendall() "
"<asyncio.AbstractEventLoop.sock_sendall>`, :meth:`loop.sock_accept() "
"<asyncio.AbstractEventLoop.sock_accept>`, :meth:`loop.getaddrinfo() "
"<asyncio.AbstractEventLoop.getaddrinfo>`, :meth:`loop.getnameinfo() "
"<asyncio.AbstractEventLoop.getnameinfo>` 는 문서와 일치하도록 적절한 코루틴 메서드로 "
"변경되었습니다. 이전에는, 이 메서드는 :class:`asyncio.Future` 인스턴스를 반환했습니다. (Contributed "
"by Yury Selivanov in :issue:`32327`.)"

#: ../Doc/whatsnew/3.7.rst:2350
msgid ""
":attr:`asyncio.Server.sockets` now returns a copy of the internal list of"
" server sockets, instead of returning it directly. (Contributed by Yury "
"Selivanov in :issue:`32662`.)"
msgstr ""
":attr:`asyncio.Server.sockets` 는 이제 내부 서버 소켓 리스트를 직접 돌려주는 대신 사본을 반환합니다. "
"(Contributed by Yury Selivanov in :issue:`32662`.)"

#: ../Doc/whatsnew/3.7.rst:2354
msgid ""
":attr:`Struct.format <struct.Struct.format>` is now a :class:`str` "
"instance instead of a :class:`bytes` instance. (Contributed by Victor "
"Stinner in :issue:`21071`.)"
msgstr ""
":attr:`Struct.format <struct.Struct.format>` 는 :class:`bytes` 인스턴스 대신에 "
":class:`str` 인스턴스가 되었습니다. (Contributed by Victor Stinner in "
":issue:`21071`.)"

#: ../Doc/whatsnew/3.7.rst:2358
msgid ""
":meth:`ast.literal_eval()` is now stricter.  Addition and subtraction of "
"arbitrary numbers are no longer allowed. (Contributed by Serhiy Storchaka"
" in :issue:`31778`.)"
msgstr ""
":meth:`ast.literal_eval()` 이 이제 더 엄격해졌습니다. 임의 숫자를 더하거나 빼는 것이 더는 허용되지 "
"않습니다. (Contributed by Serhiy Storchaka in :issue:`31778`.)"

#: ../Doc/whatsnew/3.7.rst:2362
msgid ""
":meth:`Calendar.itermonthdates <calendar.Calendar.itermonthdates>` will "
"now consistently raise an exception when a date falls outside of the "
"``0001-01-01`` through ``9999-12-31`` range.  To support applications "
"that cannot tolerate such exceptions, the new "
":meth:`Calendar.itermonthdays3 <calendar.Calendar.itermonthdays3>` and "
":meth:`Calendar.itermonthdays4 <calendar.Calendar.itermonthdays4>` can be"
" used. The new methods return tuples and are not restricted by the range "
"supported by :class:`datetime.date`. (Contributed by Alexander Belopolsky"
" in :issue:`28292`.)"
msgstr ""
":meth:`Calendar.itermonthdates <calendar.Calendar.itermonthdates>` 는 이제 "
"날짜가 ``0001-01-01`` 에서 ``9999-12-31`` 범위를 벗어나면 일관되게 예외를 일으킵니다. 이러한 예외를 허용할"
" 수 없는 응용 프로그램을 지원하기 위해 새로운 :meth:`Calendar.itermonthdays3 "
"<calendar.Calendar.itermonthdays3>` 와 :meth:`Calendar.itermonthdays4 "
"<calendar.Calendar.itermonthdays4>` 를 사용할 수 있습니다. 새로운 메서드는 튜플을 반환하고 "
":class:`datetime.date` 에 의해 지원되는 범위에 제한받지 않습니다. (Contributed by Alexander"
" Belopolsky in :issue:`28292`.)"

#: ../Doc/whatsnew/3.7.rst:2372
msgid ""
":class:`collections.ChainMap` now preserves the order of the underlying "
"mappings.  (Contributed by Raymond Hettinger in :issue:`32792`.)"
msgstr ""
":class:`collections.ChainMap` 은 이제 하부 매핑의 순서를 보존합니다. (Contributed by "
"Raymond Hettinger in :issue:`32792`.)"

#: ../Doc/whatsnew/3.7.rst:2375
msgid ""
"The ``submit()`` method of :class:`concurrent.futures.ThreadPoolExecutor`"
" and :class:`concurrent.futures.ProcessPoolExecutor` now raises a "
":exc:`RuntimeError` if called during interpreter shutdown. (Contributed "
"by Mark Nemec in :issue:`33097`.)"
msgstr ""
":class:`concurrent.futures.ThreadPoolExecutor` 와 "
":class:`concurrent.futures.ProcessPoolExecutor` 의 ``submit()`` 메서드는 "
"인터프리터가 종료하는 동안 호출되면 :exc:`RuntimeError` 를 발생시킵니다. (Contributed by Mark "
"Nemec in :issue:`33097`.)"

#: ../Doc/whatsnew/3.7.rst:2380
msgid ""
"The :class:`configparser.ConfigParser` constructor now uses "
"``read_dict()`` to process the default values, making its behavior "
"consistent with the rest of the parser.  Non-string keys and values in "
"the defaults dictionary are now being implicitly converted to strings. "
"(Contributed by James Tocknell in :issue:`23835`.)"
msgstr ""
":class:`configparser.ConfigParser` 생성자는 ``read_dict()`` 를 사용하여 기본값을 처리해서,"
" 그 동작을 파서의 나머지와 일관되게 합니다. 이제 기본 딕셔너리의 문자열이 아닌 키와 값은 묵시적으로 문자열로 변환됩니다. "
"(Contributed by James Tocknell in :issue:`23835`.)"

#: ../Doc/whatsnew/3.7.rst:2388
msgid "Changes in the C API"
msgstr "C API의 변경"

#: ../Doc/whatsnew/3.7.rst:2390
msgid ""
"The function :c:func:`PySlice_GetIndicesEx` is considered unsafe for "
"resizable sequences.  If the slice indices are not instances of "
":class:`int`, but objects that implement the :meth:`!__index__` method, "
"the sequence can be resized after passing its length to "
":c:func:`!PySlice_GetIndicesEx`.  This can lead to returning indices out "
"of the length of the sequence.  For avoiding possible problems use new "
"functions :c:func:`PySlice_Unpack` and :c:func:`PySlice_AdjustIndices`. "
"(Contributed by Serhiy Storchaka in :issue:`27867`.)"
msgstr ""
"함수 :c:func:`PySlice_GetIndicesEx` 는 크기 조절이 가능한 시퀀스에 대해 안전하지 않은 것으로 간주합니다."
" 슬라이스 인덱스가 :class:`int` 의 인스턴스가 아니라 :meth:`!__index__` 메서드를 구현하는 객체인 경우, "
"시퀀스는 길이를 :c:func:`!PySlice_GetIndicesEx` 에 전달한 후 크기를 조정할 수 있습니다. 이로 인해 "
"시퀀스의 길이를 벗어나는 인덱스가 반환될 수 있습니다. 가능한 문제를 피하려면 :c:func:`PySlice_Unpack`\\과 "
":c:func:`PySlice_AdjustIndices` 라는 새로운 함수를 사용하십시오. (Contributed by Serhiy"
" Storchaka in :issue:`27867`.)"

#: ../Doc/whatsnew/3.7.rst:2401
msgid "CPython bytecode changes"
msgstr "CPython 바이트 코드 변경"

#: ../Doc/whatsnew/3.7.rst:2403
msgid ""
"There are two new opcodes: :opcode:`LOAD_METHOD` and "
":opcode:`CALL_METHOD`. (Contributed by Yury Selivanov and INADA Naoki in "
":issue:`26110`.)"
msgstr ""
"두 개의 새로운 옵코드가 있습니다: :opcode:`LOAD_METHOD`\\와 :opcode:`CALL_METHOD`. "
"(Contributed by Yury Selivanov and INADA Naoki in :issue:`26110`.)"

#: ../Doc/whatsnew/3.7.rst:2406
msgid ""
"The :opcode:`STORE_ANNOTATION` opcode has been removed. (Contributed by "
"Mark Shannon in :issue:`32550`.)"
msgstr ""
":opcode:`STORE_ANNOTATION` 옵코드가 삭제되었습니다. (Contributed by Mark Shannon in "
":issue:`32550`.)"

#: ../Doc/whatsnew/3.7.rst:2413
msgid ""
"The file used to override :data:`sys.path` is now called ``<python-"
"executable>._pth`` instead of ``'sys.path'``. See :ref:`finding_modules` "
"for more information. (Contributed by Steve Dower in :issue:`28137`.)"
msgstr ""
":data:`sys.path` 를 재정의하는데 사용되는 파일은 이제 ``'sys.path'`` 대신에 ``<python-"
"executable>._pth`` 라고 불립니다. 자세한 정보는 :ref:`finding_modules` 를 보십시오. "
"(Contributed by Steve Dower in :issue:`28137`.)"

#: ../Doc/whatsnew/3.7.rst:2420
msgid "Other CPython implementation changes"
msgstr "기타 CPython 구현 변경"

#: ../Doc/whatsnew/3.7.rst:2422
msgid ""
"In preparation for potential future changes to the public CPython runtime"
" initialization API (see :pep:`432` for an initial, but somewhat "
"outdated, draft), CPython's internal startup and configuration management"
" logic has been significantly refactored. While these updates are "
"intended to be entirely transparent to both embedding applications and "
"users of the regular CPython CLI, they're being mentioned here as the "
"refactoring changes the internal order of various operations during "
"interpreter startup, and hence may uncover previously latent defects, "
"either in embedding applications, or in CPython itself. (Initially "
"contributed by Nick Coghlan and Eric Snow as part of :issue:`22257`, and "
"further updated by Nick, Eric, and Victor Stinner in a number of other "
"issues). Some known details affected:"
msgstr ""
"공개된 CPython 실행시간 초기화 API에 가해질 잠재적인 미래의 변경을 준비하기 위해 (초기의, 하지만 약간 낡은 초안은 "
":pep:`432`\\를 보십시오), CPython의 내부 시작 및 구성 관리 로직이 상당히 리팩토링 되었습니다. 이러한 업데이트는"
" 내장형 응용 프로그램과 일반 CPython CLI의 사용자 모두에게 완전히 투명하도록 의도했지만, 리팩토링 변경이 인터프리터 시작"
" 시 다양한 작업의 내부 순서를 변경하므로 내장형 응용 프로그램과 CPython 자체에서 잠재 결함을 드러낼 수 있으므로 여기에서 "
"언급합니다. (처음에는 Nick Coghlan과 Eric Snow가 :issue:`22257` 의 일부로 이바지했고, Nick, "
"Eric, Victor Stinner가 여러 이슈를 통해 추가로 업데이트했습니다). 영향을 받는 일부 알려진 세부 정보는 "
"이렇습니다:"

#: ../Doc/whatsnew/3.7.rst:2435
msgid ""
":c:func:`PySys_AddWarnOptionUnicode` is not currently usable by embedding"
" applications due to the requirement to create a Unicode object prior to "
"calling `Py_Initialize`. Use :c:func:`PySys_AddWarnOption` instead."
msgstr ""
":c:func:`PySys_AddWarnOptionUnicode` 는 `Py_Initialize`\\를 호출하기 전에 유니코드 "
"객체를 생성해야 하는 요구사항 때문에 현재 내장형 응용 프로그램에서는 사용할 수 없습니다. 대신에 "
":c:func:`PySys_AddWarnOption` 을 사용하십시오."

#: ../Doc/whatsnew/3.7.rst:2439
msgid ""
"warnings filters added by an embedding application with "
":c:func:`PySys_AddWarnOption` should now more consistently take "
"precedence over the default filters set by the interpreter"
msgstr ""
":c:func:`PySys_AddWarnOption` 으로 내장형 응용 프로그램이 추가한 경고 필터는 이제 인터프리터가 설정한 기본"
" 필터보다 더 일관되게 우선해야 합니다."

#: ../Doc/whatsnew/3.7.rst:2443
msgid ""
"Due to changes in the way the default warnings filters are configured, "
"setting :c:data:`Py_BytesWarningFlag` to a value greater than one is no "
"longer sufficient to both emit :exc:`BytesWarning` messages and have them"
" converted to exceptions.  Instead, the flag must be set (to cause the "
"warnings to be emitted in the first place), and an explicit "
"``error::BytesWarning`` warnings filter added to convert them to "
"exceptions."
msgstr ""
"기본 경고 필터가 구성되는 방식의 변경으로 인해, :c:data:`Py_BytesWarningFlag` 를 1보다 큰 값으로 "
"설정하는 것이 더는 :exc:`BytesWarning` 메시지를 내보내면서 동시에 예외로 변환되도록 하기에 충분하지 못합니다. "
"대신, 플래그를 설정해야 하고 (경고가 처음에 발생하도록), 예외로 변환하기 위해 명시적으로 "
"``error::BytesWarning`` 경고 필터를 추가해야 합니다."

#: ../Doc/whatsnew/3.7.rst:2450
msgid ""
"Due to a change in the way docstrings are handled by the compiler, the "
"implicit ``return None`` in a function body consisting solely of a "
"docstring is now marked as occurring on the same line as the docstring, "
"not on the function's header line."
msgstr ""
"컴파일러가 독스트링을 처리하는 방식의 변화 때문에, 독스트링만으로 구성된 함수 바디의 묵시적인 ``return None`` 은, 이제 "
"함수의 헤더 행이 아니라 독스트링과 같은 줄에 등장하는 것으로 표시됩니다."

#: ../Doc/whatsnew/3.7.rst:2455
msgid ""
"The current exception state has been moved from the frame object to the "
"co-routine. This simplified the interpreter and fixed a couple of obscure"
" bugs caused by having swap exception state when entering or exiting a "
"generator. (Contributed by Mark Shannon in :issue:`25612`.)"
msgstr ""
"현재 예외 상태가 프레임 객체에서 코루틴으로 옮겨졌습니다. 이는 인터프리터를 간소화하고 제너레이터에 들어가거나 빠져나갈 때 예외 상태를 "
"스와프함으로써 발생하는 모호한 두 가지 버그를 수정했습니다. (Contributed by Mark Shannon in "
":issue:`25612`.)"
